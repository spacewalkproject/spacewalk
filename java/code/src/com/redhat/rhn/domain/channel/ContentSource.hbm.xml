<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"classpath://org/hibernate/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.redhat.rhn.domain.channel.ContentSource"
        table="rhnContentSource" >

        <id name="id" type="long" column="id">
            <meta attribute="scope-set">protected</meta>
            <generator class="sequence">
                <param name="sequence">rhn_chan_content_src_id_seq</param>
            </generator>
        </id>

        <property name="sourceUrl" type="string" column="source_url"/>
        <property name="created" type="timestamp" column="created"  insert="false" update="false" />
        <property name="modified" type="timestamp" column="modified" insert="false" update="false" />
        <property name="label" type="string" column="label"/>

        <many-to-one name="org"
                     column="org_id"
                     class="com.redhat.rhn.domain.org.Org"
                     not-null="true" />
        <many-to-one
            name="type"
            class="com.redhat.rhn.domain.channel.ContentSourceType"
            column="type_id"/>
        
        <set name="sslSets" table="rhnContentSourceSsl" cascade="save-update">
            <key column="content_source_id" />
            <composite-element class="com.redhat.rhn.domain.channel.SslContentSource">
                <many-to-one name="caCert" column="ssl_ca_cert_id" class="com.redhat.rhn.domain.kickstart.crypto.SslCryptoKey"
                             not-null="true" />
                <many-to-one name="clientCert" column="ssl_client_cert_id" class="com.redhat.rhn.domain.kickstart.crypto.SslCryptoKey" />
                <many-to-one name="clientKey" column="ssl_client_key_id" class="com.redhat.rhn.domain.kickstart.crypto.SslCryptoKey" />

                <property name="created" column="created" type="timestamp"
                          insert="false" update="false"/>
                <property name="modified" column="modified" type="timestamp"
                          insert="false" update="false"/>
            </composite-element>
        </set>

        <set name="channels" lazy="true" table="rhnChannelContentSource"
            cascade="save-update">
            <key column="source_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.channel.Channel"
                column="channel_id"/>
        </set>
    </class>


    <query name="ContentSource.findByIdandOrg">
        <![CDATA[from com.redhat.rhn.domain.channel.ContentSource as c where c.id = :id and c.org = :org]]>
    </query>
    <query name="ContentSource.findByOrg">
        <![CDATA[from com.redhat.rhn.domain.channel.ContentSource as c where c.org = :org]]>
    </query>
    <query name="ContentSource.findByOrgAndLabel">
        <![CDATA[FROM com.redhat.rhn.domain.channel.ContentSource AS c
                    WHERE c.org = :org
                    AND c.label = :label]]>
    </query>
    <query name="ContentSource.findByOrgAndRepo">
        <![CDATA[FROM com.redhat.rhn.domain.channel.ContentSource AS c
                    WHERE c.org = :org
                    AND c.type.id = :type_id
                    AND c.sourceUrl = :url]]>
    </query>
    <query name="ContentSource.findByOrgandChannel">
        <![CDATA[SELECT cs from com.redhat.rhn.domain.channel.ContentSource as cs,
                      com.redhat.rhn.domain.channel.Channel as c
                 where cs.org = :org
                 and c = :channel
                 and cs in elements(c.sources)
                 ]]>
    </query>




</hibernate-mapping>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"classpath://org/hibernate/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.redhat.rhn.domain.channel.Channel"
        table="rhnChannel">

        <id name="id" type="long" column="id">
            <meta attribute="scope-set">protected</meta>
            <generator class="sequence">
                <param name="sequence">RHN_CHANNEL_ID_SEQ</param>
            </generator>
        </id>

        <property name="baseDir" type="string" column="basedir"/>
        <property name="description" type="string" column="description"/>
        <property name="endOfLife" type="date" column="end_of_life"/>
        <property name="GPGKeyUrl" type="string" column="gpg_key_url"/>
        <property name="GPGKeyId" type="string" column="gpg_key_id"/>
        <property name="GPGKeyFp" type="string" column="gpg_key_fp"/>
        <property name="label" type="string" column="label"/>
        <property name="lastModified" type="timestamp" column="last_modified"/>
        <property name="name" type="string" column="name"/>
        <property name="summary" type="string" column="summary"/>
        <property name="access" type="string" column="channel_access"/>
        <property name="maintainerName" type="string" column="maint_name"/>
        <property name="maintainerEmail" type="string" column="maint_email"/>
        <property name="maintainerPhone" type="string" column="maint_phone"/>
        <property name="supportPolicy" type="string" column="support_policy"/>
        <property name="lastSynced" type="timestamp" column="last_synced"/>
        <property name="created" column="created" type="timestamp"
            insert="false" update="false"/>
        <property name="modified" column="modified" type="timestamp"
            insert="false" update="false"/>

        <many-to-one
            name="org"
            class="com.redhat.rhn.domain.org.Org"
            cascade="none"
            column="org_id"/>

        <many-to-one
            name="channelArch"
            class="com.redhat.rhn.domain.channel.ChannelArch"
            column="channel_arch_id"/>

         <many-to-one
            name="checksumType"
            class="com.redhat.rhn.domain.common.ChecksumType"
            column="checksum_type_id"/>

        <set name="distChannelMaps">
            <key column="channel_id"/>
            <one-to-many class="com.redhat.rhn.domain.channel.DistChannelMap"/>
        </set>

        <many-to-one
            name="parentChannel"
            class="com.redhat.rhn.domain.channel.Channel"
            column="parent_channel"/>

        <set name="channelFamilies" lazy="true" table="rhnChannelFamilyMembers"
	     cascade="save-update">
            <key column="channel_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.channel.ChannelFamily"
                column="channel_family_id"/>
        </set>

        <one-to-one name="comps" property-ref="channel"
            class="com.redhat.rhn.domain.channel.Comps" cascade="all" lazy="proxy"/>

        <set name="trustedOrgs" lazy="true" table="rhnChannelTrust"
         cascade="save-update">
            <key column="channel_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.org.Org"
                column="org_trust_id"/>
        </set>


        <set name="erratas" lazy="true" table="rhnChannelErrata"
            cascade="save-update">
            <key column="channel_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.errata.impl.PublishedErrata"
                column="errata_id"/>
        </set>

        <set name="packages" lazy="true" table="rhnChannelPackage"
            cascade="save-update">
            <key column="channel_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.rhnpackage.Package"
                column="package_id"/>
        </set>

        <set name="sources" lazy="true" table="rhnChannelContentSource"
            cascade="save-update">
            <key column="channel_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.channel.ContentSource"
                column="source_id"/>
        </set>

        <many-to-one name="product"
                    column="channel_product_id"
                    class="com.redhat.rhn.domain.channel.ChannelProduct"/>

        <many-to-one name="productName"
                    column="product_name_id"
                    class="com.redhat.rhn.domain.channel.ProductName"/>

        <joined-subclass
                name="com.redhat.rhn.domain.channel.ClonedChannel"
                table="rhnChannelCloned">
                <key column="id"/>
                <many-to-one name="original" column="original_id"
                class="com.redhat.rhn.domain.channel.Channel" />
        </joined-subclass>
        <!--
              Need to change delete_channel to return the number of rows
              affected in order for Hibernate to be able to use this method.
        <sql-delete callable="true">{? = call rhn.delete_channel(:id)}</sql-delete>
        -->
    </class>

    <query name="Channel.listCustomChannels">
        <![CDATA[from com.redhat.rhn.domain.channel.Channel as c where c.org = :org order by name]]>
    </query>

    <query name="Channel.findRedHatBaseChannels">
	<![CDATA[
		from com.redhat.rhn.domain.channel.Channel as c where c.org is null
    						and parentChannel is null order by c.name]]>
    </query>

    <sql-query name="Channel.findCompatCustomBaseChsSSMNoBase">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT c.id, count(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         LEFT JOIN rhnServerChannel sc ON sc.server_id = s.id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnChannel c ON c.channel_arch_id = scac.channel_arch_id
         WHERE c.parent_channel IS NULL
         AND sc.channel_id IS NULL
         AND (c.org_id = :org_id OR
             (C.id, C.org_id)
             IN
             (SELECT scv.id, scv.org_id
              FROM rhnSharedChannelView scv
              WHERE scv.org_trust_id = :org_id
                AND scv.parent_channel IS NULL))
        GROUP BY (c.id)) ch
    JOIN rhnChannel c ON c.id = ch.id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnSet rset
         LEFT JOIN rhnServerChannel sc ON sc.server_id = rset.element
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id IS NULL)
    ORDER BY UPPER(c.name)
        ]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCompatCustomBaseChsSSM">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT c.id, count(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         JOIN rhnServerChannel sc ON sc.server_id = s.id AND sc.channel_id = :channel_id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnChannel c ON c.channel_arch_id = scac.channel_arch_id
         WHERE c.parent_channel IS NULL
         AND (c.org_id = :org_id OR
             (C.id, C.org_id)
             IN
             (SELECT scv.id, scv.org_id
              FROM rhnSharedChannelView scv
              WHERE scv.ORG_TRUST_ID = :org_id
                AND scv.parent_channel IS NULL))
        GROUP BY (c.id)) ch
    JOIN rhnChannel c ON c.id = ch.id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnServerChannel sc
         JOIN rhnSet rset ON rset.element = sc.server_id
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id = :channel_id)
    ORDER BY UPPER(c.name)
        ]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCompatibleForChannelSSMInNullOrg">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT dcm.channel_id, COUNT(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         JOIN rhnServerChannel sc ON sc.server_id = s.id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnDistChannelMap dcm ON dcm.channel_arch_id = scac.channel_arch_id AND dcm.release = s.release AND dcm.org_id IS NULL
         WHERE sc.channel_id = :channel_id
         GROUP BY dcm.channel_id) ch
    JOIN rhnChannel {c} ON c.id = ch.channel_id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnServerChannel sc
         JOIN rhnSet rset ON rset.element = sc.server_id
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id = :channel_id)]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCompatibleSSMNoBaseInNullOrg">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT dcm.channel_id, COUNT(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         LEFT JOIN rhnServerChannel sc ON sc.server_id = s.id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnDistChannelMap dcm ON dcm.channel_arch_id = scac.channel_arch_id AND dcm.release = s.release AND dcm.org_id IS NULL
         WHERE sc.channel_id IS NULL
         GROUP BY dcm.channel_id) ch
    JOIN rhnChannel {c} ON c.id = ch.channel_id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnSet rset
         LEFT JOIN rhnServerChannel sc ON sc.server_id = rset.element
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id IS NULL)]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findRedHatBaseChannelsByUserId">
        <![CDATA[SELECT {c.*}
                FROM rhnChannel {c}
                    INNER JOIN rhnUserChannel uc ON uc.channel_id = c.id
                    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
                WHERE c.org_id is null
                    AND c.parent_channel is null
                    AND uc.user_id = :userId]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCustomBaseChannels">
    	<![CDATA[SELECT {c.*}
                FROM rhnUserChannel uc,
                    rhnChannel {c} left outer join rhnChannelCloned c_1_
                    ON c.id = c_1_.id
                WHERE c.id = uc.channel_id
                    AND uc.user_id = :user_id
                    AND c.org_id is not null
                    AND uc.role = 'subscribe'
    				AND c.parent_channel is null
    		    order by C.name]]>						
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>
    <sql-query name="Channel.findSubscribableBaseChannels">
        <![CDATA[SELECT {c.*}
                 FROM rhnUserChannel uc JOIN rhnChannel {c} ON c.id = uc.channel_id
                     LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
                 WHERE uc.user_id = :user_id
                     AND uc.role = 'subscribe'
                     AND c.parent_channel is null]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>
    <sql-query name="Channel.findAllBaseChannels">
        <![CDATA[SELECT {c.*}
                 FROM rhnUserChannel uc,
                      rhnChannel {c} left outer join rhnChannelCloned c_1_
                      ON c.id = c_1_.id
                 WHERE c.id = uc.channel_id
                   AND uc.org_id = :org_id
                   AND uc.user_id = :user_id
                   AND uc.role = 'subscribe'
                   AND c.parent_channel is null
                  ORDER BY c.name]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <query name="Channel.findAllBaseChannelsOnSatellite">
        <![CDATA[from com.redhat.rhn.domain.channel.Channel as c
                  where parentChannel is null]]>
    </query>

   <query name="Channel.listAllChildren">
	<![CDATA[
    			from com.redhat.rhn.domain.channel.Channel as c where c.parentChannel = :parent
    						]]>						
    </query>

    <sql-query name="Channel.findByIdAndUserId">
        <![CDATA[SELECT {c.*}
              FROM rhnChannel {c} left outer join rhnChannelCloned c_1_
                   ON c.id = c_1_.id
             WHERE c.id = :cid
               AND (rhn_channel.user_role_check(c.id, :userId, 'subscribe') = 1 OR
                    rhn_channel.user_role_check(c.id, :userId, 'manage') = 1) ]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

   <sql-query name="Channel.findByLabelAndUserId">
        <![CDATA[SELECT {c.*}
              FROM rhnChannel {c}
                LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
             WHERE c.label = :label
               AND (rhn_channel.user_role_check(c.id, :userId, 'subscribe') = 1 OR
                    rhn_channel.user_role_check(c.id, :userId, 'manage') = 1) ]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <query name="Channel.findChannelIdsByLabels">
        <![CDATA[SELECT c.id
              FROM com.redhat.rhn.domain.channel.Channel c
             WHERE c.label in (:labels)]]>
    </query>

    <sql-query name="Channel.findBaseChannel">
        <![CDATA[SELECT {c.*}
              FROM rhnServerChannel sc, rhnChannel {c}
                LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
             WHERE sc.server_id = :sid
               AND sc.channel_id = c.id
               AND c.parent_channel IS NULL]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <query name="Channel.channelsWithClonableErrata">
        <![CDATA[from com.redhat.rhn.domain.channel.ClonedChannel as c where c.org = :org]]>
    </query>

    <sql-query name="Channel.packageInChannelAndErrata">
        <![CDATA[
                select cp.package_id
                  from rhnChannelPackage cp
                  join rhnErrataPackage ep
                    on ep.package_id = cp.package_id
                 where cp.channel_id = :cid
                   and ep.errata_id in (:eids)
				   ]]>
    </sql-query>


    <sql-query name="Channel.accessibleChildChannelIds">
        <![CDATA[SELECT {c.*}
  FROM   rhnChannel c
         LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
 WHERE   parent_channel = :cid
     AND rhn_channel.get_org_access(c.id, :org_id) = 1
 UNION
 SELECT {c.*}
 FROM    rhnChannel c
 LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id,
         rhnSharedChannelView sc
 WHERE   sc.parent_channel = :cid
 AND     sc.org_trust_id = :org_id
 AND     sc.id = c.id
    ]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

   <sql-query name="Channel.accessibleChildChannels">
        <![CDATA[SELECT {c.*}
					FROM rhnChannel c
				LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
		        where  parent_channel = :cid AND
					rhn_channel.user_role_check(c.id, :userId, 'subscribe') = 1]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.availableEntitlements">
        <return-scalar type="long" column="entitlements"/>
        <![CDATA[select rhn_channel.available_chan_subscriptions(:channel_id, :org_id) as entitlements from dual]]>
    </sql-query>

    <sql-query name="Channel.availableFveEntitlements">
        <return-scalar type="long" column="entitlements"/>
        <![CDATA[select rhn_channel.available_fve_chan_subs(:channel_id, :org_id) as entitlements from dual]]>
    </sql-query>

    <sql-query name="Channel.verifyLabel">
        <return-scalar type="string" column="label"/>
        <![CDATA[select label from rhnChannel where label = :label]]>
    </sql-query>

    <sql-query name="Channel.verifyName">
        <return-scalar type="string" column="name"/>
        <![CDATA[select name from rhnChannel where name = :name]]>
    </sql-query>

    <sql-query name="Channel.kickstartableTreeChannels">
        <![CDATA[
            SELECT {c.*}
            FROM rhnChannel c
                LEFT JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
                JOIN rhnAvailableChannels ach ON ach.channel_id = c.id
                JOIN rhnChannelArch ca ON ca.id = ach.channel_arch_id
            WHERE ach.org_id = :org_id
                AND ach.channel_depth = 1
            ORDER BY rhn_channel.channel_priority(ach.parent_or_self_id),
                UPPER(ach.channel_name)
        ]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.kickstartableChannels">
        <![CDATA[
            SELECT DISTINCT {c.*},
                rhn_channel.channel_priority(ach.parent_or_self_id),
                UPPER(ach.channel_name)
            FROM rhnChannel c
                LEFT JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
                JOIN rhnAvailableChannels ach ON ach.channel_id = c.id
                JOIN rhnChannelArch ca ON ca.id = ach.channel_arch_id
                JOIN rhnKickstartableTree kt ON kt.channel_id = c.id
                JOIN rhnKSInstallType ksit ON ksit.id = kt.install_type
            WHERE ach.org_id = :org_id
                AND ach.channel_depth = 1
                AND (ksit.label LIKE 'rhel%' OR ksit.label = 'fedora')
            ORDER BY rhn_channel.channel_priority(ach.parent_or_self_id),
                UPPER(ach.channel_name)
        ]]>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.packageByFileName">
      <![CDATA[SELECT {p.*}
          FROM rhnPackage {p}
             left join rhnSolarisPatchSet P_2_ on p.id = P_2_.package_id
             left join rhnSolarisPatch P_1_ on p.id = P_1_.package_id,
             rhnChannelPackage CP,
             rhnChannel C
             WHERE (C.id = :channel_id OR C.parent_channel = :channel_id)
               AND (CP.channel_id = C.id  OR CP.channel_id = C.parent_channel)
               AND CP.package_id = P.id
               AND P.path LIKE :pathlike
        ]]>
    <return alias="p" class="com.redhat.rhn.domain.rhnpackage.Package" />
    </sql-query>

    <sql-query name="Channel.getPackageCount">
        <return-scalar type="int" column="package_count"/>
        <![CDATA[select count(*) as package_count from rhnChannelPackage cp where cp.channel_id = :cid]]>
    </sql-query>

   <sql-query name="Channel.getErrataCount">
        <return-scalar type="int" column="errata_count"/>
        <![CDATA[select count(*) as errata_count from rhnChannelErrata cp where cp.channel_id = :cid]]>
    </sql-query>

    <sql-query name="Channel.getPackageIdList">
        <return-scalar type="long" column="package_id"/>
        <![CDATA[select cp.package_id from rhnChannelPackage cp where cp.channel_id = :cid]]>
    </sql-query>

    <sql-query name="Channel.lookupOriginalPackages">
        <![CDATA[
            SELECT DISTINCT cp.package_id AS id
            FROM rhnChannelPackage cp
            LEFT OUTER JOIN (
                    SELECT ep.package_id, ep.errata_id
                    FROM rhnChannelErrata ce
                    JOIN rhnErrataPackage ep ON ep.errata_id = ce.errata_id
                    WHERE ce.channel_id = :from_cid) e ON cp.package_id = e.package_id
            WHERE cp.channel_id = :from_cid
            AND e.errata_id IS NULL
        ]]>
        <return-scalar column="id" type="long"/>
    </sql-query>

	<query name="Channel.lookupOriginal">
    	<![CDATA[ select c.original
    			from com.redhat.rhn.domain.channel.ClonedChannel as c where c = :clone
    						]]>						
    </query>
    <query name="Channel.findChannelArchLabelsSyncdChannels">
    	<![CDATA[select distinct c.channelArch.label from com.redhat.rhn.domain.channel.Channel as c]]>
    </query>

</hibernate-mapping>

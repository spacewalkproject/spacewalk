<datasource_modes>

<write-mode name="remove_org_channel_setting">
  <query params="org_id, cid, label">
DELETE
  FROM rhnOrgChannelSettings OCS
 WHERE OCS.org_id = :org_id
   AND OCS.channel_id = :cid
   AND OCS.setting_id = (SELECT id FROM rhnOrgChannelSettingsType WHERE label = :label)
   </query>
</write-mode>

<write-mode name="add_channel_package">
  <query params="pid, cid">
  INSERT INTO rhnChannelPackage (channel_id, package_id)
  VALUES (:cid, :pid)
  </query>
</write-mode>

<write-mode name="add_channel_packages">
  <query params="cid">
  INSERT INTO rhnChannelPackage (channel_id, package_id)
      select :cid, P.id from rhnPackage P
      where P.id in (%s) and
                P.id not in (select package_id from rhnChannelPackage where channel_id = :cid)
  </query>
</write-mode>

<write-mode name="add_org_channel_setting">
  <query params="org_id, cid, label">
INSERT
  INTO rhnOrgChannelSettings
       (org_id, channel_id, setting_id)
VALUES (:org_id, :cid, (SELECT id FROM rhnOrgChannelSettingsType WHERE label = :label))
  </query>
</write-mode>

<write-mode name="grant_channel_permission">
  <query params="user_id, cid, role_label">
INSERT INTO rhnChannelPermission (channel_id, user_id, role_id)
VALUES (:cid, :user_id, (SELECT id FROM rhnChannelPermissionRole WHERE label = :role_label))
  </query>
</write-mode>

<write-mode name="revoke_channel_permission">
  <query params="user_id, cid, role_label">
DELETE
  FROM rhnChannelPermission CP
 WHERE CP.user_id = :user_id
   AND CP.channel_id = :cid
   AND CP.role_id = (SELECT id FROM rhnChannelPermissionRole WHERE label = :role_label)
  </query>
</write-mode>


<write-mode name="remove_errata">
  <query params="cid">
DELETE
  FROM rhnChannelErrata CE
  where CE.channel_id = :cid
  and  CE.errata_id in (%s)
  </query>
</write-mode>


<write-mode name="remove_packages">
  <query params="cid">
DELETE
  FROM rhnChannelPackage CP
  where CP.channel_id = :cid
  and  CP.package_id in (%s)
  </query>
</write-mode>


<write-mode name="remove_errata_packages">
  <query params="cid">
DELETE
  FROM rhnChannelPackage CP
  where CP.channel_id = :cid
  and  CP.package_id in ( select EP.package_id from
                                                        rhnErrataPackage EP
                                                        where EP.errata_id in (%s))
  </query>
</write-mode>


<write-mode name="request_repo_regen">
  <query params="label, client, reason">
INSERT
  INTO rhnRepoRegenQueue
        (id, channel_label, client, reason, force, bypass_filters, next_action, created, modified)
VALUES (null,                   -- the id is set by trigger on rhnRepoRegenQueue
        :label, :client, :reason, 'N', 'N', current_timestamp, current_timestamp, current_timestamp)
  </query>
</write-mode>

<mode name="org_pkg_channels">
  <query params="org_id, pid">
SELECT C.label AS label,
       C.name AS name,
       NVL(C2.label, ' ') AS parent_label
  FROM rhnChannel C
       LEFT OUTER JOIN rhnChannel C2 ON C.parent_channel = C2.id,
       rhnAvailableChannels AC,
       rhnChannelPackage CP
 WHERE AC.org_id = :org_id
   AND CP.package_id = :pid
   AND AC.channel_id = CP.channel_id
   AND CP.channel_id = C.id
ORDER BY UPPER(C.name)
  </query>
</mode>

<mode name="channels_owned_by_org"
    class="com.redhat.rhn.frontend.dto.ChannelOverview">
    <query params="org_id">
  SELECT C.id, C.name, CC.original_id
    FROM rhnChannel C left join
    rhnChannelCloned CC on C.id = CC.id
   WHERE C.org_id = :org_id
ORDER BY C.org_id, C.name
    </query>
</mode>

<mode name="relevant_packages_for_channel_unpublished">
    <query params="eid, cid">
SELECT DISTINCT P1.name_id
  FROM rhnChannel C,
       rhnChannelPackage CP,
       rhnPackage P2,
       rhnPackage P1,
       rhnErrataPackageTmp EP
 WHERE EP.errata_id = :eid
   AND EP.package_id = P1.id
   AND P1.name_id = P2.name_id
   AND P1.package_arch_id = P2.package_arch_id
   AND CP.package_id = P2.id
   AND C.id = CP.channel_id
   AND C.id = :cid
    </query>
</mode>

<mode name="relevant_packages_for_channel_published">
    <query params="eid, cid">
SELECT DISTINCT P1.name_id
  FROM rhnChannel C,
       rhnChannelPackage CP,
       rhnPackage P2,
       rhnPackage P1,
       rhnErrataPackage EP
 WHERE EP.errata_id = :eid
   AND EP.package_id = P1.id
   AND P1.name_id = P2.name_id
   AND P1.package_arch_id = P2.package_arch_id
   AND CP.package_id = P2.id
   AND C.id = CP.channel_id
   AND C.id = :cid
    </query>
</mode>

<mode name="system_channels">
  <query params="sid">
SELECT C.id,
       C.label as label,
       C.name as name
  FROM rhnChannel C,
       rhnServerChannel SC
 WHERE SC.server_id = :sid
   AND SC.channel_id = C.id
ORDER BY C.parent_channel NULLS LAST, UPPER(C.name)
  </query>
</mode>

<mode name="user_subscribe_perms" class="com.redhat.rhn.frontend.dto.ChannelPerms">
  <query params="user_id, org_id">
SELECT AC.channel_id AS ID,
       AC.channel_name AS NAME,
       rhn_channel.user_role_check(AC.channel_id, :user_id, 'subscribe') AS HAS_PERM,
       CASE rhn_channel.org_channel_setting(AC.channel_id, :org_id,'not_globally_subscribable') WHEN 0 THEN 1 ELSE NULL END AS GLOBALLY_SUBSCRIBABLE
  FROM rhnAvailableChannels AC
 WHERE AC.org_id = :org_id
ORDER BY UPPER(AC.channel_name)
  </query>
</mode>

<mode name="user_manage_perms" class="com.redhat.rhn.frontend.dto.ChannelPerms">
  <query params="user_id, org_id">
SELECT C.id AS ID,
       C.name AS NAME,
       rhn_channel.user_role_check(C.id, :user_id, 'manage') AS HAS_PERM
  FROM rhnChannel C
 WHERE C.org_id = :org_id
ORDER BY UPPER(C.name)
  </query>
</mode>

<mode name="managers_for_channel_in_org">
  <query params="org_id, channel_id">
  SELECT u.id
  FROM web_contact u
  WHERE u.org_id = :org_id
    AND rhn_channel.user_role_check(:channel_id, u.id, 'manage') = 1
  </query>
</mode>

<mode name="subscribers_for_channel_in_org">
  <query params="org_id, channel_id">
  SELECT u.id
  FROM web_contact u
  WHERE u.org_id = :org_id
    AND rhn_channel.user_role_check(:channel_id, u.id, 'subscribe') = 1
  </query>
</mode>

<callable-mode name="verify_channel_role">
  <query params="result, cid, user_id, role">
      {:result = call rhn_channel.user_role_check_debug(:cid, :user_id, :role)}
  </query>
</callable-mode>

<mode name="all_channel_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
        <query params="user_id">
        select Distinct C.id,
                   C.name,
                   C.label as channel_label,
                   C.parent_channel as parent_id,
                        (SELECT COUNT(P.package_id)
                          FROM rhnChannelPackage P
                          WHERE P.channel_id = C.id
                                ) AS package_count,
         C.org_id,
         (select org.name
            from web_customer org
            where org.id = C.org_id) as org_name,
         CA.name as arch_name
        from rhnChannel C inner join
         rhnUserChannel UC on UC.channel_id = C.id
        inner join rhnChannelArch CA ON CA.ID  = C.channel_arch_id
         where UC.user_id = :user_id
    </query>
      <elaborator name="visible_server_count"/>
      <elaborator name="channel_errata_count"/>
</mode>

<mode name="shared_channel_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
   <query params="user_id">
   select Distinct C.id,
         C.name,
         C.parent_channel as parent_id,
         C.label as channel_label,
         (SELECT COUNT(P.package_id)
           FROM rhnChannelPackage P
           WHERE P.channel_id = C.id
                 ) AS package_count,
         C.org_id,
         (select org.name
            from web_customer org
            where org.id = C.org_id) as org_name,
         CA.name as arch_name
    from rhnSharedChannelView C inner join
    rhnUserChannel UC on UC.channel_id = C.id
    inner join rhnChannelArch CA ON CA.ID  = C.channel_arch_id
    inner join web_contact U ON U.id = :user_id AND C.org_id = U.org_id
    where UC.user_id = :user_id
    </query>
      <elaborator name="visible_server_count"/>
</mode>

<mode name="popular_channel_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
        <query params="user_id, server_count">
   select Distinct C.id,
         C.name,
         C.parent_channel as parent_id,
         C.label as channel_label,
         (SELECT COUNT(P.package_id)
           FROM rhnChannelPackage P
           WHERE P.channel_id = C.id
                 ) AS package_count,
         C.org_id,
         (select org.name
            from web_customer org
            where org.id = C.org_id) as org_name,
         CA.name as arch_name
         from rhnChannel C inner join
         rhnUserChannel UC on UC.channel_id = C.id
         inner join rhnChannelArch CA ON CA.ID  = C.channel_arch_id
         where UC.user_id = :user_id  AND
                   :server_count &lt;=
                   ( select count(SC.server_id)
                                from rhnServerChannel SC
                                where  SC.channel_id = C.id
                                AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = SC.server_id)
                        )
    </query>
      <elaborator name="visible_server_count"/>
</mode>

<mode name="retired_channel_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
        <query params="user_id">
   select Distinct C.id,
         C.name,
         C.parent_channel as parent_id,
         C.label as channel_label,
         (SELECT COUNT(P.package_id)
           FROM rhnChannelPackage P
           WHERE P.channel_id = C.id
                 ) AS package_count,
         C.org_id,
         (select org.name
            from web_customer org
            where org.id = C.org_id) as org_name,
         CA.name as arch_name
        from rhnChannel C inner join
         rhnUserChannel UC on UC.channel_id = C.id
        inner join rhnChannelArch CA ON CA.ID  = C.channel_arch_id
         where UC.user_id = :user_id  and
         C.end_of_life &lt; current_timestamp
    </query>
      <elaborator name="visible_server_count"/>
</mode>



<mode name="vendor_channel_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
        <query params="user_id">
        select Distinct C.id,
                   C.name,
                   C.parent_channel as parent_id,
                   C.label as channel_label,
                        (SELECT COUNT(P.package_id)
                          FROM rhnChannelPackage P
                          WHERE P.channel_id = C.id
                                ) AS package_count,
                   CA.name as arch_name
        from rhnChannel C inner join
         rhnUserChannel UC ON UC.channel_id = C.id
                          AND UC.user_id = :user_id inner join
         rhnChannelArch CA ON CA.ID  = C.channel_arch_id
        where C.org_id is null
    </query>
      <elaborator name="visible_server_count"/>
</mode>

<mode name="my_channel_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
        <query params="user_id, org_id">
        select Distinct C.id,
                   C.name,
                   C.org_id,
                  WC.name as org_name,
                   C.parent_channel as parent_id,
                   C.label as channel_label,
                        (SELECT COUNT(P.package_id)
                          FROM rhnChannelPackage P
                          WHERE P.channel_id = C.id
                                ) AS package_count,
                   CA.name as arch_name
        from rhnChannel C inner join
         rhnUserChannel UC ON UC.channel_id = C.id
                          AND UC.user_id = :user_id
                          AND C.org_id = :org_id inner join
         rhnChannelArch CA ON CA.ID  = C.channel_arch_id inner join
         web_customer WC ON WC.id = C.org_id
    </query>
      <elaborator name="visible_server_count"/>
</mode>

<mode name="trust_channel_consume" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
        <query params="org_id, org_id2, user_id">
        SELECT DISTINCT V.id,
               V.name,
                0 as accessible,
               V.parent_channel as parent_id,
               (SELECT COUNT(P.package_id)
                FROM rhnChannelPackage P
                WHERE P.channel_id = V.id
               ) AS package_count
        FROM   rhnSharedChannelView V inner join
         rhnUserChannel UC on UC.channel_id = V.id
        where 1=1
        and v.org_trust_id = :org_id
        AND v.org_id = :org_id2
        AND UC.user_id = :user_id
    </query>
      <elaborator name="visible_server_count"/>
</mode>

<mode name="protected_trust_channel" class="com.redhat.rhn.frontend.dto.OrgChannelDto">
     <query params="org_id, cid">
SELECT wc.id, wc.name,
       COALESCE((SELECT 1
        FROM rhnchanneltrust rct
        WHERE 1=1
        AND wc.id = rct.org_trust_id
        AND rct.channel_id = :cid),0) AS selected,
       (SELECT count(SC.server_id)
        FROM rhnServerChannel SC, rhnServer S
        WHERE 1=1
        AND S.org_id = wc.id
        AND S.id = SC.server_id
        AND SC.channel_id = :cid) AS systems
FROM   web_customer wc, rhntrustedorgs rto
WHERE  1=1
AND    rto.org_id = :org_id
AND    wc.id  = rto.org_trust_id
     </query>
</mode>

<mode name="channel_family_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
  <query params="user_id, family_id">
SELECT DISTINCT C.name AS NAME,
       C.id AS ID,
       C.parent_channel as parent_id,
       (
         SELECT COUNT(P.package_id)
           FROM rhnChannelPackage P
           WHERE P.channel_id = C.id
       ) AS PACKAGE_COUNT,
       CFM2.CHANNEL_FAMILY_ID,
       :family_id AS CHANNEL_FAMILY_SEARCHED_FOR
  FROM rhnUserChannel UC,
       rhnChannelFamilyMembers CFM,
       rhnChannel C left join
       rhnChannel C2 on C.id = C2.parent_channel inner join
       rhnChannelFamilyMembers CFM2 on  C.id = CFM2.channel_id
 WHERE UC.user_id = :user_id
   AND ( CFM.channel_family_id = :family_id )
   AND (
           (C.id = CFM.channel_id  AND  C.id = UC.channel_id)
        OR (C.parent_channel = CFM.channel_id AND C.id = UC.channel_id  )
        OR (C.id = UC.channel_id  AND C2.id = CFM.channel_id)
        )
  </query>
  <elaborator name="visible_server_count"/>
</mode>

<mode name="channel_tree_ssm_install" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
  <query params="org_id, user_id, set_label">
SELECT  ACh.channel_name AS NAME, ACh.channel_id ID, ACh.channel_arch_id, (SELECT COUNT(DISTINCT CPN.name_id) FROM rhnChannelNewestPackage CPN WHERE CPN.channel_id = ACh.channel_id) AS PACKAGE_COUNT, ACh.channel_label,
        CASE WHEN NOT ACh.parent_or_self_id = ACh.channel_id THEN ACh.parent_or_self_id END AS parent_id
  FROM  rhnAvailableChannels ACh
 WHERE  ACh.org_id = :org_id
   AND  (    ACh.channel_arch_id = lookup_channel_arch('channel-ia32')
          OR  EXISTS (SELECT 1
                 FROM rhnServerChannelArchCompat SCAC, rhnServer S
                WHERE S.org_id = :org_id
                  AND S.server_arch_id = SCAC.server_arch_id
                  AND SCAC.channel_arch_id = ACh.channel_arch_id))
   AND  EXISTS (
SELECT SC.channel_id
  FROM rhnServerChannel SC, rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.element = SC.server_id
   AND ST.label = :set_label
   AND SC.channel_id = ACh.channel_id
)
ORDER BY  rhn_channel.channel_priority(ACh.parent_or_self_id), ACh.parent_or_self_id, ACh.channel_depth, UPPER(ACh.channel_name)
  </query>
  <elaborator name="visible_server_count"/>
</mode>

<mode name="all_channels_tree">
  <query params="user_id">
SELECT  distinct C.name,
        UPPER(C.name),
        UC.channel_id ID,
        PC.label PARENT_CHANNEL,
        C.label,
        TO_CHAR(C.end_of_life, 'YYYY-MM-DD HH24:MI:SS') END_OF_LIFE,
        CA.name CHANNEL_ARCH
  FROM rhnUserChannel UC
    JOIN rhnChannel C ON UC.channel_id = C.id
    JOIN rhnChannelArch CA ON C.channel_arch_id = CA.id
    LEFT JOIN rhnChannel PC ON PC.id = C.parent_channel
 WHERE  UC.user_id = :user_id
ORDER BY UPPER(C.name)
  </query>
  <elaborator name="visible_server_count"/>
</mode>

<mode name="owned_channels_tree" class="com.redhat.rhn.frontend.dto.ChannelTreeNode">
  <query params="user_id">
SELECT CTV.name, CTV.id, CTV.channel_arch_id, C.org_id,
       CASE WHEN NOT CTV.parent_or_self_id = CTV.id THEN CTV.parent_or_self_id END AS parent_id,
       (SELECT COUNT (cp.package_id)
          FROM rhnchannelpackage cp
         WHERE cp.channel_id = CTV.id) AS package_count,
       CTV.label AS channel_label
  FROM rhnchannel C, rhnChannelTreeView CTV, rhnChannel C2
 WHERE CTV.id = C.ID
   AND  CTV.parent_or_self_id = C2.id
   AND (rhn_channel.user_role_check(C.id, :user_id, 'manage') = 1
        OR EXISTS (
              SELECT 1
                FROM rhnChannel C2
               WHERE C2.parent_channel = C.ID
                 AND rhn_channel.user_role_check(C2.id, :user_id, 'manage') = 1))
ORDER BY UPPER(C2.name), depth, UPPER(C.name)
  </query>
</mode>


<query name="visible_server_count" params="user_id, org_id">
  SELECT SC.channel_id AS ID, count(SC.server_id) as system_count
    FROM rhnServerChannel SC,
         rhnServer S
   WHERE S.org_id = :org_id
     AND S.id = SC.server_id
     AND SC.channel_id IN (%s)
     AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
GROUP BY SC.channel_id
</query>

<query name="channel_errata_count">
  SELECT CE.channel_id AS id,
         COUNT(*) AS errata_count
    FROM rhnErrata E,
         rhnChannelErrata CE
   WHERE CE.channel_id IN (%s)
     AND CE.errata_id = E.id
GROUP BY CE.channel_id
</query>

<mode name="custom_base_channels_for_server"
     class="com.redhat.rhn.frontend.dto.EssentialChannelDto">
  <query params="org_id, server_arch_id">
SELECT C.id, C.name, C.label, 1 AS IS_CUSTOM
  FROM rhnChannel C
  JOIN rhnServerChannelArchCompat scac ON scac.channel_arch_id = c.channel_arch_id
 WHERE scac.server_arch_id = :server_arch_id
   AND C.parent_channel IS NULL
   AND (C.org_id = :org_id OR
       (C.id, C.org_id)
        IN
        (SELECT scv.id, scv.org_id
            FROM rhnSharedChannelView scv
          WHERE scv.org_trust_id = :org_id
            AND scv.parent_channel IS NULL))
 ORDER BY UPPER(C.name)
  </query>
</mode>

<mode name="base_eus_channels_by_version_release_server_arch"
     class="com.redhat.rhn.frontend.dto.EssentialChannelDto">
  <query params="product_name_label, version, server_arch, user_id, org_id">
        select distinct c.id,
               c.label,
               c.name,
               rcm.release,
               0 AS IS_CUSTOM
        from
            rhnChannelPermissions cp,
            rhnChannel c,
            rhnServerArch sa,
            rhnServerChannelArchCompat scac,
            rhnReleaseChannelMap rcm,
            rhnProductName pn
        where
            rcm.version = :version
            and scac.server_arch_id = sa.id
            and sa.label = :server_arch
            and scac.channel_arch_id = rcm.channel_arch_id
            and rcm.channel_id = c.id
            and cp.channel_id = c.id
            and cp.org_id = :org_id
            and pn.id = c.product_name_id
            and pn.label = :product_name_label
            and rhn_channel.loose_user_role_check(c.id, :user_id,
                                                     'subscribe') = 1
        order by c.name
  </query>
</mode>

<mode name="base_eus_channels_by_version_channel_arch"
     class="com.redhat.rhn.frontend.dto.EssentialChannelDto">
  <query params="product_name_label, version, channel_arch_id, user_id, org_id">
        select distinct c.id,
               c.label,
               c.name,
               rcm.release,
               0 AS IS_CUSTOM
        from
            rhnChannelPermissions cp,
            rhnChannel c,
            rhnReleaseChannelMap rcm,
            rhnProductName pn
        where
            rcm.version = :version
            and rcm.channel_arch_id = :channel_arch_id
            and rcm.channel_id = c.id
            and cp.channel_id = c.id
            and cp.org_id = :org_id
            and pn.id = c.product_name_id
            and pn.label = :product_name_label
            and rhn_channel.loose_user_role_check(c.id, :user_id,
                                                     'subscribe') = 1
  </query>
</mode>

<mode name="subscribable_channels">
  <query params="server_id, user_id, base_channel_id">
SELECT  DISTINCT C.id,
                 C.label,
                 C.name,
                 C.summary,
                 C.gpg_key_url
  FROM  rhnChannelFamilyMembers CFM,
        rhnChannel C,
  rhnUserChannel UC
 WHERE  UC.user_id = :user_id
   AND  UC.role = 'subscribe'
   AND  UC.channel_id = C.id
   AND  C.parent_channel = :base_channel_id
   AND  C.id = CFM.channel_id
   AND  C.parent_channel IS NOT NULL
   AND  NOT EXISTS (SELECT 1 FROM rhnServerChannel WHERE server_id = :server_id AND channel_id = C.id)
  </query>
</mode>

<mode name="affected_by_errata" class="com.redhat.rhn.domain.channel.Channel">
  <query params="eid, org_id">
select * from (
SELECT  DISTINCT C.id, C.name
  FROM  rhnAvailableChannels AC, rhnChannel C, rhnChannelErrata CE
 WHERE  CE.errata_id = :eid
   AND  CE.channel_id = C.id
   AND  AC.org_id = :org_id
   AND  C.id = AC.channel_id
) X
 ORDER  BY UPPER(X.name)
  </query>
</mode>

<mode name="child_channel_candidate">
  <query params="label, sid">
SELECT  1
  FROM  rhnChannel C, rhnChannelFamilyMembers CFM, rhnChannelFamily CF
 WHERE  CF.label = :label
   AND  CF.id = CFM.channel_family_id
   AND  CFM.channel_id = C.id
   AND  C.parent_channel = (SELECT  C.id
                              FROM  rhnChannel C, rhnServerChannel SC
                             WHERE  SC.server_id = :sid
                               AND  SC.channel_id = C.id
                               AND  C.parent_channel IS NULL)
  </query>
</mode>

<mode name="org_errata_channels">
  <query params="org_id, eid">
SELECT C.id as channel_id,
       C.id as id,
       C.label as label,
       C.name as name,
       NVL(C2.label, ' ') as parent_channel_label
  FROM rhnChannel C
       LEFT OUTER JOIN rhnChannel C2 ON C.parent_channel = C2.id,
       rhnAvailableChannels AC,
       rhnChannelErrata EC
 WHERE EC.errata_id = :eid
   AND AC.org_id = :org_id
   AND AC.channel_id = EC.channel_id
   AND EC.channel_id = C.id
ORDER BY UPPER(C.name)
  </query>
</mode>

<callable-mode name="subscribe_server_to_channel">
  <query params="server_id, channel_id, user_id">
      {call rhn_channel.subscribe_server(:server_id, :channel_id, 0, :user_id)}
  </query>
</callable-mode>

<callable-mode name="unsubscribe_server_from_channel">
  <query params="server_id, channel_id">
      {call rhn_channel.unsubscribe_server(:server_id, :channel_id)}
  </query>
</callable-mode>

<callable-mode name="delete_channel">
  <query params="cid">
      {call delete_channel(:cid)}
  </query>
</callable-mode>

<mode name="is_package_in_channel" class="com.redhat.rhn.frontend.dto.BooleanWrapper">
    <query params="cid, evr_id, name_id">
SELECT 1 as bool
  FROM rhnChannelPackage CP, rhnPackage P
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.evr_id = :evr_id
   AND P.name_id = :name_id
    </query>
</mode>

<mode name="families_for_org_without_permissions" class="com.redhat.rhn.frontend.dto.ChannelOverview">
  <query params="org_id">
  SELECT  CF.id
    FROM  rhnChannelFamily CF
   WHERE  CF.org_id = :org_id
 AND NOT  EXISTS (
           SELECT  1
             FROM  rhnChannelFamilyPermissions CFP
            WHERE  CFP.org_id = CF.org_id
              AND  CFP.channel_family_id = CF.id)
ORDER BY  CF.id
  </query>
</mode>

<write-mode name="insert_family_perms">
  <query params="org_id, id">
INSERT INTO  rhnPrivateChannelFamily
             (channel_family_id, org_id)
     VALUES  (:id, :org_id)
  </query>
</write-mode>

<write-mode name="clone_newest_package">
  <query params="from_cid, to_cid">
  INSERT INTO rhnChannelNewestPackage
    ( channel_id, name_id, evr_id, package_id, package_arch_id )
    ( SELECT :to_cid, name_id, evr_id, package_id, package_arch_id
        FROM rhnChannelNewestPackage
        WHERE channel_id = :from_cid
    )
  </query>
</write-mode>


<!-- really should probably be mapped -->
<!-- And negative logic SUCKS! -->
<mode name="is_not_globally_subscribable">
    <query params="org_id, cid, label">
        SELECT 1 as setting
  FROM rhnOrgChannelSettings OCS, rhnOrgChannelSettingsType OCST
 WHERE OCS.org_id = :org_id
   AND OCS.channel_id = :cid
   AND OCST.label = :label
   AND OCST.id = OCS.setting_id
    </query>
</mode>

<callable-mode name="refresh_newest_package">
  <query params="cid, label">
      {call rhn_channel.refresh_newest_package(:cid, :label)}
  </query>
</callable-mode>

<mode name="latest_package_equal">
    <query params="cid, name">
SELECT CP.package_id, CP.name_id, CP.evr_id, CP.package_arch_id
  FROM rhnPackageName PN, rhnChannelNewestPackage CP
 WHERE CP.channel_id = :cid
   AND CP.name_id = PN.id
   AND PN.name = :name
    </query>
</mode>

<mode name="contentsrc_for_org" class="com.redhat.rhn.frontend.dto.ContentSourceDto">
  <query params="org_id">
    SELECT CS.id, CS.label,
           (SELECT count(ccs.channel_id)
            FROM rhnChannelContentSource ccs
            WHERE ccs.source_id = CS.id) as channels
    FROM rhnContentSource CS
    WHERE CS.org_id = :org_id
  </query>
</mode>

<mode name="latest_package_equal_in_tree">
    <query params="cid, name">
SELECT CP.package_id, CP.evr_id, PA.label as arch_label
  FROM rhnPackageName PN inner join
               rhnChannelNewestPackage CP on CP.name_id = PN.id inner join
               rhnChannel C on C.id = Cp.channel_id  inner join
               rhnPackage P on P.id = CP.package_id inner join
               rhnPackageEvr EVR on P.evr_id = EVR.id inner join
               rhnPackageArch PA on PA.id = CP.package_arch_id
 WHERE ( C.id = :cid or C.parent_channel = :cid)
   AND PN.name = :name
   AND C.label not like '%beta%'
   order by EVR.evr DESC
    </query>
</mode>

<mode name="latest_package_like">
    <query params="cid, name">
SELECT CP.package_id, CP.name_id, CP.evr_id
  FROM rhnPackageName PN, rhnChannelNewestPackage CP
 WHERE CP.channel_id = :cid
   AND CP.name_id = PN.id
   AND PN.name like :name
    </query>
</mode>

<mode name="channel_with_package">
    <query params="parent, package, org_id">
SELECT  DISTINCT C.id
 FROM  rhnChannel C, rhnChannelPackage CP, rhnPackage P, rhnPackageName PN
 WHERE  C.parent_channel = :parent
   AND  C.id = CP.channel_id
   AND  CP.package_id = P.id
   AND  P.name_id = PN.id
   AND  PN.name = :package
   AND  EXISTS (
        SELECT 1 FROM rhnAvailableChannels AC
        WHERE AC.channel_id = C.id AND AC.org_id = :org_id)
    </query>
</mode>

<mode name="child_channels_with_package">
    <query params="package, org_id">
SELECT  DISTINCT CP.channel_id as id
  FROM  rhnChannelPackage CP
  inner join  rhnPackage P on CP.package_id = P.id
  inner join  rhnPackageName PN on P.name_id = PN.id
  inner join  rhnChannel C on C.id = CP.channel_id
  inner join rhnAvailableChannels AC on AC.channel_id = C.id
 WHERE
  PN.name = :package and
  C.parent_channel is not null and
  AC.org_id = :org_id

    </query>
</mode>

<callable-mode name="guess_server_base">
  <query params="server_id">
      {:result = call rhn_channel.guess_server_base(:server_id)}
  </query>
</callable-mode>

<mode name="children_in_set" class="com.redhat.rhn.frontend.dto.ChildChannelDto">
  <query params="user_id">
select distinct id, name, label, 1 subscribed, parent_id  from (
select  c.id,
                c.name,
                c.label,
                c.parent_channel AS parent_id
from
                rhnChannelFamilyMembers cfm,
                rhnChannelFamily cf,
                rhnServerChannelArchCompat scac,
                rhnServer s,
                rhnChannel c,
                rhnServerChannel sc,
                rhnUserServerPerms usp,
                rhnSet st
where   1=1
        and st.user_id = :user_id
        and st.label = 'system_list'
        and st.element = s.id
        and usp.user_id = :user_id
        and st.element = usp.server_id
        and st.element = sc.server_id
        and sc.channel_id = c.parent_channel
        and s.server_arch_id = scac.server_arch_id
        and scac.channel_arch_id = c.channel_arch_id
        and c.id = cfm.channel_id
        and cfm.channel_family_id = cf.id
        and cf.label not in ('rhn-satellite','rhn-proxy')
        and rhn_channel.user_role_check(c.id, :user_id, 'subscribe')=1
union all
select  c.id,
                c.name,
                c.label,
                c.parent_channel AS parent_id
from
                rhnUserServerPerms usp,
                rhnChannelFamily cf,
                rhnChannelFamilyMembers cfm,
                rhnChannel c,
                rhnServerChannel sc,
                rhnSet st
where   st.user_id = :user_id
        and st.label = 'system_list'
        and st.element = sc.server_id
        and sc.channel_id = c.id
        and c.parent_channel is not null
        and c.id = cfm.channel_id
        and cfm.channel_family_id = cf.id
        and cf.label not in ('rhn-satellite','rhn-proxy')
        and rhn_channel.user_role_check(cfm.channel_id,:user_id,'subscribe')=1
        and usp.user_id = :user_id
        and st.element = usp.server_id
) U
  </query>
</mode>

<mode name="base_channels_in_set" class="com.redhat.rhn.frontend.dto.SystemsPerChannelDto">
  <query params="user_id">
  SELECT  C.id, C.name, COUNT(C.id) system_count
  FROM  rhnChannel C,
        rhnServerChannel SC,
        rhnSet ST
 WHERE  ST.user_id = :user_id
   AND  ST.label = 'system_list'
   AND  ST.element = SC.server_id
   AND  SC.channel_id = C.id
   AND  C.parent_channel IS NULL
GROUP BY C.id, C.name
  </query>
</mode>

<mode name="channel_errata_packages" class="com.redhat.rhn.frontend.dto.PackageDto">
  <query params="eid, cid">
  SELECT  P.id, CS.checksum, CS.checksum_type as checksum_type,
           PN.name || '-' || PE.version
               || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)
               || '-' || PA.label as name
        from  rhnPackage P inner join
                  rhnChannelPackage CP on P.id = CP.package_id  inner join
                  rhnErrataPackage EP on EP.package_id = CP.package_id inner join
                  rhnPackageName PN on P.name_id = PN.id inner join
                  rhnPackageEvr PE on  P.evr_id = PE.id inner join
                  rhnPackageArch PA on P.package_arch_id = PA.id inner join
      rhnChecksumView CS on P.checksum_id = CS.id
        where CP.channel_id = :cid
          and EP.errata_id = :eid
        ORDER by name
  </query>
</mode>


<mode name="ssm_systems_for_child_subscription">
  <query params="set_label, uid">
        select  S.id, C.id as channel_id, S.name, C.name as channel_name
           from rhnServer S inner join
                rhnServerChannel SC on SC.server_id = S.id,
               rhnChannel C,
               rhnServerChannelArchCompat SCAC,
               RhnSet rset
           where
                rset.label = :set_label and
                rset.user_id = :uid and
                rset.element = S.id and
                C.parent_channel = SC.channel_id and
                SCAC.server_arch_id = S.server_arch_id and
                SCAC.channel_arch_id = C.channel_arch_id and
                C.id in (%s) and
                S.id not in (select SC2.server_id
                                from rhnServerChannel SC2
                                where SC2.channel_id = C.id)
  </query>
</mode>

<mode name="ssm_systems_for_child_unsubscription">
  <query params="set_label, uid">
        select  S.id, C.id as channel_id, S.name, C.name as channel_name
           from rhnServer S inner join
               rhnServerChannel SC on SC.server_id = S.id  inner join
               rhnChannel C on C.id = SC.channel_id inner join
               rhnSet rset on rset.element = S.id
           where SC.channel_id in (%s)
               and  rset.user_id = :uid
               and  rset.label = :set_label
  </query>
</mode>


<mode name="cloned_original_id">
    <query params="cid">
    SELECT original_id AS id
    FROM rhnChannelCloned
    WHERE id = :cid
    </query>
</mode>

<mode name="activation_key_child_channels">
  <query params="token_id, user_id">
    SELECT DISTINCT c1.id as id,
       (select name from rhnChannel C2 where c1.parent_channel = c2.id) parent,
       c1.name as name,
       CASE WHEN (SELECT 1 FROM rhnRegTokenChannels WHERE token_id = :token_id AND channel_id = c1.id)
       IS NOT NULL THEN 'selected' ELSE '' END s
    FROM rhnChannel c1 inner join rhnUserChannel UC on UC.channel_id = C1.id
    AND c1.parent_channel IS NOT NULL
    AND UC.user_id = :user_id
    JOIN rhnChannelFamilyMembers cfm ON cfm.channel_id = c1.id JOIN rhnChannelFamily cf ON cf.id = cfm.channel_family_id
    WHERE cf.label != 'rhn-proxy' AND cf.label != 'rhn-satellite'
    ORDER BY parent, name
  </query>
</mode>

<mode name="dist_channel_map_for_org" class="com.redhat.rhn.domain.channel.DistChannelMap">
  <query params="org_id">
  SELECT * FROM rhnOrgDistChannelMap WHERE org_id = :org_id
  </query>
</mode>

<mode name="snapshot_channel_diff">
  <query params="ss_id, sid">
select server_channel.id as current_channel_id,
       server_channel.label as current_channel_label,
       snapshot_channel.id as snapshot_channel_id,
       snapshot_channel.label as snapshot_channel_label
  from (
        select sc.channel_id as id,
               c.label as label
          from rhnServerChannel SC
          join rhnChannel c
            on c.id = sc.channel_id
         where sc.server_id = :sid
       ) server_channel
  full outer join (
        select snc.channel_id as id,
               c.label as label
          from rhnSnapshotChannel snc
          join rhnSnapshot sn
            on sn.id = snc.snapshot_id
          join rhnChannel c
            on snc.channel_id = c.id
         where sn.id = :ss_id
           and sn.server_id = :sid
       ) snapshot_channel
    on server_channel.id = snapshot_channel.id
 where server_channel.id is null
    or snapshot_channel.id is null
  </query>
</mode>

<mode name="system_snapshot_channel_list">
  <query params="sid, ss_id">
select c.id,
       c.label,
       c.name,
       c.parent_channel
  from rhnChannel c,
       rhnSnapshotChannel snc,
       rhnSnapshot sn
 where sn.id = :ss_id
   and sn.server_id = :sid
   and sn.id = snc.snapshot_id
   and snc.channel_id = c.id
 order by c.parent_channel nulls first, upper(c.name)
  </query>
</mode>

<mode name="channels_for_content_source">
  <query params="csid">
select c.id,
       c.name
  from rhnChannel c
  join rhnChannelContentSource cs
    on c.id = cs.channel_id
   and cs.source_id = :csid
  </query>
</mode>

<mode name="compatible_child_channel_arches">
  <query params="pa_label">
select ca2.name, ca2.label
  from rhnChannelArch ca1,
       rhnChildChannelArchCompat ccac,
       rhnChannelArch ca2
 where ca1.id = ccac.parent_arch_id
   and ca2.id = ccac.child_arch_id
   and ca1.label = :pa_label
  </query>
</mode>

<write-mode name="clone_original_channel_packages">
  <query params="from, to">
INSERT INTO rhnChannelPackage
(package_id, channel_id)
(SELECT DISTINCT cp.package_id, CAST(:to as INT)
            FROM rhnChannelPackage cp
            LEFT OUTER JOIN (
                    SELECT ep.package_id, ep.errata_id
                    FROM rhnChannelErrata ce
                    JOIN rhnErrataPackage ep ON ep.errata_id = ce.errata_id
                    WHERE ce.channel_id = :from) e ON cp.package_id = e.package_id
            WHERE cp.channel_id = :from
            AND e.errata_id IS NULL)
  </query>
</write-mode>

<write-mode name="clone_channel_packages">
  <query params="from, to">
INSERT INTO rhnChannelPackage
(channel_id, package_id)
(SELECT :to, CP.package_id
   FROM rhnChannelPackage CP,
        rhnPackage P,
        rhnChannelPackageArchCompat CPAC,
        rhnChannel C
  WHERE CP.channel_id = :from
    AND C.id = :to
    AND P.id = CP.package_id
    AND CPAC.channel_arch_id = C.channel_arch_id
    AND CPAC.package_arch_id = P.package_arch_id)
  </query>
</write-mode>

<write-mode name="add_cloned_erratum_to_channel">
  <query params="eid, cid">
INSERT INTO rhnChannelErrata
       (errata_id, channel_id)
VALUES (:eid, :cid)
  </query>
</write-mode>

<mode name="likely_parent">
  <query params="org_id, cid">
  SELECT CC.id
    FROM rhnChannelCloned CC, rhnChannel C
   WHERE CC.original_id = C.parent_channel
     AND C.id = :cid
     AND EXISTS (SELECT 1 FROM rhnChannelPermissions CP WHERE CP.channel_id = CC.id AND CP.org_id = :org_id)
ORDER BY CC.modified DESC
  </query>
</mode>

</datasource_modes>

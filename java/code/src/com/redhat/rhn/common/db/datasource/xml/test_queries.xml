<datasource_modes>
<mode name="user_tables_for_user_or">
  <query params="username">
      SELECT u.username as USERNAME, u.user_id as USER_ID, u.created as CREATED
        FROM all_users u
       WHERE LOWER(u.username) = :username
  </query>
  <elaborator name="table_elaborator_or" column="username" params="user_name">
      SELECT c.owner as USERNAME, COUNT(c.table_name) as TABLE_COUNT
        FROM all_catalog c
       WHERE owner=:user_name
         AND table_type='TABLE'
       GROUP BY owner
  </elaborator>
</mode>

<mode name="user_tables_for_user_pg">
  <query params="username">
      SELECT u.usename as USERNAME, u.usesysid as USER_ID
        FROM pg_user u
       WHERE u.usename=:username
  </query>
  <elaborator name="table_elaborator_pg" column="username" params="user_name">
      SELECT c.tableowner as USERNAME, COUNT(c.tablename) as TABLE_COUNT
        FROM pg_tables c
       WHERE tableowner=:user_name
       GROUP BY tableowner
  </elaborator>
</mode>

<mode name="user_tables_or">
  <query params="">
      SELECT u.username as USERNAME, u.user_id as USER_ID, u.created as CREATED
        FROM all_users u
  </query>
  <elaborator name="table_elaborator_or" column="username" params="user_name">
      SELECT c.owner as USERNAME, COUNT(c.table_name) as TABLE_COUNT
        FROM all_catalog c
       WHERE LOWER(owner) = :user_name
         AND owner IN (%s)
         AND table_type='TABLE'
       GROUP BY owner
  </elaborator>
</mode>

<mode name="user_tables_pg">
  <query params="">
      SELECT u.usename as USERNAME, u.usesysid as USER_ID
        FROM pg_user u
  </query>
  <elaborator name="table_elaborator_pg" column="username" params="user_name">
      SELECT c.tableowner as USERNAME, COUNT(c.tablename) as TABLE_COUNT
        FROM pg_tables c
       WHERE tableowner=:user_name
         AND tableowner IN (%s)
       GROUP BY tableowner
  </elaborator>
</mode>

<mode name="all_tables_or">
  <query params="">
      SELECT t.table_name
        FROM all_tables t
       WHERE t.table_name LIKE 'RHN%'
       ORDER BY table_name
  </query>
  <elaborator params="" column="table_name" multiple="t">
      SELECT table_name, column_name, column_id
        FROM all_tab_cols
       WHERE table_name in (%s)
  </elaborator>
</mode>

<mode name="all_tables_pg">
  <query params="">
      SELECT t.tablename as table_name
        FROM pg_tables t
       WHERE t.tablename LIKE 'rhn%'
       ORDER BY t.tablename
  </query>
  <elaborator params="" column="table_name" multiple="t">
      SELECT c.relname as TABLE_NAME, a.attname as COLUMN_NAME, a.atttypid as COLUMN_ID
        FROM pg_attribute a, pg_class c
       WHERE c.relname in (%s)
         AND c.oid = a.attrelid
  </elaborator>
</mode>

<!-- This query is broken, because the ID column doesn't exist in the
     driving query, but that is what should be used to map the two results -->
<mode name="broken_driving_or">
  <query params="">
      SELECT t.table_name
        FROM all_tables t
       WHERE t.table_name LIKE 'RHN%'
       ORDER BY table_name
  </query>
  <elaborator params="" multiple="t">
      SELECT table_name, table_name ID, column_name, column_id
        FROM all_tab_cols
       WHERE table_name in (%s)
  </elaborator>
</mode>

<mode name="broken_driving_pg">
  <query params="">
      SELECT t.tablename
        FROM pg_tables t
       WHERE t.tablename LIKE 'rhn%'
       ORDER BY tablename
  </query>
  <elaborator params="" multiple="t">
      SELECT attrelid, attrelid ID, attname, atttypid
        FROM pg_attribute
       WHERE attname in (%s)
  </elaborator>
</mode>

<!-- This query is broken, because the ID column doesn't exist in the
     elaborator, but that is what should be used to map the two results -->
<mode name="broken_elaborator_or">
  <query params="">
      SELECT t.table_name, t.table_name ID
        FROM all_tables t
       WHERE t.table_name LIKE 'RHN%'
       ORDER BY table_name
  </query>
  <elaborator params="" multiple="t">
      SELECT table_name, column_name, column_id
        FROM all_tab_cols
       WHERE table_name in (%s)
  </elaborator>
</mode>

<mode name="broken_elaborator_pg">
  <query params="">
      SELECT t.tablename, t.tablename ID
        FROM pg_tables t
       WHERE t.tablename LIKE 'rhn%'
       ORDER BY tablename
  </query>
  <elaborator params="" multiple="t">
      SELECT attrelid, attname, atttypid
        FROM pg_attribute
       WHERE attname in (%s)
  </elaborator>
</mode>


<!-- Keep the columns named ID here, because it provides an easy way to test
     that the default column of ID still works.  -->
<mode name="all_tables_with_alias_or">
  <query params="">
      SELECT t.table_name, t.table_name ID
        FROM all_tables t
       WHERE t.table_name LIKE 'RHN%'
       ORDER BY table_name
  </query>
  <elaborator params="" multiple="t" alias="details_or">
      SELECT table_name, table_name ID, column_name, column_id
        FROM all_tab_cols
       WHERE table_name in (%s)
  </elaborator>
</mode>

<mode name="all_tables_with_alias_pg">
  <query params="">
      SELECT t.tablename as table_name, t.tablename ID
        FROM pg_tables t
       WHERE t.tablename LIKE 'rhn%'
       ORDER BY t.tablename
  </query>
  <elaborator params="" multiple="t" alias="details_pg">
      SELECT c.relname as TABLE_NAME, c.relname ID, a.attname as COLUMN_NAME, a.atttypid as COLUMN_ID
        FROM pg_attribute a, pg_class c
       WHERE c.relname in (%s)
         AND c.oid = a.attrelid
  </elaborator>
</mode>


<write-mode name="update_group_type">
    <query params="type_id, sgid">
update rhnServerGroup set group_type = :type_id where id = :sgid
    </query>
</write-mode>


<write-mode name="delete_from_table">
  <query params="foobar">
    DELETE FROM adv_datasource
     WHERE foobar = :foobar
  </query>
</write-mode>


<mode name="find_all_in_table"
 class="com.redhat.rhn.common.db.datasource.test.AdvDataSourceDto">
  <query params="">
    SELECT foobar, id
      FROM adv_datasource
  </query>
  <elaborator name="adv_elab" />
</mode>


<mode name="find_in_table"
                class="com.redhat.rhn.common.db.datasource.test.AdvDataSourceDto">
  <query params="foobar">
    SELECT foobar, id
      FROM adv_datasource
     WHERE foobar = :foobar
  </query>
  <elaborator name="adv_elab" />
</mode>

<query name="adv_elab" params="">
        select id,foobar, test_column, pin
                from adv_datasource
                        where id in (%s)
</query>

<write-mode name="insert_into_table">
  <query params="foobar, id, test_column, pin">
    INSERT INTO adv_datasource (foobar, id, test_column, pin)
    VALUES (:foobar, :id, :test_column, :pin)
  </query>
</write-mode>

<write-mode name="update_in_table">
  <query params="foobar, id">
    UPDATE adv_datasource
       SET foobar = :foobar
     WHERE id = :id
  </query>
</write-mode>

<callable-mode name="stored_procedure_jdbc_format">
  <query params="label, arch">
      { :arch = call lookup_package_arch( :label ) }
  </query>
</callable-mode>

<callable-mode name="stored_procedure_oracle_format">
  <query params="label, arch">
      { :arch = call lookup_package_arch( :label ) }
  </query>
</callable-mode>

<mode name="date_dto_test" class="com.redhat.rhn.common.db.datasource.test.TestDateDto">
  <query>
SELECT u.created as CREATED
  FROM all_users u
 WHERE u.username='SYS'
  </query>
</mode>


<!-- Test to benchmark datasource vs hibernate -->
<mode name="withClass_or" class="com.redhat.rhn.common.db.datasource.test.TableData">
  <query params="">
      SELECT t.table_name
        FROM all_tables t
       WHERE t.table_name LIKE 'RHN%'
       ORDER BY table_name
  </query>
  <elaborator params="" column="table_name" multiple="t">
      SELECT table_name, column_name, column_id
        FROM all_tab_cols
       WHERE table_name in (%s)
  </elaborator>
</mode>

<mode name="withClass_pg" class="com.redhat.rhn.common.db.datasource.test.TableData">
  <query params="">
      SELECT t.tablename as table_name
        FROM pg_tables t
       WHERE t.tablename LIKE 'rhn%'
       ORDER BY t.tablename
  </query>
  <elaborator params="" column="table_name" multiple="t">
      SELECT c.relname as TABLE_NAME, a.attname as COLUMN_NAME, a.atttypid as COLUMN_ID
        FROM pg_attribute a, pg_class c
       WHERE c.relname in (%s)
         AND c.oid = a.attrelid
  </elaborator>
</mode>


<mode name="user_class_or" class="com.redhat.rhn.common.db.datasource.test.UserData">
  <query params="username">
      SELECT u.username as USERNAME, u.user_id as USER_ID, u.created as CREATED
        FROM all_users u
       WHERE LOWER(u.username) = :username
  </query>
  <elaborator name="table_elaborator_or" column="username" params="username">
      SELECT c.owner as USERNAME, COUNT(c.table_name) as TABLE_COUNT
        FROM all_catalog c
       WHERE LOWER(owner) = :username
         AND table_type='TABLE'
       GROUP BY owner
  </elaborator>
</mode>

<mode name="user_class_pg" class="com.redhat.rhn.common.db.datasource.test.UserData">
  <query params="username">
      SELECT u.usename as USERNAME, u.usesysid as USER_ID
        FROM pg_user u
       WHERE u.usename=:username
  </query>
  <elaborator name="table_elaborator_pg" column="username" params="username">
      SELECT c.tableowner as USERNAME, COUNT(c.tablename) as TABLE_COUNT
        FROM pg_tables c
       WHERE tableowner=:username
       GROUP BY tableowner
  </elaborator>
</mode>

<mode name="user_tables_external_elaborator_or">
  <query params="">
      SELECT u.username as USERNAME, u.user_id as USER_ID, u.created as CREATED
        FROM all_users u
  </query>
  <elaborator name="external_elaborator_or" params="user_name" />
</mode>

<query name="external_elaborator_or" column="username" params="user_name">
          SELECT c.owner as USERNAME, COUNT(c.table_name) as TABLE_COUNT
        FROM all_catalog c
       WHERE LOWER(owner) = :user_name
         AND table_type='TABLE'
       GROUP BY owner
</query>

<mode name="user_tables_external_elaborator_pg">
  <query params="">
      SELECT u.usename as USERNAME, u.usesysid as USER_ID
        FROM pg_user u
  </query>
  <elaborator name="external_elaborator_pg" params="user_name" />
</mode>

<query name="external_elaborator_pg" column="username" params="user_name">
          SELECT c.tableowner as USERNAME, COUNT(c.tablename) as TABLE_COUNT
        FROM pg_tables c
       WHERE tableowner=:user_name
       GROUP BY tableowner
</query>


<write-mode name="insert_into_rhnServerPath">
  <query params="server_id, proxy_server_id, proxy_hostname, position">
    INSERT INTO rhnServerPath(SERVER_ID, PROXY_SERVER_ID, HOSTNAME, POSITION)
        VALUES(:server_id, :proxy_server_id, :proxy_hostname, :position)
  </query>
</write-mode>

<write-mode name="insert_into_rhnServerNeededPackageCache">
  <query params="errata_id, server_id, package_id">
    INSERT INTO rhnServerNeededCache(ERRATA_ID, SERVER_ID, PACKAGE_ID)
        VALUES(:errata_id, :server_id, :package_id)
  </query>
</write-mode>

<write-mode name="insert_into_rhnChannelNewestPackage">
  <query params="channel_id, name_id, evr_id, package_arch_id, packge_id">
    INSERT INTO rhnChannelNewestPackage(CHANNEL_ID, NAME_ID, EVR_ID, PACKAGE_ARCH_ID, PACKAGE_ID)
        VALUES(:channel_id, :name_id, :evr_id, :package_arch_id, :packge_id)
  </query>
</write-mode>

<write-mode name="insert_into_rhnPackageProvides">
  <query params="pkg_id, capability_id, sense_id">
    INSERT INTO rhnPackageProvides(PACKAGE_ID, CAPABILITY_ID, SENSE)
      VALUES(:pkg_id, :capability_id, :sense_id)
  </query>
</write-mode>

<write-mode name="insert_into_rhnChannelPackage">
  <query params="channel_id, packge_id">
    INSERT INTO rhnChannelPackage(CHANNEL_ID, PACKAGE_ID)
        VALUES(:channel_id, :packge_id)
  </query>
</write-mode>

<write-mode name="insert_into_rhnServerPackage">
  <query params="server_id, pn_id, p_epoch, p_version, p_release">
INSERT
  INTO rhnServerPackage
       (server_id,
        name_id,
  evr_id)
VALUES (:server_id,
        :pn_id,
        LOOKUP_EVR(:p_epoch, :p_version, :p_release))
  </query>
</write-mode>

<write-mode name="insert_into_rhnServerPackage_with_arch">
  <query params="server_id, pn_id, evr_id, arch_id">
INSERT
  INTO rhnServerPackage
       (server_id,
        name_id,
        evr_id,
        package_arch_id)
VALUES (:server_id,
        :pn_id,
        :evr_id,
        :arch_id
     )
  </query>
</write-mode>

<write-mode name="insert_into_rhnServerPackageSimple">
  <query params="server_id, name_id, evr_id">
INSERT
  INTO rhnServerPackage
       (server_id,
        name_id,
        evr_id)
VALUES (:server_id,
        :name_id,
        :evr_id)
  </query>
</write-mode>


<mode name="scheduled_actions">
  <query params="user_id">
    Select  AT.label
      From  rhnActionType AT, rhnAction A
     Where  A.scheduler = :user_id
       And  AT.id = A.action_type
  </query>
</mode>

<write-mode name="ready_errata_cache_queue">
  <query params="org_id, server_count, processed">
INSERT
  INTO rhnOrgErrataCacheQueue
            (org_id, server_count, processed)
VALUES (:org_id, :server_count, :processed)
  </query>
</write-mode>

<mode name="get_daily_summary_queue">
    <query params="">
SELECT * FROM rhnSummaryQueue
    </query>
</mode>

<write-mode name="insert_into_daily_summary_queue">
    <query params="org_id">
INSERT INTO rhnDailySummaryQueue (org_id) VALUES (:org_id)
    </query>
</write-mode>

<write-mode name="delete_from_daily_summary_queue">
    <query>
DELETE FROM rhnDailySummaryQueue
    </query>
</write-mode>

<write-mode name="add_to_client_capabilities">
    <query params="sid, capability, version">
insert into rhnClientCapability (server_id, capability_name_id, version)
         values (:sid, LOOKUP_CLIENT_CAPABILITY(:capability), :version)
    </query>
</write-mode>

<write-mode name="update_group_type">
    <query params="type_id, sgid">
update rhnServerGroup set group_type = :type_id where id = :sgid
    </query>
</write-mode>

<mode name="package_install_list">
    <query params="action_id">
SELECT * from rhntransactionpackage where
  id in (select transaction_package_id from rhnPackageDeltaElement where PACKAGE_DELTA_ID =
  (select id from rhnPackageDelta where id = (select PACKAGE_DELTA_ID from rhnActionPackageDelta
  where action_id = :action_id)))
    </query>
</mode>

<mode name="select_virtual_instance_by_id">
    <query params="id">
SELECT * FROM rhnVirtualInstance WHERE id = :id
    </query>
</mode>

<mode name="get_test_users">
    <query params="">
SELECT id from web_contact where UPPER(login) like 'TEST%'
    </query>
</mode>

<mode name="get_test_channels">
    <query params="">
SELECT id from rhnChannel where UPPER(name) like 'CHANNELNAME%' or UPPER(label) like 'CHANNELLABEL%'
    </query>
</mode>


<mode name="get_test_orgs">
    <query params="">
SELECT id from web_customer where UPPER(name) like 'TEST%'
    </query>
</mode>

<mode name="get_test_servers">
    <query params="">
SELECT id from rhnServer where name like 'serverfactorytest%'
    </query>
</mode>


<mode name="select_in">
        <query params="">
SELECT name FROM web_customer WHERE id IN (%s)
        </query>
</mode>

<mode name="select_in_withparams">
        <query params="name">
SELECT name FROM web_customer WHERE id IN (%s) AND name = :name
        </query>
</mode>

<write-mode name="insert_into_visibleobjects">
  <query params="sessionid, obj_id, obj_type">
    INSERT INTO rhnVisibleObjects (pxt_session_id, object_id, object_type)
    VALUES (:sessionid, :obj_id, :obj_type)
  </query>
</write-mode>

<mode name="select_test_time_series">
    <query params="data">
SELECT 1 FROM dual
    </query>
</mode>
</datasource_modes>

<datasource_modes>

<mode name="systems_with_feature" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id, feature">
select * from (
  SELECT  DISTINCT S.id,
                   S.name,
                   SI.server_id AS IS_RHN_SATELLITE,
                   PI.server_id AS IS_RHN_PROXY,
                   TO_CHAR(Sinfo.checkin, 'YYYY-MM-DD HH24:MI:SS') AS LAST_CHECKIN
    FROM rhnServerInfo SInfo, rhnUserServerPerms USP, rhnServer S
    LEFT OUTER JOIN rhnSatelliteInfo SI ON S.id = SI.server_id
    LEFT OUTER JOIN rhnProxyInfo PI ON S.id = PI.server_id
   WHERE  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  Sinfo.server_id = S.id
     AND EXISTS(SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = S.ID AND SFV.label = :feature)
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
</mode>

<mode name="virtual_hosts_for_user" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id">
select * from (
  SELECT  DISTINCT S.id,
                   S.name
    FROM  rhnServer S,
    rhnUserServerPerms USP,
    rhnVirtualInstance VI
   WHERE  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND VI.host_system_id = S.id
     AND USP.server_id  = S.id
     AND USP.user_id = :user_id
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="is_virtual_host_in_org">
  <query params="sid, oid">
select 1
  from rhnServer s,
       rhnVirtualInstance vi
 where s.id = vi.host_system_id
   and vi.host_system_id = :sid
   and s.org_id = :oid
 group by s.id
  </query>
</mode>

<mode name="find_by_name" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id, name">
  SELECT  DISTINCT S.id,
                   S.name
    FROM  rhnServer S,
    rhnUserServerPerms USP
   WHERE  USP.user_id = :user_id
     AND USP.server_id  = S.id
     AND USP.user_id = :user_id
     and S.name = :name
  </query>
  <elaborator name="system_overview" />
</mode>


<!-- system_feature(ftr_kickstart) -->
<mode name="ssm_kickstartable" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id">
SELECT  S.id,
       S.name
  FROM rhnServer S
       inner join rhnSet ST on S.id = ST.element
       inner join rhnUserServerPerms USP on USP.server_id = S.id
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND EXISTS(SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = ST.element AND SFV.label = 'ftr_kickstart')
   AND USP.server_id = S.id
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>


<mode name="ssm_remote_commandable">
  <query params="user_id">
select * from (
SELECT DISTINCT S.id,
       S.name AS SERVER_NAME
  FROM rhnServer S,
       rhnClientCapabilityName CCN,
       rhnClientCapability CC,
       rhnSet ST,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND USP.server_id = ST.element
   AND EXISTS(SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = ST.element AND SFV.label = 'ftr_remote_command')
   AND USP.server_id = CC.server_id
   AND CC.capability_name_id = CCN.id
   AND CCN.name = 'script.run'
   AND USP.server_id = S.id
) X
ORDER BY UPPER(COALESCE(X.server_name, '(none)')), X.id
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="custom_vals">
  <query params="org_id, uid">
SELECT CDK.id,
       CDK.label,
       CDK.description as description,
       CDK.modified as last_modified,
       ( SELECT count(SCDV.key_id)
         FROM rhnServerCustomDataValue SCDV,
               rhnUserServerPerms USP
               WHERE SCDV.key_id = CDK.id and
               USP.user_id = :uid and
               USP.server_id = SCDV.server_id
       ) as server_count
  FROM rhnCustomDataKey CDK
 WHERE CDK.org_id = :org_id
  </query>
</mode>


<query name="ssm_package_upgrades_systems" params="user_id, set_label, package_set_label">
SELECT  S.id AS ID,
        S.name AS SERVER_NAME
  FROM  rhnServer S,
        rhnPackage P,
        rhnServerNeededPackageCache SNPC,
        rhnSet SET1,
        rhnSet SET2
 WHERE  SET1.user_id = :user_id
   AND  SET1.label = :set_label
   AND  SET1.element = S.id
   AND  SET2.user_id = :user_id
   AND  SET2.label = :package_set_label
   AND  SET2.element = P.name_id
   AND  SET2.element_two = P.evr_id
   AND  SET2.element_three = P.package_arch_id
   AND  SNPC.package_id = P.id
   AND  SNPC.server_id = S.id
GROUP BY s.id, s.name
ORDER BY UPPER(S.name)
</query>

<mode name="ssm_package_upgrades_conf">
  <query name="ssm_package_upgrades_systems" />
  <elaborator params="user_id, package_set_label" multiple="t">
SELECT  S.id AS ID,
        S.name AS SERVER_NAME,
        PN.name || '-' || evr_t_as_vre_simple(max(PE.evr)) || '-' || PA.label NVRE,
        PN.id AS NAME_ID,
        lookup_evr((max(PE.evr)).epoch, (max(PE.evr)).version, (max(PE.evr)).release) as EVR_ID,
        PA.id AS ARCH_ID
  FROM  rhnServer S,
        rhnPackageEVR PE,
        rhnPackageName PN,
        rhnPackage P,
        rhnPackageArch PA,
        rhnServerNeededPackageCache SNPC,
        rhnSet
 WHERE  SNPC.server_id IN (%s)
   AND  rhnSet.user_id = :user_id
   AND  rhnSet.label = :package_set_label
   AND  rhnSet.element = P.name_id
   AND  rhnSet.element_two = P.evr_id
   AND  rhnSet.element_three = P.package_arch_id
   AND  SNPC.package_id = P.id
   AND  SNPC.server_id = S.id
   AND  P.name_id = PN.id
   AND  P.evr_id = PE.id
   AND  P.package_arch_id = PA.id
GROUP BY s.id, pn.id, pa.id, s.name, pn.name, pa.label
ORDER BY UPPER(S.name), S.id, UPPER(PN.name), UPPER(PA.label)
  </elaborator>
</mode>

<mode name="systems_with_package_nvr" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id, name, version, release">
SELECT  S.id as id,
       S.name as name
  FROM rhnServer S inner join
                rhnServerPackage SP on S.id = SP.server_id  inner join
                rhnPackageName PN on PN.id = SP.name_id  inner join
                rhnPackageEvr  EVR       on EVR.id = SP.evr_id
 WHERE S.org_id = :org_id  and
                        PN.name = :name  and
                        EVR.version = :version and
                        EVR.release = :release
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="count_systems_subscribed_to_channel">
  <query params="org_id, cid, user_id">
SELECT COUNT(S.id) AS count
  FROM rhnServerChannel SC,
       rhnServer S
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = :cid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
  </query>
</mode>

<mode name="count_systems_subscribed_to_channel_not_in_org">
  <query params="org_id, cid">
SELECT COUNT(S.id) AS count
  FROM rhnServerChannel SC,
       rhnServer S
 WHERE S.org_id != :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = :cid
  </query>
</mode>

<mode name="systems_subscribed_to_channel">
  <query params="org_id, cid, user_id">
SELECT
       S.id as id,
       S.name as name,
          (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM rhnServerChannel SC,
       rhnServer S
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = :cid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="systems_subscribed_by_orgtrust">
  <query params="orgA, orgB">
        SELECT s.id,
                     s.org_id,
                     s.name,
                     c.id as cid
            FROM rhnServer s,
                      rhnChannel c,
                      rhnServerChannel sc
         WHERE c.id = sc.channel_id AND
                      s.id = sc.server_id AND
                      c.org_id = :orgA AND
                      s.org_id = :orgB
        UNION
        SELECT s.id,
                     s.org_id,
                     s.name,
                     c.id as cid
            FROM rhnServer s,
                      rhnChannel c,
                      rhnServerChannel sc
         WHERE c.id = sc.channel_id AND
                      s.id = sc.server_id AND
                      c.org_id = :orgB AND
                      s.org_id = :orgA
    </query>
</mode>

<mode name="sids_subscribed_by_orgtrust">
  <query params="orgA, orgB">
        SELECT DISTINCT s.id
            FROM rhnServer s,
                      rhnChannel c,
                      rhnServerChannel sc
         WHERE c.id = sc.channel_id AND
                      s.id = sc.server_id AND
                      c.org_id = :orgA AND
                      s.org_id = :orgB
    </query>
</mode>


<mode name="systems_subscribed_to_channel_size">
  <query params="org_id, cid, user_id">
SELECT
       count(S.id) as count
  FROM rhnServerChannel SC,
       rhnServer S
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = :cid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
  </query>
</mode>


<mode name="systems_subscribed_to_channel_in_set" class="com.redhat.rhn.frontend.dto.EssentialServerDto">
  <query params="org_id, cid, user_id, set_label">
SELECT S.id, S.name
  FROM rhnServerChannel SC,
       rhnServer S
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = :cid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND EXISTS (SELECT 1 FROM rhnSet WHERE user_id = :user_id AND label = :set_label AND element = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
</mode>


<mode name="systems_in_group" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="sgid">
SELECT SGM.server_id AS ID, S.name AS NAME,
          (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM rhnServer S, rhnServerGroupMembers SGM
 WHERE SGM.server_group_id = :sgid
   AND SGM.server_id = S.id
   AND EXISTS (SELECT 1 FROM rhnServerFeaturesView SFV
               WHERE SFV.server_id = S.id
                 AND SFV.label = 'ftr_system_grouping')
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="xmlrpc_systems_in_group" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="sgid">
select * from (
  SELECT  DISTINCT S.id AS ID,
          S.name AS NAME,
          S.created as CREATED,
          S.last_boot as LAST_BOOT,
          INFO.checkin AS LAST_CHECKIN
    FROM  rhnServer S,
          rhnServerInfo INFO,
          rhnServerGroupMembers SGM
   WHERE  SGM.server_group_id = :sgid
     AND  S.id = SGM.server_id
     AND  S.id = INFO.server_id
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
</mode>

<mode name="target_systems_for_group" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="sgid, user_id">
SELECT S.id, S.name,
          (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM rhnServer S, rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND S.id = USP.server_id
   AND NOT EXISTS(SELECT 1 FROM rhnServerGroupMembers SGM WHERE SGM.server_group_id = :sgid AND SGM.server_id = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="systems_with_package" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, pid, user_id">
SELECT  S.id, S.name, 1 as selectable
  FROM  rhnServerPackage SP, rhnPackage P, rhnServer S
 WHERE  S.org_id = :org_id
   AND  P.id = :pid
   AND  P.name_id = SP.name_id
   AND  P.evr_id = SP.evr_id
   AND  P.package_arch_id = SP.package_arch_id
   AND  SP.server_id = S.id
   AND  EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="potential_systems_for_package" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, pid, user_id">
SELECT  S.id, S.name, 1 as selectable
  FROM  rhnPackage P, rhnChannelPackage CP, rhnServerChannel SC, rhnServer S
 WHERE  S.org_id = :org_id
   AND  SC.server_id = S.id
   AND  SC.channel_id = CP.channel_id
   AND  CP.package_id = :pid
   AND  CP.package_id = P.id
   AND  COALESCE((SELECT MAX(PE.evr)
           FROM rhnServerPackage SP, rhnPackageEvr PE
          WHERE SP.name_id = P.name_id
            AND SP.server_id = S.id
            AND SP.evr_id = PE.id), (EVR_T(NULL, '0', '0'))
            )
        &lt;
        (SELECT EVR FROM rhnPackageEVR PE WHERE PE.id = P.evr_id)
   AND    EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY  UPPER(NVL(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="systems_with_needed_package" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, pid, user_id">
SELECT  S.ID
  FROM  rhnServerNeededPackageCache SNPC, rhnServer S
 WHERE  S.org_id = :org_id
   AND  SNPC.package_id = :pid
   AND  SNPC.server_id = S.id
   AND  EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="target_systems_for_channel" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, cid, user_id">
SELECT ES.id, S.name, 1 as selectable
  FROM rhnChannel C,
       rhnServerChannel SC,
       rhnEntitledServers ES,
       rhnServer S
 WHERE ES.org_id = :org_id
   AND ES.id = SC.server_id
   AND C.id = :cid
   AND ES.id = S.id
   AND SC.channel_id = C.parent_channel
   AND NOT EXISTS (SELECT 1 FROM rhnServerChannel WHERE server_id = ES.id AND channel_id = C.id)
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = ES.id)
  </query>
    <elaborator name="system_overview" />
    <elaborator name="entitlements"/>
</mode>

<mode name="xmlrpc_visible_to_user" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id">
select * from (
  SELECT  DISTINCT S.id AS ID,
          S.name AS NAME,
          INFO.checkin AS LAST_CHECKIN
    FROM  rhnServer S, rhnUserServerPerms USP, rhnServerInfo INFO
   WHERE  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  S.id = INFO.server_id
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
</mode>

<mode name="xmlrpc_visible_to_user_inactive" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id, checkin_threshold">
select * from (
  SELECT  DISTINCT S.id AS ID,
          S.name AS NAME,
          INFO.checkin AS LAST_CHECKIN
    FROM  rhnServer S, rhnUserServerPerms USP, rhnServerInfo INFO
   WHERE  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  S.id = INFO.server_id
     AND  INFO.checkin &lt; current_timestamp - numtodsinterval(:checkin_threshold * 86400, 'second')
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
</mode>

<mode name="xmlrpc_visible_to_user_active" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id, checkin_threshold">
select * from (
  SELECT  DISTINCT S.id AS ID,
          S.name AS NAME,
          INFO.checkin AS LAST_CHECKIN
    FROM  rhnServer S, rhnUserServerPerms USP, rhnServerInfo INFO
   WHERE  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  S.id = INFO.server_id
     AND  INFO.checkin &gt; current_timestamp - numtodsinterval(:checkin_threshold * 86400, 'second')
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
</mode>

<mode name="visible_to_user_from_sysid_list" class="com.redhat.rhn.frontend.dto.SystemSearchResult">
  <query name="available_to_user_from_sysid_list" />
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements"/>
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
  <elaborator name="system_search_results" />
</mode>

<mode name="visible_to_user" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query name="available_to_user" />
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements"/>
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="visible_to_user_physical_list" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query name="available_to_user_physical_list" />
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements"/>
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="system_currency" class="com.redhat.rhn.frontend.dto.SystemCurrency">
    <query params="uid">
        SELECT s1.id,
               s1.name,
               sum(case when (upper(substr(errata.synopsis, 1, 1)) = 'C' and errata.advisory_type = 'Security Advisory') then 1 else 0 end) critical,
               sum(case when (upper(substr(errata.synopsis, 1, 1)) = 'I' and errata.advisory_type = 'Security Advisory') then 1 else 0 end) important,
               sum(case when (upper(substr(errata.synopsis, 1, 1)) = 'M' and errata.advisory_type = 'Security Advisory') then 1 else 0 end) moderate,
               sum(case when (upper(substr(errata.synopsis, 1, 1)) = 'L' and errata.advisory_type = 'Security Advisory') then 1 else 0 end) low,
               sum(case when errata.advisory_type = 'Bug Fix Advisory' then 1 else 0 end) bug,
               sum(case when errata.advisory_type = 'Product Enhancement Advisory' then 1 else 0 end) enhancement
         FROM rhnServer S1
         JOIN rhnUserServerPerms USP1
           ON S1.id = USP1.server_id
         LEFT join (select distinct E.id, SNC.server_id, E.synopsis, E.advisory_type
                      from rhnErrata E
                      join rhnServerNeededCache SNC
                        on E.id = SNC.errata_id) ERRATA
           ON S1.id = errata.server_id
        WHERE USP1.user_id = :uid
        GROUP by s1.id, s1.name
        ORDER by s1.name
    </query>
</mode>

<mode name="most_critical_systems" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query name="available_to_user_with_errata" />
  <elaborator name="system_overview_most_critical" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<query name="available_to_uid" params="formvar_uid">
select * from (
  SELECT  DISTINCT S.id AS ID,
          S.name AS SERVER_NAME,
          (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
    FROM  rhnServer S, rhnUserServerPerms USP
   WHERE  USP.user_id = :formvar_uid
     AND  S.id = USP.server_id
) X
ORDER BY  UPPER(COALESCE(X.server_name, '(none)')), X.id
</query>


<mode name="visible_to_uid" class="com.redhat.rhn.frontend.dto.VisibleSystems">
  <query name="available_to_uid" />
  <elaborator params="formvar_uid" multiple="t">
select  a.server_id             id,
        s.name                  server_name,
        COALESCE(sg.name,'Org Admin access')     group_name
from    rhnServer               s,
        (
        select  usg.user_id, sgm.server_id, sgm.server_group_id
        from    rhnServerGroupMembers sgm,
                rhnUserServerGroupPerms usg
        where   usg.server_group_id = sgm.server_group_id
        union all
        select  ugm.user_id, s.id server_id, TO_NUMBER(null,null) server_group_id
        from    rhnUserGroup ug,
                rhnUserGroupMembers ugm,
                rhnServer s,
                web_contact u
        where   ugm.user_group_id = ug.id
            and u.id = ugm.user_id
            and ug.group_type = (
                    select id
                    from rhnUserGroupType
                    where label = 'org_admin')
            and s.org_id = u.org_id
        )                       a
left join rhnServerGroup sg
on a.server_group_id = sg.id
where a.user_id = :formvar_uid
    and a.server_id in (%s)
    and a.server_id = s.id
  </elaborator>
</mode>

<mode name="system_entitlement_list" class="com.redhat.rhn.frontend.dto.SystemOverview">
        <query params="user_id">
          SELECT  S.id, S.name, 1 as selectable
            FROM  rhnServer S
                INNER JOIN rhnUserServerPerms USP on S.id = USP.server_id
                INNER JOIN rhnServerInfo SInfo on Sinfo.server_id = S.id
           WHERE  USP.user_id = :user_id
                ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.id
        </query>
   <elaborator name="system_overview" />
   <elaborator name="entitlements" />
</mode>

<mode name="affected_by_errata_no_selectable" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="eid, user_id">
select * from (
  SELECT  DISTINCT S.id as system_id,
                                        S.name as system_name,
                                        S.id as id,
                                        S.name as name
    FROM  rhnServerNeededErrataCache SNEC,
          rhnEntitledServers S,
          rhnUserServerPerms USP
   WHERE  SNEC.errata_id = :eid
     AND  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  S.id = SNEC.server_id
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
</mode>

<mode name="affected_by_errata" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="eid, user_id">
select * from (
  SELECT  DISTINCT S.id, S.name,
          1 as selectable
    FROM  rhnServerNeededErrataCache SNEC,
          rhnEntitledServers S,
          rhnUserServerPerms USP
   WHERE  SNEC.errata_id = :eid
     AND  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  S.id = SNEC.server_id
) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
  </query>
  <elaborator params="eid" multiple="t">
SELECT SA.server_id as id,
       (SELECT name
        FROM rhnActionStatus where id = SA.status) as status,
     SA.action_id,
     (SELECT SA2.modified
        FROM rhnServerAction SA2
     WHERE SA2.server_id = SA.server_id
       AND SA2.action_id = SA.action_id) AS modified
  FROM rhnServerAction SA
 WHERE SA.server_id IN (%s)
   AND SA.action_id IN (
           SELECT action_id
         FROM rhnActionErrataUpdate
      WHERE errata_id = :eid)
  </elaborator>
  <elaborator name="system_overview" />
  <elaborator name="entitlements" />
</mode>

<mode name="in_set_and_affected_by_errata"
      class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="eid, user_id, set_label">
  SELECT S.ID, S.name
    FROM rhnServer S, rhnSet ST
   WHERE EXISTS (SELECT 1
                   FROM rhnServerNeededErrataCache SNEC, rhnUserServerPerms USP
                  WHERE SNEC.errata_id = :eid
                    AND USP.user_id = :user_id
                    AND SNEC.server_id = USP.server_id
                    AND USP.server_id = S.id)
     AND ST.user_id = :user_id
     AND ST.label = :set_label
     AND ST.element = S.id
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="in_set" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query name="in_set" />
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>


<query name="system_set_remove_package_query" params="user_id, set_label, package_set_label">
select * from (
        SELECT  DISTINCT S.id,
                S.name SYSTEM_NAME
          FROM  rhnServer S,
                rhnServerPackage SP,
                rhnSet ST2
         WHERE  ST2.user_id = :user_id
           AND  ST2.label= :package_set_label
           AND  SP.server_id in (select element from rhnSet  where label = :set_label and user_id = :user_id)
           AND  SP.name_id = ST2.element
           AND  SP.evr_id = ST2.element_two
           AND  (SP.package_arch_id  = ST2.element_three  OR (SP.package_arch_id is null and ST2.element_three is null))
           AND  SP.server_id = S.id
) X
        ORDER BY UPPER(X.system_name), X.id
   </query>


<mode name="system_set_remove_or_verify_packages_conf_short">
        <query name="system_set_remove_package_query" />
   <elaborator params="user_id, package_set_label" multiple="t">
SELECT  DISTINCT SP.server_id id,
        SP.name_id || '|' || SP.evr_id || '|' || SP.package_arch_id AS ID_COMBO
  FROM  rhnServerPackage SP
 WHERE  SP.server_id IN (%s)
    AND  exists (select 1 from rhnSet
          where user_id = :user_id and label = :package_set_label
            and element = SP.name_id
            and element_two = SP.evr_id
            and (element_three = SP.package_arch_id or (element_three is null and SP.package_arch_id is null)))
    </elaborator>
</mode>

<mode name="system_set_remove_or_verify_packages_conf">
        <query name="system_set_remove_package_query" />
   <elaborator params="user_id, package_set_label" multiple="t">
SELECT  DISTINCT SP.server_id id,
        PN.name || '-' || evr_t_as_vre_simple(PE.evr) || '-' || PA.label NVRE,
        PN.id || '|' || PE.id || '|' || PA.id AS ID_COMBO
  FROM  rhnPackageEVR PE,
        rhnPackageName PN,
        rhnServerPackage SP LEFT OUTER JOIN rhnPackageArch PA
        ON SP.package_arch_id = PA.id
 WHERE  SP.server_id IN (%s)
   AND  SP.name_id = PN.id
   AND  PN.id || '|' || PE.id || '|' || PA.id IN (SELECT element || '|' || element_two || '|' || element_three FROM rhnSet WHERE user_id = :user_id AND label = :package_set_label)
   AND  SP.evr_id = PE.id
   </elaborator>
</mode>

<mode name="out_of_date" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id">
select * from (
  SELECT    DISTINCT S.ID, S.NAME,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM    rhnServer S, rhnUserServerPerms USP, rhnServerNeededPackageCache SNPC
  WHERE    S.ORG_ID = :org_id AND S.ID = USP.server_id AND USP.user_id = :user_id AND S.id = SNPC.server_id
) X
ORDER BY  UPPER(COALESCE(X.NAME, '(none)')), X.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="unentitled" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id">
SELECT    S.ID, S.NAME,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM    rhnServer S
 WHERE    S.ORG_ID = :org_id
   AND    EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND    NOT EXISTS (SELECT 1 FROM rhnEntitledServers ES where ES.id = S.id)
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="ungrouped" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id">
SELECT S.ID, S.NAME,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM rhnServer S
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND NOT EXISTS (SELECT 1
                     FROM rhnServerGroup SG, rhnServerGroupMembers SGM
                    WHERE SGM.server_id = S.id
                      AND SG.id = SGM.server_group_id
                      AND SG.group_type IS NULL)
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<query name="having_errata_with_keyword_applied_since_last_reboot_list" params="org_id, user_id, keyword">
SELECT DISTINCT S.id, S.NAME,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM rhnServer S,
       rhnErrata E,
       rhnServerInfo SI,
       rhnServerPackage SP,
       rhnPackage P,
       rhnErrataPackage EP
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id=:user_id AND USP.server_id = S.id)
   AND SI.server_id = S.id
   AND SP.server_id = S.id
   AND P.evr_id = SP.evr_id
   AND P.name_id = SP.name_id
   AND EP.errata_id = E.id AND EP.package_id = P.id
   AND epoch_seconds_to_timestamp_tz(S.last_boot) &lt; SP.installtime
   AND E.id IN (SELECT EK.errata_id FROM rhnErrataKeyword EK WHERE EK.keyword = :keyword)
</query>

<mode name="having_errata_with_keyword_applied_since_last_reboot" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query name="having_errata_with_keyword_applied_since_last_reboot_list"/>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="has_errata_with_keyword_applied_since_last_reboot">
  <query params="org_id, user_id, keyword, sid">
        SELECT 1
        FROM rhnServer S,
          rhnErrata E,
          rhnServerInfo SI,
          rhnServerPackage SP,
          rhnPackage P,
          rhnErrataPackage EP
        WHERE S.org_id = :org_id
          AND S.id = :sid
          AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id=:user_id AND USP.server_id = S.id)
          AND SI.server_id = S.id
          AND SP.server_id = S.id
          AND P.evr_id = SP.evr_id
          AND P.name_id = SP.name_id
          AND EP.errata_id = E.id AND EP.package_id = P.id
          AND epoch_seconds_to_timestamp_tz(S.last_boot) &lt; SP.installtime
          AND E.id IN (SELECT EK.errata_id FROM rhnErrataKeyword EK WHERE EK.keyword = :keyword)
    </query>
</mode>

<mode name="inactive" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id, checkin_threshold">
SELECT S.id, S.NAME,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable,
           TO_CHAR(si.checkin, 'YYYY-MM-DD HH24:MI:SS') as last_checkin
  FROM rhnServerInfo SI,
       rhnServer S
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND SI.server_id = S.id
   AND SI.checkin &lt; current_timestamp - numtodsinterval(:checkin_threshold * 86400, 'second')
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="inactive_order_by_checkin_time" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id, checkin_threshold">
SELECT S.id, S.NAME,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM rhnServerInfo SI,
       rhnServer S
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND SI.server_id = S.id
   AND SI.checkin &lt; current_timestamp - numtodsinterval(:checkin_threshold * 86400, 'second')
ORDER BY SI.checkin DESC
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
</mode>

<mode name="recently_registered" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id, threshold">
SELECT S.id, S.NAME, S.info, S.created,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable,
                (select C.name
                        from rhnChannel C
                        inner join rhnServerChannel SC on SC.channel_id = C.id
                        where SC.server_id = S.id
                        and C.parent_channel IS NULL) AS CHANNEL_LABELS,
       (SELECT wc.login
          FROM web_contact wc
         WHERE wc.id = s.creator_id) as creator_name
  FROM rhnServer S
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND S.created &gt; current_timestamp - numtodsinterval(:threshold * 86400, 'second')
ORDER BY S.created DESC
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="all_systems_by_registration" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="org_id, user_id">
SELECT S.id, S.NAME, S.info, S.created,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable,
                (select C.name
                        from rhnChannel C
                        inner join rhnServerChannel SC on SC.channel_id = C.id
                        where SC.server_id = S.id
                        and C.parent_channel IS NULL) AS CHANNEL_LABELS,
    (SELECT wc.login
          FROM web_contact wc
         WHERE wc.id = s.creator_id) as creator_name
  FROM rhnServer S
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP
                WHERE USP.user_id = :user_id
                  AND USP.server_id = S.id)
ORDER BY S.created DESC
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
</mode>

<mode name="proxy_servers" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id">
SELECT PI.server_id ID, S.name,
       (SELECT 1
          FROM rhnServerFeaturesView SFV
         WHERE SFV.server_id = S.id
           AND SFV.label = 'ftr_system_grouping') AS selectable
  FROM rhnServer S, rhnProxyInfo PI
 WHERE EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = PI.server_id)
   AND S.id = PI.server_id
  </query>
  <elaborator name="system_overview"/>
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="virtual_guests_for_host" class="com.redhat.rhn.frontend.dto.VirtualSystemOverview">
  <query params="user_id, sid">
  SELECT
  DISTINCT VI.id,
           VI.host_system_id,
           VI.virtual_system_id,
           VI.uuid,
         COALESCE(VII.name, '(none)') AS NAME,
         COALESCE(VIS.name, '(unknown)') AS STATE_NAME,
         COALESCE(VIS.label, 'unknown') AS STATE_LABEL,
     COALESCE(VII.vcpus, 0) AS VCPUS,
     COALESCE(VII.memory_size_k, 0) AS MEMORY,
     COALESCE(((SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = VI.virtual_system_id)), 0 ) as accessible,
         rhn_channel.user_role_check((select channel_id from rhnServerOverview where server_id = VI.virtual_system_id), :user_id, 'subscribe') AS subscribable,
         1 AS selectable
    FROM rhnVirtualInstance VI
         LEFT OUTER JOIN rhnVirtualInstanceInfo VII ON VI.id = VII.instance_id
         LEFT OUTER JOIN rhnVirtualInstanceState VIS ON VII.state = VIS.id
   WHERE EXISTS (SELECT 1
                   FROM rhnUserServerPerms USP
                  WHERE USP.user_id = :user_id
                    AND USP.server_id = VI.host_system_id)
     AND VI.host_system_id = :sid
     AND VI.uuid IS NOT NULL
ORDER BY NAME, VI.virtual_system_id, VI.uuid DESC
  </query>
  <elaborator name="virtual_system_overview"/>
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="virtual_system_entitlements" />
</mode>

<mode name="virtual_servers" class="com.redhat.rhn.frontend.dto.VirtualSystemOverview">
  <query params="user_id">
SELECT DISTINCT VI.id,
    VI.host_system_id,
    VI.virtual_system_id,
    VI.uuid,
    COALESCE(VII.NAME, '(none)') AS NAME,
    COALESCE(VIS.NAME, '(unknown)') AS STATE_NAME,
    (SELECT 1
        FROM rhnServerFeaturesView SFV
        WHERE (SFV.server_id = VI.virtual_system_id OR (VI.uuid IS NULL AND SFV.server_id = VI.host_system_id))
            AND SFV.label = 'ftr_system_grouping'
    ) AS selectable,
    (SELECT S.NAME
        FROM rhnServer S
        WHERE (VI.uuid IS NULL AND S.id = VI.host_system_id) OR S.id = VI.virtual_system_id
    ) AS server_name,
    (SELECT TYPE.label
        FROM rhnServerGroupMembers SGM,
            rhnServerGroup GRP,
            rhnServerGroupType TYPE
        WHERE sgm.server_id = VI.host_system_id
            AND grp.id = sgm.server_group_id
            AND grp.group_type = type.id
            AND VI.virtual_system_id IS NULL
            AND type.label = 'virtualization_host'
    ) AS virt_entitlement,
    COALESCE(
        (SELECT 1
            FROM rhnUserServerPerms USP
            WHERE USP.user_id = :user_id
                AND ((USP.server_id = VI.virtual_system_id) OR (USP.server_id = VI.host_system_id AND VI.uuid IS NULL))
    ), 0) AS accessible,
    rhn_channel.user_role_check(
        (SELECT channel_id
            FROM rhnServerOverview
            WHERE server_id = VI.virtual_system_id
        ), :user_id, 'subscribe'
    ) AS subscribable

    FROM rhnVirtualInstance VI
        LEFT OUTER JOIN rhnVirtualInstanceInfo VII ON VI.id = VII.instance_id
        LEFT OUTER JOIN rhnVirtualInstanceState VIS ON VII.STATE = VIS.id

    WHERE EXISTS (SELECT 1
        FROM rhnUserServerPerms USP
        WHERE USP.user_id = :user_id
            AND (USP.server_id = VI.host_system_id OR USP.server_id = VI.virtual_system_id)
        )
        OR (VI.uuid IS NULL AND VI.host_system_id IN (
            SELECT VI2.host_system_id
            FROM rhnVirtualInstance VI2
            WHERE VI2.virtual_system_id IN (
                SELECT server_id
                FROM rhnUserServerPerms
                WHERE rhnUserServerPerms.user_id = :user_id
            )
        ))

    ORDER BY VI.host_system_id,VI.uuid DESC
  </query>
  <elaborator name="virtual_system_overview"/>
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="virtual_system_entitlements" />
  <elaborator name="total_virtual_instances" />
  <elaborator name="active_virtual_instances" />
</mode>

<query name="total_virtual_instances" params="">
  SELECT VI.id,
         COUNT(VI2.id) AS COUNT_TOTAL_INSTANCES
    FROM rhnVirtualInstance VI,
         rhnVirtualInstance VI2
   WHERE VI.id IN (%s)
     AND VI.uuid IS NULL
     AND VI2.host_system_id = VI.host_system_id
     AND VI2.uuid IS NOT NULL
GROUP BY VI.id
</query>

<query name="active_virtual_instances" params="">
  SELECT VI.id,
         COUNT(VI2.id) AS COUNT_ACTIVE_INSTANCES
    FROM rhnVirtualInstance VI,
         rhnVirtualInstance VI2,
         rhnVirtualInstanceInfo VII,
         rhnVirtualInstanceState VIS
   WHERE VI.id IN (%s)
     AND VI.uuid IS NULL
     AND VI2.host_system_id = VI.host_system_id
     AND VI2.uuid IS NOT NULL
     AND VII.instance_id = VI2.id
     AND VIS.id = VII.state
     AND VIS.label NOT IN ('stopped', 'crashed')
GROUP BY VI.id
</query>

<mode name="org_proxy_servers" class="com.redhat.rhn.frontend.dto.OrgProxyServer">
  <query params="org_id">
SELECT PI.server_id ID, S.name, TO_CHAR(Sinfo.checkin, 'YYYY-MM-DD HH24:MI:SS') AS checkin
  FROM rhnServer S, rhnProxyInfo PI, rhnServerInfo Sinfo
 WHERE S.org_id = :org_id
   AND S.id = Sinfo.server_id
   AND PI.server_id = S.id
  </query>
</mode>

<mode name="proxy_path_for_server" class="com.redhat.rhn.frontend.dto.ServerPath">
  <query params="sid">
SELECT SP.proxy_server_id ID, S.name, (SP.position + 1) AS position, SP.hostname
  FROM rhnServer S, rhnServerPath SP
 WHERE SP.server_id = :sid
   AND S.id = SP.proxy_server_id
ORDER BY SP.position
  </query>
  <elaborator name="system_overview"/>
  <elaborator name="entitlements" />
</mode>

<!--     TO_CHAR(A.earliest_action, 'YYYY-MM-DD HH24:MI:SS') AS DISPLAY_DATE -->
<mode name="systems_in_progress_action" class="com.redhat.rhn.frontend.dto.ActionedSystem">
  <query params="org_id, aid, user_id">
  SELECT  S.id,
          S.name as SERVER_NAME,
          SA.result_msg AS MESSAGE,
    A.earliest_action AS DISPLAY_DATE
    FROM  rhnAction A,
          rhnServer S,
          rhnServerAction SA
   WHERE  S.org_id = :org_id
     AND  S.ID = SA.server_id
     AND  SA.action_id = :aid
     AND  SA.status IN (0,1)
     AND  EXISTS (
          SELECT  1
            FROM  rhnUserServerPerms USP
           WHERE  USP.user_id = :user_id
             AND  USP.server_id = S.id
          )
     AND  SA.action_id = A.id
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="systems_failed_action" class="com.redhat.rhn.frontend.dto.ActionedSystem">
  <query params="org_id, aid, user_id">
  SELECT  S.id AS ID, S.name AS SERVER_NAME, SA.result_msg AS MESSAGE,
          SA.COMPLETION_TIME AS DISPLAY_DATE
    FROM  rhnServer S, rhnServerAction SA
   WHERE  S.org_id = :org_id
     AND  S.ID = SA.server_id
     AND  SA.action_id = :aid
     AND  SA.status = 3
     AND  EXISTS (
          SELECT  1
            FROM  rhnUserServerPerms USP
           WHERE  USP.user_id = :user_id
             AND  USP.server_id = S.id
          )
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="systems_completed_action" class="com.redhat.rhn.frontend.dto.ActionedSystem">
  <query params="org_id, aid, user_id">
  SELECT  S.id, S.name,
          SA.result_msg AS MESSAGE,
          SA.COMPLETION_TIME AS DISPLAY_DATE
    FROM  rhnServer S, rhnServerAction SA
   WHERE  S.org_id = :org_id
     AND  S.ID = SA.server_id
     AND  SA.action_id = :aid
     AND  SA.status = 2
     AND  EXISTS (
          SELECT  1
            FROM  rhnUserServerPerms USP
           WHERE  USP.user_id = :user_id
             AND  USP.server_id = S.id
          )
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="systems_in_set_with_no_base_channel"  class="com.redhat.rhn.frontend.dto.EssentialServerDto">
  <query params="user_id">
SELECT  DISTINCT ST.element AS ID
  FROM  rhnSet ST
 WHERE  ST.user_id = :user_id
   AND  ST.label = 'system_list'
   AND  NOT EXISTS (SELECT  1
                      FROM  rhnServerChannel SC, rhnChannel C
                     WHERE  SC.server_id = ST.element
                       AND  C.id = SC.channel_id
                       AND  C.parent_channel IS NULL)
  </query>
</mode>

<query name="available_to_user_from_sysid_list" params="user_id">
  SELECT  DISTINCT S.id,
                   S.name,
                  (SELECT 1
                     FROM rhnServerFeaturesView SFV
                    WHERE SFV.server_id = S.id
                      AND SFV.label = 'ftr_system_grouping') AS selectable
    FROM  rhnServer S inner join  rhnUserServerPerms USP on S.id = USP.server_id
   WHERE  USP.user_id = :user_id AND S.id IN (%s)
</query>

<query name="available_to_user" params="user_id">
  SELECT  DISTINCT S.id,
                   S.name,
                  (SELECT 1
                     FROM rhnServerFeaturesView SFV
                    WHERE SFV.server_id = S.id
                      AND SFV.label = 'ftr_system_grouping') AS selectable
    FROM  rhnServer S inner join  rhnUserServerPerms USP on S.id = USP.server_id
   WHERE  USP.user_id = :user_id
</query>

<query name="available_to_user_physical_list" params="user_id">
  SELECT  DISTINCT S.id,
                   S.name,
                  (SELECT 1
                     FROM rhnServerFeaturesView SFV
                    WHERE SFV.server_id = S.id
                      AND SFV.label = 'ftr_system_grouping') AS selectable
    FROM  rhnServer S inner join  rhnUserServerPerms USP on S.id = USP.server_id
   WHERE  USP.user_id = :user_id
     AND  NOT EXISTS (SELECT DISTINCT virtual_system_id as vid FROM rhnVirtualInstance where S.id=virtual_system_id)
</query>

<query name="available_to_user_with_errata" params="user_id">
  SELECT  DISTINCT S.id,
                   S.name,
                   SI.server_id AS IS_RHN_SATELLITE,
                   PI.server_id AS IS_RHN_PROXY,
                   TO_CHAR(Sinfo.checkin, 'YYYY-MM-DD HH24:MI:SS') AS LAST_CHECKIN,
                  (SELECT 1
                     FROM rhnServerFeaturesView SFV
                    WHERE SFV.server_id = S.id
                      AND SFV.label = 'ftr_system_grouping') AS selectable
    FROM rhnServerInfo SInfo, rhnUserServerPerms USP, rhnServer S
    LEFT OUTER JOIN rhnSatelliteInfo SI ON S.id = SI.server_id
    LEFT OUTER JOIN rhnProxyInfo PI ON S.id = PI.server_id
   WHERE  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  Sinfo.server_id = S.id
     AND ((SELECT count (*) FROM rhnServerErrataTypeView setv WHERE setv.server_id = s.id) > 0)
</query>

<query name="system_search_results" params="">
  SELECT  S.ID, S.DESCRIPTION,
    S.created as created,
    S.running_kernel as running_kernel,
    CPU.nrcpu as cpu_number_of_cpus,
    CPU.mhz as cpu_mhz,
    CPU.model as cpu_model,
    DMI.system as dmi_system,
    DMI.bios_vendor as dmi_bios_vendor,
    DMI.bios_version as dmi_bios_version,
    DMI.bios_release as dmi_bios_release,
    DMI.asset as dmi_asset,
    RSN.hostname as hostname,
    RSN.ipaddr as ipaddr,
    SL.machine as machine,
    SL.rack as rack,
    SL.room as room,
    SL.building as building,
    SL.address1 as address1,
    SL.address2 as address2,
    SL.city as city,
    SL.state as state,
    SL.country as country,
    RR.ram as ram
    FROM  rhnServer S
    LEFT OUTER JOIN rhnRam RR on S.id = RR.server_id
    LEFT OUTER JOIN rhnServerNetwork RSN ON S.id = RSN.server_id
    LEFT OUTER JOIN rhnCPU CPU on S.id = CPU.server_id
    LEFT OUTER JOIN rhnServerLocation SL ON S.id = SL.server_id
    LEFT OUTER JOIN rhnServerDmi DMI ON S.id = DMI.server_id
   WHERE  S.id IN (%s)
ORDER BY S.ID
</query>

<query name="system_overview" params="">
  SELECT SERVER_ID AS ID, OUTDATED_PACKAGES, SERVER_NAME, security_errata, bug_errata, enhancement_errata,
          SERVER_ADMINS, GROUP_COUNT, MODIFIED, CHANNEL_LABELS, CHANNEL_ID, HISTORY_COUNT,
          unique_crash_count, total_crash_count, LAST_CHECKIN_DAYS_AGO, PENDING_UPDATES, OS, RELEASE,
          SERVER_ARCH_NAME, LAST_CHECKIN, LOCKED
  FROM  rhnServerOverview
  WHERE  server_id IN (%s)
ORDER BY  UPPER(COALESCE(SERVER_NAME, '(none)')), SERVER_ID
</query>

<query name="system_config_files_with_diffs">
  SELECT ACR.server_id AS ID, count(*) AS config_files_with_differences
    FROM
         (SELECT rSA.server_id, MAX(rA.id) AS action_id
            FROM rhnAction rA
            JOIN rhnServerAction rSA
              ON rSA.action_id = rA.id
            JOIN rhnActionStatus rAS
              ON rAS.id = rSA.status
            JOIN rhnActionType rAT
              ON rAT.id = rA.action_type
           WHERE RSA.server_id in (%s)
             AND rAS.name in ('Completed', 'Failed')
             AND rAT.label = 'configfiles.diff'
           GROUP BY rSA.server_id
         ) X
    JOIN rhnActionConfigRevision ACR
      ON X.server_id = ACR.server_id
    JOIN rhnActionConfigRevisionResult ACRR
      ON ACR.id = ACRR.action_config_revision_id and ACR.action_id = X.action_id
   WHERE ACR.failure_id is null
     AND ACRR.result is not null
GROUP BY ACR.server_id
</query>

<query name="is_virtual_guest" params="">
SELECT vi.virtual_system_id as ID, 1 as virtual_guest FROM rhnVirtualInstance vi WHERE vi.virtual_system_id in (%s)
</query>

<query name="is_virtual_host" params="">
select distinct sgm.server_id as ID, 1 as virtual_host
    from rhnServerGroup sg
        INNER JOIN rhnServerGroupMembers sgm ON sg.id = sgm.server_group_id
            INNER JOIN rhnServerGroupType sgt ON sgt.id = sg.group_type
            where
                sgm.server_id in (%s) and
                    sgt.label='virtualization_host'
union
select VI.host_system_id as ID, 1 as virtual_host
    from rhnVirtualInstance VI
        where VI.host_system_id in (%s)
</query>

<query name="system_overview_most_critical" params="">
 SELECT  SERVER_ID AS ID, SECURITY_ERRATA, BUG_ERRATA, ENHANCEMENT_ERRATA, OUTDATED_PACKAGES, SERVER_NAME,
          SERVER_ADMINS, GROUP_COUNT, MODIFIED, CHANNEL_LABELS, HISTORY_COUNT,
          LAST_CHECKIN_DAYS_AGO, PENDING_UPDATES, OS, RELEASE, SERVER_ARCH_NAME, LAST_CHECKIN, LOCKED
    FROM  rhnServerOverview
   WHERE  server_id IN (%s)
ORDER BY  SECURITY_ERRATA DESC, BUG_ERRATA DESC, ENHANCEMENT_ERRATA DESC
</query>

<query name="virtual_system_overview" params="">
 SELECT  VI.id,
          SERVER_ID as system_id, SECURITY_ERRATA, BUG_ERRATA, ENHANCEMENT_ERRATA, OUTDATED_PACKAGES, SERVER_NAME,
          SERVER_ADMINS, GROUP_COUNT, OV.MODIFIED, CHANNEL_LABELS, CHANNEL_ID, HISTORY_COUNT,
          LAST_CHECKIN_DAYS_AGO, PENDING_UPDATES, OS, RELEASE, SERVER_ARCH_NAME, LAST_CHECKIN, LOCKED
    FROM  rhnVirtualInstance VI, rhnServerOverview OV
   WHERE  VI.id IN (%s)
     AND  (   (    VI.uuid IS NULL
               AND OV.server_id = VI.host_system_id)
           OR OV.server_id = VI.virtual_system_id
           )
ORDER BY  SERVER_ID
</query>

<query name="virtual_system_entitlements" params="" multiple="t">
  SELECT VI.id,
         sgm.server_id as system_id,
         sgt.label AS ENTITLEMENT,
         sgt.id as server_group_type_id,
         sgt.permanent AS entitlement_permanent,
         sgt.is_base AS entitlement_is_base
    FROM rhnServerGroupType sgt,
   rhnServerGroup sg,
   rhnServerGroupMembers sgm,
         rhnVirtualInstance VI
   WHERE VI.id IN (%s)
     AND sgm.server_id = COALESCE(VI.virtual_system_id, VI.host_system_id)
     AND sg.id = sgm.server_group_id
     and sg.group_type = sgt.id

   ORDER BY CASE sgt.is_base WHEN 'Y' THEN 1 WHEN 'N' THEN 2 END, sgt.label
</query>


<query name="in_set" params="user_id, set_label">
select * from (
  SELECT  DISTINCT S.id, S.name
    FROM  rhnServer S, rhnSet ST, rhnUserServerPerms USP
   WHERE  ST.user_id = :user_id
     AND  ST.label = :set_label
     AND  ST.element = S.id
     AND  S.id = USP.server_id
     AND  USP.user_id = :user_id
) X
ORDER BY  UPPER(COALESCE(name, '(none)')), id
</query>

<mode name="virtual_systems_in_set" class="com.redhat.rhn.frontend.dto.VirtualSystemOverview">
<query params="user_id, set_label">
  SELECT
DISTINCT VI.id,
         VI.host_system_id,
         VI.virtual_system_id,
         VI.uuid,
         COALESCE(VII.name, '(none)') AS NAME,
         COALESCE(VIS.name, '(unknown)') AS STATE_NAME,
         COALESCE(VIS.label, 'unknown') AS STATE_LABEL,
         1 AS selectable
    FROM rhnSet ST, rhnVirtualInstance VI
         LEFT OUTER JOIN rhnVirtualInstanceInfo VII ON VI.id = VII.instance_id
         LEFT OUTER JOIN rhnVirtualInstanceState VIS ON VII.state = VIS.id
   WHERE ST.user_id = :user_id
     AND ST.label = :set_label
     AND ST.element = VI.id
ORDER BY NAME, VI.virtual_system_id, VI.uuid DESC
  </query>
  <elaborator name="virtual_system_overview"/>
  <elaborator name="system_config_files_with_diffs" />
  <elaborator name="virtual_system_entitlements" />
</mode>

<query name="system_package_data_from_set" params="user_id, package_set_label">
select * from (
SELECT  DISTINCT S.id SYSTEM_ID, S.name SYSTEM_NAME, PN.name || '-' || PE.evr.as_vre_simple() NVRE
  FROM  rhnServer S,
        rhnPackageEVR PE,
        rhnPackageName PN,
        rhnServerPackage SP
 WHERE  SP.server_id IN (%s)
   AND  SP.name_id = PN.id
   AND  PN.id IN (SELECT element FROM rhnSet WHERE user_id = :user_id AND label = :package_set_label)
   AND  SP.evr_id = PE.id
   AND  SP.server_id = S.id
) X
ORDER BY UPPER(X.system_name)
</query>

<mode name="system_installed_packages">
  <query params="sid">
SELECT PN.name,
       PE.version,
       PE.release,
       coalesce(PE.epoch, ' ') as epoch,
       PA.name as arch,
       SP.installtime
  FROM rhnServerPackage SP inner join
       rhnPackageName PN on PN.id = SP.name_id inner join
       rhnPackageEVR PE on PE.id = SP.evr_id left join
       rhnPackageArch PA on SP.package_arch_id = PA.id
 WHERE SP.server_id = :sid
ORDER BY PN.name, PE.evr
  </query>
</mode>

<mode name="system_installed_packages_expanded">
  <query params="sid">
SELECT PN.name,
       PE.version,
       PE.release,
       coalesce(PE.epoch, ' ') as epoch,
       PA.name as arch,
       SP.installtime,
       PE.id evr_id,
       PA.id arch_id,
       PN.id name_id
  FROM rhnServerPackage SP inner join
       rhnPackageName PN on PN.id = SP.name_id inner join
       rhnPackageEVR PE on PE.id = SP.evr_id left join
       rhnPackageArch PA on SP.package_arch_id = PA.id
 WHERE SP.server_id = :sid
ORDER BY PN.name, PE.evr
  </query>
</mode>

<mode name="list_server_software_crashes" class="com.redhat.rhn.frontend.dto.SoftwareCrashDto">
  <query params="server_id">
SELECT id,
       crash,
       count,
       component,
       modified
  FROM rhnServerCrash
 WHERE server_id = :server_id
  </query>
</mode>

<callable-mode name="delete_server">
    <query params="server_id">
    { call delete_server(:server_id) }
    </query>
</callable-mode>

<callable-mode name="snapshot_server">
    <query params="server_id, reason">
    { call rhn_server.snapshot_server(:server_id, :reason) }
    </query>
</callable-mode>

<callable-mode name="add_tag_to_snapshot">
    <query params="snapshot_id, org_id, tag_name">
    { call rhn_server.tag_snapshot(:snapshot_id, :org_id, :tag_name) }
    </query>
</callable-mode>

<callable-mode name="bulk_add_tag_to_snapshot">
    <query params="set_label, org_id, tag_name, user_id">
    { call rhn_server.bulk_snapshot_tag(:org_id, :tag_name, :set_label, :user_id) }
    </query>
</callable-mode>

<callable-mode name="remove_tag_from_snapshot">
    <query params="server_id, tag_id">
    { call rhn_server.tag_delete(:server_id, :tag_id) }
    </query>
</callable-mode>

<callable-mode name="can_entitle_server">
  <query params="sid, entitlement">
    {:retval = call rhn_entitlements.can_entitle_server(:sid, :entitlement)}
  </query>
</callable-mode>


<callable-mode name="delete_action_for_system">
  <query params="action_id, server_id">
      {call rhn_server.remove_action(:server_id, :action_id)}
  </query>

</callable-mode>

<callable-mode name="insert_into_servergroup_maybe">
  <query params="server_id, server_group_id">
      {:retval = call rhn_server.insert_into_servergroup_maybe(:server_id, :server_group_id)}
  </query>
</callable-mode>

<callable-mode name="delete_from_servergroup">
  <query params="server_id, server_group_id">
      {call rhn_server.delete_from_servergroup(:server_id, :server_group_id)}
  </query>
</callable-mode>

<callable-mode name="update_needed_cache">
  <query params="server_id">
      {call rhn_server.update_needed_cache(:server_id)}
  </query>
</callable-mode>

<mode name="actions_count">
  <query params="server_id">
SELECT count(distinct SA.action_id) as COUNT
  FROM rhnServerAction SA, rhnActionStatus AST
 WHERE SA.server_id = :server_id
   AND AST.id = SA.status
   AND AST.name = 'Queued'
  </query>
</mode>

<mode name="package_actions_count">
  <query params="server_id">
SELECT count(A.id) as COUNT
  FROM rhnServerAction SA, rhnActionStatus AST, rhnActionType AT, rhnAction A
 WHERE SA.server_id = :server_id
   AND AST.id = SA.status
   AND AST.name = 'Queued'
   AND A.id = SA.action_id
   AND AT.id = A.action_type
   AND AT.label IN('packages.refresh_list', 'packages.update',
                   'packages.remove', 'errata.update', 'packages.delta')
  </query>
</mode>

<mode name="lookup_kickstart" class="com.redhat.rhn.frontend.dto.kickstart.KickstartSessionDto">
  <query params="org_id, sid">
SELECT KSS.id, KSS.created, KSS.modified, KSSS.label AS state
  FROM rhnKickstartSession KSS, rhnKickstartSessionState KSSS
 WHERE KSS.org_id = :org_id
   AND (KSS.old_server_id = :sid OR KSS.new_server_id = :sid)
   AND KSSS.id = KSS.state_id
  </query>
</mode>

<mode name="lookup_capability" class="com.redhat.rhn.frontend.dto.Capability">
  <query params="sid, name">
SELECT id, name
  FROM rhnClientCapabilityName ccn,
       rhnClientCapability cc
 WHERE cc.server_id = :sid
   AND ccn.name = :name
   AND cc.capability_name_id = ccn.id
  </query>
</mode>


<mode name="compatible_with_server">
  <query params="sid, user_id">
   SELECT S.id, S.name
  FROM rhnServer S,
       rhnServer SBase
 WHERE S.org_id = SBase.org_id
   AND SBase.id = :sid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms WHERE user_id = :user_id AND server_id = S.id)
   AND S.server_arch_id = SBase.server_arch_id
   AND REGEXP_REPLACE(S.release, '([^0-9]).*', '') = REGEXP_REPLACE(SBase.release, '([^0-9]).*', '')
   AND S.id != :sid
   AND EXISTS(SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = S.id AND SFV.label = 'ftr_profile_compare')
ORDER BY UPPER(S.name)
   </query>
</mode>

<query name="entitlements" params="" multiple="t">
  SELECT SEV.server_id AS ID,
         SEV.label AS ENTITLEMENT,
         SEV.server_group_type_id,
         SEV.permanent AS entitlement_permanent,
         SEV.is_base AS entitlement_is_base
    FROM rhnServerEntitlementView SEV
   WHERE SEV.server_id IN (%s)
ORDER BY CASE SEV.is_base WHEN 'Y' THEN 1 WHEN 'N' THEN 2 END, SEV.label
</query>

<mode name="is_satellite">
  <query params="sid">
SELECT  1
  FROM  rhnSatelliteInfo SI
 WHERE  SI.server_id=:sid
  </query>
</mode>

<mode name="is_proxy">
  <query params="sid">
SELECT  1
  FROM  rhnProxyInfo PI
 WHERE  PI.server_id=:sid
  </query>
</mode>

<callable-mode name="update_perms_for_server">
  <query params="sid">
    { call rhn_cache.update_perms_for_server(:sid) }
  </query>
</callable-mode>

<mode name="is_available_to_user">
  <query params="sid, uid">
SELECT 1
  FROM rhnUserServerPerms USP
 WHERE USP.user_id = :uid
   AND USP.server_id = :sid
  </query>
</mode>

<callable-mode name="entitle_server">
  <query params="sid, entitlement">
{call rhn_entitlements.entitle_server(:sid, :entitlement)}
  </query>
</callable-mode>

<callable-mode name="unentitle_server">
  <query params="sid">
{call rhn_entitlements.unentitle_server(:sid)}
  </query>
</callable-mode>

<callable-mode name="remove_server_entitlement">
  <query params="sid, entitlement">
{call rhn_entitlements.remove_server_entitlement(:sid, :entitlement)}
  </query>
</callable-mode>

<mode name="systems_in_set_with_channel">
  <query params="user_id, channel_id">
      SELECT S.name, S.id
        FROM rhnServer S, rhnServerChannel SC, rhnSet ST
        WHERE
            ST.label = 'system_list'
            AND ST.user_id = :user_id
            AND ST.element = SC.server_id
            AND SC.channel_id = :channel_id
            AND SC.server_id = S.id
  </query>
</mode>

<mode name="hardware_device_by_id" class="com.redhat.rhn.frontend.dto.HardwareDeviceDto">
    <query params="hw_id">
        SELECT RD.id,
            RD.server_id,
            RD.device,
            RD.driver,
            RD.description,
            RD.prop1 as vendor_id,
            RD.prop2 as device_id,
            RD.prop3 as sub_vendor_id,
            RD.prop4 as sub_device_id
          FROM rhnDevice RD
         WHERE
            RD.id = :hw_id
    </query>
</mode>

<mode name="has_package_available">
    <query params="server_id, nid, eid, aid">
        SELECT P.id
        from rhnPackage P inner join
                 rhnChannelPackage CP on CP.package_id = P.id  inner join
                 rhnServerChannel SC on SC.channel_id = CP.channel_id
        where    SC.server_id = :server_id
                AND  P.name_id = :nid
                AND  P.package_arch_id = :aid
                AND  P.evr_id = :eid
    </query>
</mode>

<mode name="has_package_available_no_arch">
    <query params="server_id, nid, eid">
        SELECT P.id
        from rhnPackage P inner join
                 rhnChannelPackage CP on CP.package_id = P.id  inner join
                 rhnServerChannel SC on SC.channel_id = CP.channel_id
        where    SC.server_id = :server_id
                AND  P.name_id = :nid
                AND  P.evr_id = :eid
    </query>
</mode>

<mode name="list_installed_packages_for_name">
    <query params="sid, name">
        SELECT SP.name_id, SP.evr_id, SP.PACKAGE_ARCH_ID as arch_id
        from rhnServerPackage SP inner join
                        rhnPackageName PN on SP.name_id = PN.id
        where    SP.server_id = :sid
                AND  PN.name = :name
    </query>
</mode>


<mode name="duplicate_system_ids_ip" class="com.redhat.rhn.frontend.dto.NetworkDto">
    <query params="uid, inactive_date">
        SELECT distinct S.id as id, S.name as name, sa4.address as key, si.checkin as last_checkin,
                 (select count(*)  from rhnServerInfo Si2 where  S.id = Si2.server_id and Si2.checkin &lt; :inactive_date) as inactive
        from rhnServer S inner join
                 rhnUserServerPerms USP on S.id = USP.server_id inner join
                 rhnServerNetInterface NI on NI.server_id = S.id inner join
                 rhnServerInfo si on si.server_id = S.id inner join
             rhnServerNetAddress4 sa4 on sa4.interface_id = NI.id inner join
                 ( Select sa4_2.address, count(distinct NI2.server_id) as syscount
                        from rhnServerNetInterface NI2 inner join
                    rhnUserServerPerms USP2 on NI2.server_id = USP2.server_id inner join
                    rhnServerNetAddress4 sa4_2 on sa4_2.interface_id = ni2.id
                        where USP2.user_id = :uid and
                                sa4_2.address not in(%s) and NI2.name not like 'vnet%' and NI2.name not like 'virbr%'
                                group by sa4_2.address having count(distinct NI2.server_id) > 1) SUMM on SUMM.address = sa4.address
        where USP.user_id = :uid
    </query>
</mode>

<mode name="duplicate_system_ids_ip_key" class="com.redhat.rhn.frontend.dto.SystemOverview">
    <query params="uid, key">
        SELECT distinct S.id as id, S.name as name, si.checkin as last_checkin, 1 AS selectable
        from rhnServer S
                        inner join rhnUserServerPerms USP on S.id = USP.server_id
                        inner join rhnServerNetInterface NI on NI.server_id = S.id
                        inner join rhnServerInfo si on si.server_id = S.id
                inner join rhnServerNetAddress4 sa4 on sa4.interface_id = NI.id
        where
                 USP.user_id = :uid
     and sa4.address = :key
    </query>
</mode>

<mode name="duplicate_system_ids_ipv6" class="com.redhat.rhn.frontend.dto.NetworkDto">
    <query params="uid, inactive_date">
        select distinct s.id as id,
               s.name as name,
               sa6.address as key,
               si.checkin as last_checkin,
               (select count(*)
                  from rhnserverinfo si2
                 where s.id = si2.server_id and
                       si2.checkin &lt; :inactive_date) as inactive
          from rhnserver s inner join
               rhnuserserverperms usp on s.id = usp.server_id inner join
               rhnservernetinterface ni on ni.server_id = s.id inner join
               rhnserverinfo si on si.server_id = s.id inner join
               rhnservernetaddress6 sa6 on sa6.interface_id = ni.id inner join
              (select sa6_2.address,
                      sa6_2.scope,
                      count(distinct ni2.server_id) as syscount
                 from rhnservernetinterface ni2 inner join
                      rhnuserserverperms usp2 on ni2.server_id = usp2.server_id inner join
                      rhnservernetaddress6 sa6_2 on sa6_2.interface_id = ni2.id
                where usp2.user_id = :uid and
                      sa6_2.address not in(%s) and
                      ni2.name not like 'vnet%' and ni2.name not like 'virbr%'
                                group by sa6_2.address, sa6_2.scope
               having count(distinct ni2.server_id) > 1) summ on summ.address = sa6.address and summ.scope = sa6.scope
         where usp.user_id = :uid
    </query>
</mode>

<mode name="duplicate_system_ids_ipv6_key" class="com.redhat.rhn.frontend.dto.SystemOverview">
    <query params="uid, key">
        select distinct s.id as id,
               s.name as name,
               si.checkin as last_checkin,
               1 as selectable
          from rhnserver s inner join
               rhnuserserverperms usp on s.id = usp.server_id inner join
               rhnservernetinterface ni on ni.server_id = s.id inner join
               rhnserverinfo si on si.server_id = s.id inner join
               rhnservernetaddress6 sa6 on sa6.interface_id = ni.id
         where usp.user_id = :uid and
               sa6.address = :key
    </query>
</mode>

<mode name="duplicate_system_ids_mac" class="com.redhat.rhn.frontend.dto.NetworkDto">
    <query params="uid, inactive_date">
        SELECT distinct S.id as id, S.name as name, NI.hw_addr as key, si.checkin as last_checkin,
                 (select count(*)  from rhnServerInfo Si2 where  S.id = Si2.server_id and Si2.checkin &lt; :inactive_date) as inactive
        from rhnServer S inner join
                 rhnUserServerPerms USP on S.id = USP.server_id inner join
                 rhnServerNetInterface NI on NI.server_id = S.id inner join
                 rhnServerInfo si on si.server_id = S.id inner join
                 ( Select NI2.hw_addr, count(distinct NI2.server_id) as syscount
                        from rhnServerNetInterface NI2 inner join
                                rhnUserServerPerms USP2 on NI2.server_id = USP2.server_id
                        where USP2.user_id = :uid and
                                NI2.hw_addr not in (%s)
                        group by NI2.hw_addr having count(distinct NI2.server_id) > 1) SUMM on SUMM.hw_addr = NI.hw_addr
        where USP.user_id = :uid
    </query>
</mode>


<mode name="duplicate_system_ids_mac_key" class="com.redhat.rhn.frontend.dto.SystemOverview">
    <query params="uid, key">
        SELECT distinct S.id as id, S.name as name, si.checkin as last_checkin, 1 AS selectable
        from rhnServer S
                        inner join rhnUserServerPerms USP on S.id = USP.server_id
                        inner join rhnServerNetInterface NI on NI.server_id = S.id
                        inner join rhnServerInfo si on si.server_id = S.id
        where
                 USP.user_id = :uid
                 and NI.hw_addr = :key
    </query>
</mode>



<mode name="duplicate_system_ids_hostname" class="com.redhat.rhn.frontend.dto.NetworkDto">
    <query params="uid, inactive_date">
        SELECT distinct S.id as id, S.name as name, lower(NI.hostname) as key, si.checkin as last_checkin,
               (select count(*)  from rhnServerInfo Si2 where  S.id = Si2.server_id and Si2.checkin &lt; :inactive_date) as inactive
        from   rhnServer S
            inner join rhnUserServerPerms USP on S.id = USP.server_id
            inner join rhnServerNetwork NI on NI.server_id = S.id
            inner join rhnServerInfo si on si.server_id = S.id
            inner join (
                Select lower(NI2.hostname) as hostname, count(NI2.server_id) as syscount
                from   rhnServerNetwork NI2
                    inner join rhnUserServerPerms USP2 on NI2.server_id = USP2.server_id
                where USP2.user_id = :uid
                group by lower(NI2.hostname) having count(NI2.server_id) > 1) SUMM on SUMM.hostname = lower(NI.hostname)
        where USP.user_id = :uid
    </query>
</mode>


<mode name="duplicate_system_ids_hostname_key" class="com.redhat.rhn.frontend.dto.SystemOverview">
    <query params="uid, key">
        SELECT distinct S.id as id, S.name as name, si.checkin as last_checkin, 1 AS selectable
        from rhnServer S
            inner join rhnUserServerPerms USP on S.id = USP.server_id
            inner join rhnServerNetwork NI on NI.server_id = S.id
            inner join rhnServerInfo si on si.server_id = S.id
        where USP.user_id = :uid
        and   lower(NI.hostname) = :key
    </query>
</mode>

<mode name="server_notes">
  <query params="sid">
    select
      id,
      server_id,
      subject,
      note,
      modified
    from
      rhnServerNotes
    where server_id = :sid
  </query>
</mode>

<mode name="note_by_id_and_server">
  <query params="nid,sid">
    select
      id,
      server_id,
      subject,
      note,
      creator,
      TO_CHAR(created, 'YYYY-MM-DD') as created,
      TO_CHAR(modified, 'YYYY-MM-DD') as modified
    from
      rhnServerNotes
    where server_id = :sid and id = :nid
  </query>
</mode>

<mode name="system_channel_subscriptions">
    <query params="sid">
    select c.id,
           c.name
      from rhnChannel c,
           rhnServerChannel sc
     where sc.server_id = :sid and
           sc.channel_id = c.id
  order by c.name
    </query>
</mode>

<write-mode name="delete_note">
  <query params="id,server_id">
delete from rhnServerNotes where id = :id and server_id = :server_id
  </query>
</write-mode>

<!-- Lifted from web/modules/rhn/RHN/DB/DataSource/xml/System_queries.xml with slight changes -->
<mode name="users_systems_with_value_for_key">
  <query params="user_id, cikid">
SELECT S.id,
       S.name AS NAME,
       SCDV.value,
       TO_CHAR(SI.checkin, 'YYYY-MM-DD') as LAST_CHECKIN
  FROM rhnServer S,
       rhnServerCustomDataValue SCDV,
       rhnUserServerPerms USP,
       rhnServerInfo SI
 WHERE USP.user_id = :user_id
   AND USP.server_id = SCDV.server_id
   AND SI.server_id = S.id
   AND SCDV.key_id = :cikid
   AND USP.server_id = S.id
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="system_config_files_with_diffs" />
</mode>

<mode name="extra_packages_systems_count"
      class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="userid, orgid">
select s.id as id,
       s.name as name,
       1 as selectable,
       count(sp.name_id) as extra_pkg_count
       from rhnServer s
  join rhnUserServerPerms usp on (usp.server_id = s.id and
                                  usp.user_id = :userid)
  join rhnServerPackage sp on (s.id = sp.server_id)
       left outer join (select sc.server_id,
                               cp.package_id,
                               p.name_id,
                               p.evr_id,
                               p.package_arch_id
                          from rhnPackage p,
                               rhnServerChannel sc,
                               rhnServerPackage sp2,
                               rhnChannelPackage cp,
                               rhnUserServerPerms usp2
                         where cp.package_id = p.id
                           and cp.channel_id = sc.channel_id
                           and sc.server_id = usp2.server_id
                           and usp2.user_id = :userid
                           and sc.server_id = sp2.server_id
                           and sp2.name_id = p.name_id
                           and sp2.evr_id = p.evr_id
                           and sp2.package_arch_id = p.package_arch_id
                       ) scp on (scp.server_id = sp.server_id and
                                 sp.name_id = scp.name_id and
                                 sp.evr_id = scp.evr_id and
                                 sp.package_arch_id = scp.package_arch_id)
 where scp.package_id is null and
       s.org_id = :orgid
 group by s.name, s.id
 order by name, id
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="system_events_history"
  class="com.redhat.rhn.frontend.dto.SystemEventDto">
  <query params="sid, oid">
select event_id as id,
       to_char(all_events.created, 'YYYY-MM-DD HH24:MI:SS') created,
       to_char(all_events.picked_up, 'YYYY-MM-DD HH24:MI:SS') picked_up,
       to_char(all_events.completed, 'YYYY-MM-DD HH24:MI:SS') completed,
       all_events.summary,
       all_events.history_type,
       all_events.history_type_name,
       all_events.history_status,
       case when action_details.org_id != :oid then 0
         else 1 end as history_visible
  from (select SH.id event_id,
               SH.summary summary,
               to_timestamp(NULL, NULL) as created,
               to_timestamp(NULL, NULL) as picked_up,
               SH.created as completed,  -- view this as the "completed" date for sorting reasons
               NULL as history_status,
               NULL as history_type,
               NULL as history_type_name
          from rhnServerHistory SH
         where SH.server_id = :sid
         union
        select SA.action_id event_id,
               AType.name || ' scheduled by ' || NVL(U.login, '(none)') as summary,
               SA.created,
               SA.pickup_time as picked_up,
               SA.completion_time as completed,
               AStat.name as history_status,
               AType.label as history_type,
               AType.name as history_type_name
          from rhnActionType AType,
               rhnActionStatus AStat,
               rhnAction A
     left join web_contact U
            on U.id = A.scheduler,
               rhnServerAction SA
         where SA.server_id = :sid
           and SA.action_id = A.id
           and ATYPE.id = A.action_type
           and AStat.id = SA.status
           and AStat.id IN (1, 2, 3)
       ) all_events
  left join rhnaction action_details on event_id = action_details.id
order by completed desc, picked_up desc, all_events.created desc, event_id desc

  </query>
</mode>

<mode name="system_events_history_count_pending">
  <query params="sid">
select count(action_id) as count
  from rhnServerAction
 where server_id = :sid
   and status = 0
  </query>
</mode>

<mode name="system_events_pending"
  class="com.redhat.rhn.frontend.dto.SystemPendingEventDto">
  <query params="sid">
select SA.action_id as ID,
               AType.name || ' scheduled by ' || NVL(U.login, '(none)') as summary,
               to_char(A.earliest_action, 'YYYY-MM-DD HH24:MI:SS') as scheduled_for,
               AType.label as history_type,
               AType.name as history_type_name,
               A.prerequisite as prereq_aid,
               A.name as action_name
          from rhnActionType AType,
               rhnActionStatus AStat,
               rhnAction A left outer join
               web_contact U
            on U.id = A.scheduler,
               rhnServerAction SA
         where SA.server_id = :sid
           and SA.action_id = A.id
           and AType.id = A.action_type
           and AStat.id = SA.status
           and AStat.id = 0
order by scheduled_for desc, prereq_aid nulls first
  </query>
</mode>

<mode name="pending_actions_to_delete_in_set"
  class="com.redhat.rhn.frontend.dto.SystemPendingEventDto">
  <query params="sid, user_id, set_label">
<!--select ST.element as id
  from rhnSet ST
 where ST.user_id = :user_id
   and ST.label = :set_label-->
select SA.action_id as ID,
               AType.name || ' scheduled by ' || NVL(U.login, '(none)') as summary,
               to_char(A.earliest_action, 'YYYY-MM-DD HH24:MI:SS') as scheduled_for,
               AType.label as history_type,
               AType.name as history_type_name,
               A.prerequisite as prereq_aid,
               A.name as action_name
          from rhnActionType AType,
               rhnActionStatus AStat,
               rhnAction A left outer join
               web_contact U
            on U.id = A.scheduler,
               rhnServerAction SA
         where SA.server_id = :sid
           and SA.action_id = A.id
           and AType.id = A.action_type
           and AStat.id = SA.status
           and AStat.id = 0
           and exists (select 1 from rhnset where user_id = :user_id and label = :set_label and element = SA.action_id)
order by scheduled_for desc, prereq_aid nulls first
  </query>
</mode>

<mode name="tags_for_system"
  class="com.redhat.rhn.frontend.dto.SnapshotTagDto">
  <query params="sid">
SELECT ST.tag_id AS ID,
       TN.name,
       SS.id AS SS_ID,
       TO_CHAR(ST.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
       1 AS SELECTABLE
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag ST,
       rhnSnapshot SS
 WHERE SS.server_id = :sid
   AND SS.id = ST.snapshot_id
   AND ST.tag_id = T.id
   AND T.name_id = TN.id
ORDER BY UPPER(TN.name)
  </query>
</mode>

<mode name="tags_for_system_and_snapshot"
  class="com.redhat.rhn.frontend.dto.SnapshotTagDto">
  <query params="sid, ss_id">
SELECT ST.tag_id AS ID,
       TN.name,
       SS.id AS SS_ID,
       TO_CHAR(ST.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
       1 AS SELECTABLE
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag ST,
       rhnSnapshot SS
 WHERE SS.server_id = :sid
   AND SS.id = ST.snapshot_id
   AND ST.tag_id = T.id
   AND T.name_id = TN.id
   AND SS.id = :ss_id
ORDER BY UPPER(TN.name)
  </query>
</mode>

<mode name="snapshot_tags_in_set"
  class="com.redhat.rhn.frontend.dto.SnapshotTagDto">
  <query params="sid, user_id, set_label">
SELECT ST.tag_id AS ID,
       TN.name,
       SS.id AS SS_ID,
       TO_CHAR(ST.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag ST,
       rhnSnapshot SS,
       rhnSet S
 WHERE SS.server_id = :sid
   AND SS.id = ST.snapshot_id
   AND ST.tag_id = T.id
   AND T.name_id = TN.id
   AND T.id = S.element
   AND S.user_id = :user_id
   AND S.label = :set_label
ORDER BY UPPER(TN.name)
  </query>
</mode>

<mode name="system_pending_actions">
  <query params="sid">
select a.id
  from rhnAction a
  join rhnServerAction sa
    on sa.action_id = a.id
 where sa.server_id = :sid
   and sa.status = 0
   and a.prerequisite is null
 order by a.id
  </query>
</mode>

<mode name="count_systems_in_set_without_entitlement">
  <query params="user_id, set_label, entitlement_label">
    SELECT COUNT(*) as count
      FROM rhnSet
        LEFT JOIN rhnServerEntitlementView ON rhnSet.element = rhnServerEntitlementView.server_id
      WHERE rhnSet.user_id = :user_id AND
        rhnSet.label = :set_label AND
        (rhnServerEntitlementView.is_base IS NULL OR rhnServerEntitlementView.is_base = 'Y') AND
        (rhnServerEntitlementView.label IS NULL OR rhnServerEntitlementView.label &lt;&gt; :entitlement_label)
  </query>
</mode>

<mode name="count_systems_in_set_without_feature">
  <query params="user_id, set_label, feature_label">
    SELECT COUNT(*) as count
      FROM rhnSet
      WHERE
        rhnSet.user_id = :user_id AND
        rhnSet.label = :set_label AND (
          SELECT COUNT(*)
            FROM rhnServerFeaturesView
            WHERE rhnSet.element = rhnServerFeaturesView.server_id
              AND rhnServerFeaturesView.label = :feature_label
        ) = 0
  </query>
</mode>

<mode name="entitled_systems_in_set" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id, set_label">
    SELECT rhnServer.id, rhnServer.name
      FROM rhnServerEntitlementView
        JOIN rhnSet ON rhnServerEntitlementView.server_id = rhnSet.element
        JOIN rhnServer ON rhnServerEntitlementView.server_id = rhnServer.id
      WHERE rhnSet.user_id = :user_id AND
        rhnSet.label = :set_label AND
        rhnServerEntitlementView.label IN (%s)
  </query>
</mode>

<mode name="systems_in_set_with_tag">
  <query params="user_id, tag_id">
SELECT * FROM (
SELECT DISTINCT S.id,
       S.name AS SERVER_NAME,
       SS.id AS SNAPSHOT_ID,
       SS.reason AS SNAPSHOT_REASON,
       TO_CHAR(STag.created, 'YYYY-MM-DD HH24:MI:SS') AS DATE_TAG_APPLIED
  FROM rhnServer S,
       rhnSnapshotTag STag,
       rhnSnapshot SS,
       rhnClientCapabilityName CCN,
       rhnClientCapability CC,
       rhnSet ST,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND USP.server_id = ST.element
   AND rhn_server.system_service_level(USP.server_id, 'management') &gt; 0
   AND USP.server_id = CC.server_id
   AND CC.capability_name_id = CCN.id
   AND CCN.name = 'packages.runTransaction'
   AND USP.server_id = SS.server_id
   AND SS.id = STag.snapshot_id
   AND STag.tag_id = :tag_id
   AND USP.server_id = S.id) X
ORDER BY UPPER(COALESCE(X.SERVER_NAME, '(none)')), X.ID
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="entitled_systems_in_set" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="user_id, set_label">
    SELECT rhnServer.id, rhnServer.name
      FROM rhnServerEntitlementView
        JOIN rhnSet ON rhnServerEntitlementView.server_id = rhnSet.element
        JOIN rhnServer ON rhnServerEntitlementView.server_id = rhnServer.id
      WHERE rhnSet.user_id = :user_id AND
        rhnSet.label = :set_label AND
        rhnServerEntitlementView.label IN (%s)
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements" />
</mode>

<write-mode name="bulk_remove_custom_values">
  <query params="user_id, set_label, key_id">
DELETE FROM rhnServerCustomDataValue
      WHERE server_id IN (SELECT element FROM rhnSet WHERE user_id = :user_id AND label = :set_label)
        AND rhn_server.system_service_level(server_id, 'management') = 1
        AND key_id = :key_id
  </query>
</write-mode>

<callable-mode name="bulk_set_custom_values">
    <query params="key_label, value, set_label, user_id">
    {:retval = call rhn_server.bulk_set_custom_value(:key_label, :value, :set_label, :user_id)}
    </query>
</callable-mode>

<callable-mode name="reset_user_system_preference_bulk">
  <query params="user_id, pref">
DELETE FROM rhnUserServerPrefs
 WHERE user_id = :user_id
   AND name = :pref
   AND server_id IN
       (SELECT element FROM rhnSet WHERE user_id = :user_id AND label = 'system_list')
  </query>
</callable-mode>

<callable-mode name="set_user_system_preference_bulk">
  <query params="user_id, pref, value">
INSERT INTO rhnUserServerPrefs
(user_id, server_id, name, value)
SELECT :user_id, element, :pref, :value FROM rhnSet WHERE user_id = :user_id AND label = 'system_list'
  </query>
</callable-mode>

<callable-mode name="set_auto_update_bulk">
  <query params="user_id, value">
UPDATE rhnServer S
   SET auto_update = :value
 WHERE S.id IN (SELECT element FROM rhnSet WHERE user_id = :user_id AND label = 'system_list')
   AND EXISTS (SELECT 1 FROM rhnEntitledServers WHERE id = S.id)
  </query>
</callable-mode>

<mode name="unscheduled_relevant_to_system_set">
  <query params="user_id">
SELECT DISTINCT E.update_date, E.id
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND ST.element = SNEC.server_id
   AND SNEC.errata_id = E.id
   AND NOT EXISTS (SELECT SA.server_id
                     FROM rhnActionErrataUpdate AEU,
                          rhnServerAction SA,
                          rhnActionStatus AST
                    WHERE SA.server_id = ST.element
                      AND SA.status = AST.id
                      AND AST.name IN('Queued', 'Picked Up')
                      AND AEU.action_id = SA.action_id
                      AND AEU.errata_id = E.id )
ORDER BY E.update_date, E.id
  </query>
</mode>

<mode name="clients_through_proxy" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="sid">
SELECT SP.server_id ID, S.name
  FROM rhnServer S, rhnServerPath SP
 WHERE SP.proxy_server_id = :sid
   AND S.id = SP.server_id
  </query>
  <elaborator name="system_overview"/>
  <elaborator name="entitlements"/>
</mode>

<write-mode name="remove_activation_keys">
  <query params="sid">
    delete from rhnActivationKey ak
     where 1=1
       and ak.reg_token_id in (
            select t.id
              from rhnregtoken t
             where 1=1
               and ak.reg_token_id = t.id
               and t.server_id = :sid
            )
  </query>
</write-mode>

<write-mode name="remove_activation_key">
  <query params="token">
    delete from rhnActivationKey ak
     where 1=1
       and ak.token = :token
  </query>
</write-mode>

</datasource_modes>

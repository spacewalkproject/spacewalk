<datasource_modes>

<mode name="kickstarts_for_org" class="com.redhat.rhn.frontend.dto.kickstart.KickstartDto">
  <query params="org_id">
  SELECT KS.id, KS.org_id, KS.label, KS.is_org_default,
         KS.active,  KSD.kstree_id, KT.label as tree_label,KS.cobbler_id,
         KS.ks_type as kickstart_type, KS.update_type
    FROM rhnKickstartDefaults KSD, rhnKSData KS, rhnKickstartableTree KT
   WHERE KS.org_id = :org_id
     AND KSD.kickstart_id = KS.id
     AND KSD.kstree_id = KT.id
  ORDER BY KS.label, KS.id
  </query>
</mode>

<mode name="kickstart_trees_for_org" class="com.redhat.rhn.frontend.dto.kickstart.KickstartableTreeDto">
  <query params="org_id">
  SELECT KT.id, KT.label kickstartLabel, C.name channelLabel
  FROM rhnKickstartableTree KT, rhnChannel C
  WHERE KT.channel_id = C.id and KT.org_id = :org_id
  ORDER BY KT.label
  </query>
</mode>

<mode name="kickstarts_channels_for_org" class="com.redhat.rhn.frontend.dto.kickstart.KickstartChannelDto">
  <query params="org_id,prim_arch_id,sec_arch_id">
  SELECT DISTINCT KS.id, KS.org_id, KS.label,
         KS.active,  KSD.kstree_id,KS.cobbler_id ,KT.label as tree_label,
         c.label as channel_label,
         KS.ks_type as kickstart_type
    FROM rhnKickstartDefaults KSD
         inner join rhnKSData KS on KSD.kickstart_id = KS.id
         inner join rhnKickstartableTree KT on KSD.kstree_id = KT.id
         left join rhnKickstartVirtualizationType KVT on KVT.id = KSD.virtualization_type
         inner join rhnChannel C on KT.channel_id = C.id
   WHERE KS.org_id = :org_id
     AND KS.active = 'Y'
     AND ( C.channel_arch_id = :prim_arch_id OR C.channel_arch_id = :sec_arch_id )
     AND (  KVT.label = 'none'
         OR KVT.label = 'para_host'
         OR KVT.label IS NULL)
     AND KS.cobbler_id IS NOT NULL
ORDER BY KS.label, KS.id
  </query>
</mode>

<mode name="virtual_kickstarts_channels_for_org" class="com.redhat.rhn.frontend.dto.kickstart.KickstartChannelDto">
  <query params="org_id,prim_arch_id,sec_arch_id">
  SELECT DISTINCT KS.id, KS.org_id, KS.label,KS.cobbler_id,
         KS.active,  KSD.kstree_id, c.label as channel_label,
         KS.ks_type as kickstart_type
    FROM rhnKickstartDefaults KSD, rhnKSData KS, rhnKickstartableTree KT, rhnChannel C, rhnKickstartVirtualizationType KVT
   WHERE KS.org_id = :org_id
     AND KS.active = 'Y'
     AND KSD.kickstart_id = KS.id
     AND KSD.kstree_id = KT.id
     AND KT.channel_id = C.id
     AND ( C.channel_arch_id = :prim_arch_id OR C.channel_arch_id = :sec_arch_id )
     AND KSD.virtualization_type = KVT.id
     AND KVT.label not in ('none','para_host')
     AND KS.cobbler_id IS NOT NULL
ORDER BY KS.label, KS.id
  </query>
</mode>

<mode name="scripts_for_kickstart" class="com.redhat.rhn.domain.kickstart.KickstartScript">
  <query params="kickstart_id">
  SELECT KS.id, KS.script_type, KS.chroot, KS.interpreter, KS.script_name, KS.position
    FROM rhnKickstartScript KS
  WHERE KS.kickstart_id = :kickstart_id
  </query>
</mode>


<mode name="org_ks_ip_ranges" class="com.redhat.rhn.frontend.dto.kickstart.KickstartIpRangeDto">
  <query params="org_id">
SELECT KSIPR.kickstart_id AS id, KS.label, KSIPR.min,
       KSIPR.max, KSIPR.org_id
  FROM rhnKickstartIPRange KSIPR, rhnKSData KS
 WHERE KSIPR.org_id = :org_id
   AND KS.id = KSIPR.kickstart_id
ORDER BY KSIPR.min
  </query>
</mode>

<mode name="org_ks_ip_ranges_for_ip" class="com.redhat.rhn.frontend.dto.kickstart.KickstartIpRangeDto">
  <query params="org_id, ip">
SELECT KSIPR.kickstart_id AS id, KS.label, KSIPR.org_id, KSIPR.min, KSIPR.max
  FROM rhnKickstartIPRange KSIPR, rhnKSData KS
 WHERE KSIPR.org_id = :org_id
   AND KSIPR.min &lt;= :ip
   AND KSIPR.max &gt;= :ip
   AND KS.id = KSIPR.kickstart_id
ORDER BY KSIPR.min
  </query>
</mode>

<mode name="systems_currently_kickstarted_for_org"
     class="com.redhat.rhn.frontend.dto.kickstart.KickstartOverviewSystemsDto">
  <query params="org_id">
  SELECT KSD.label,
         KSST.description,
         KSS.old_server_id,
         KSS.new_server_id,
         KSS.client_ip,
         (SELECT MAX(time)
            FROM rhnKickstartSessionHistory KSH
           WHERE KSH.kickstart_session_id = KSS.id) AS last_modified
    FROM rhnksdata KSD, rhnkickstartsession KSS,
         rhnkickstartabletree KSTR, rhnkickstartsessionstate KSST
   WHERE KSS.org_id = :org_id
     AND KSTR.id = KSS.kstree_id
     AND KSS.kickstart_id = KSD.id
     AND KSS.state_id = KSST.id
     AND KSST.label NOT IN ('failed','complete','created')
  </query>
</mode>

<mode name="systems_scheduled_tobe_kickstarted_for_org"
     class="com.redhat.rhn.frontend.dto.kickstart.KickstartOverviewSystemsDto">
  <query params="org_id">
  SELECT KSD.label,
         KSST.description,
         KSS.old_server_id,
         KSS.new_server_id,
         KSS.client_ip,
         (SELECT MAX(time)
            FROM rhnKickstartSessionHistory KSH
           WHERE KSH.kickstart_session_id = KSS.id) AS last_modified
    FROM rhnksdata KSD, rhnkickstartsession KSS,
         rhnkickstartabletree KSTR, rhnkickstartsessionstate KSST
   WHERE KSS.org_id = :org_id
     AND KSTR.id = KSS.kstree_id
     AND KSS.kickstart_id = KSD.id
     AND KSS.state_id = KSST.id
     AND KSST.label = 'created'
     and ( KSS.client_ip is not null or KSS.old_server_id is not null)
     order by last_modified desc
  </query>
</mode>

<mode name="kickstart_summary_for_org"
     class="com.redhat.rhn.frontend.dto.kickstart.KickstartOverviewSummaryDto">
  <query params="org_id">
  SELECT IT.id, IT.label, IT.name, count(KS.id) AS number_of_profiles
    FROM rhnKSData KS,
         rhnKickstartDefaults KSD,
         rhnKickstartableTree KST,
         rhnKSInstallType IT
   WHERE KS.org_id = :org_id
     AND KSD.kickstart_id = KS.id
     AND KST.id = KSD.kstree_id
     AND IT.id = KST.install_type
   GROUP BY IT.id, IT.label, IT.name
   ORDER BY IT.label
  </query>
</mode>

<mode name="crypto_keys_for_org" class="com.redhat.rhn.frontend.dto.CryptoKeyDto">
  <query params="org_id">
SELECT CK.ID, CK.ORG_ID, CKT.LABEL, CK.DESCRIPTION
  FROM rhnCryptoKeyType CKT,
       rhnCryptoKey CK
 WHERE CK.org_id = :org_id
   AND CK.crypto_key_type_id = CKT.id
ORDER BY CK.DESCRIPTION, CK.id
  </query>
</mode>

<mode name="preservations_for_org" class="com.redhat.rhn.frontend.dto.FilePreservationDto">
  <query params="org_id">
  SELECT FL.id, FL.org_id, FL.label, FL.created, FL.modified
    FROM rhnFileList FL
   WHERE FL.org_id = :org_id
ORDER BY FL.label desc
  </query>
</mode>

<callable-mode name="create_org">
  <query params="label, arch">
    {call CREATE_NEW_ORG(:name, :password, :org_id)}
  </query>
</callable-mode>

<mode name="system_entitlements">
  <query params="sid">
  SELECT SGT.id, SEV.label, SEV.server_group_type_id, SEV.permanent, SEV.is_base
    FROM rhnServerEntitlementView SEV, rhnServerGroupType SGT
   WHERE SEV.server_id = :sid
     AND SGT.label = SEV.label
ORDER BY SEV.label
  </query>
</mode>

<mode name="system_has_feature">
  <query params="sid, feature">
  SELECT 1
    FROM rhnServerFeaturesView SFV
   WHERE SFV.server_id = :sid
     AND SFV.label = :feature
  </query>
</mode>

<mode name="activation_keys_for_org" class="com.redhat.rhn.frontend.dto.ActivationKeyDto">
  <query params="org_id">
  SELECT DISTINCT RT.id,
                  RT.disabled AS key_disabled,
                  RT.note,
                  AK.token,
                  RT.usage_limit,
                  (
          SELECT count(STR.server_id)
      FROM rhnServerTokenRegs STR
     WHERE STR.token_id = RT.id
                  ) system_count,
        CASE WHEN (SELECT 1 FROM rhnRegTokenOrgDefault RTOD WHERE RTOD.reg_token_id = RT.id)
            IS NOT NULL THEN 'Yes' ELSE 'No' END org_default
    FROM rhnActivationKey AK,
         rhnRegToken RT
   WHERE RT.org_id = :org_id
     AND RT.server_id IS NULL
     AND AK.ks_session_id IS NULL
     AND RT.id = AK.reg_token_id
ORDER BY RT.note, RT.id
  </query>
</mode>

<mode name="active_activation_keys_for_org" class="com.redhat.rhn.frontend.dto.ActivationKeyDto">
  <query params="org_id">
  SELECT DISTINCT RT.id,
                  RT.disabled AS key_disabled,
                  RT.note,
                  AK.token,
                  RT.usage_limit,
                  (
          SELECT count(STR.server_id)
      FROM rhnServerTokenRegs STR
     WHERE STR.token_id = RT.id
                  ) system_count,
         CASE WHEN (SELECT 1 FROM rhnRegTokenOrgDefault RTOD WHERE RTOD.reg_token_id = RT.id)
            IS NOT NULL THEN 'Yes' ELSE 'No' END org_default
    FROM rhnActivationKey AK,
         rhnRegToken RT
   WHERE RT.org_id = :org_id
     AND RT.disabled = 0
     AND RT.server_id IS NULL
     AND AK.ks_session_id IS NULL
     AND RT.id = AK.reg_token_id
ORDER BY RT.note, RT.id
  </query>
</mode>

<mode name="activation_keys_for_server" class="com.redhat.rhn.frontend.dto.ActivationKeyDto">
  <query params="server_id">
  SELECT AK.token,
         AK.reg_token_id AS id
    FROM rhnServerTokenRegs STR,
         rhnActivationKey AK
   WHERE STR.server_id = :server_id
     AND AK.reg_token_id = STR.token_id
  </query>
</mode>

<mode name="valid_timezones_for_kickstart_profile" class="com.redhat.rhn.frontend.dto.TimezoneDto">
  <query params="ksid">
  SELECT KTZ.id,
         KTZ.name,
         KTZ.label
    FROM rhnKickstartTimezone KTZ,
         rhnKickstartDefaults KSD,
         rhnKickstartableTree KST
   WHERE KSD.kickstart_id = :ksid
     AND KST.id = KSD.kstree_id
     AND KTZ.install_type = KST.install_type
ORDER BY KTZ.name
  </query>
</mode>

<mode name="valid_timezones_for_kickstart_install_type" class="com.redhat.rhn.frontend.dto.StringDto">
  <query params="id">
  SELECT KTZ.label AS value
    FROM rhnKickstartTimezone KTZ
   WHERE KTZ.install_type = :id
ORDER BY KTZ.name
  </query>
</mode>

<write-mode name="update_activation_key">
  <query params="old_key, new_key">
        update rhnActivationKey set token = :new_key where token = :old_key
  </query>
</write-mode>

<mode name="installed_schema_version">
  <query>
    SELECT evr_t_as_vre_simple(PE.evr) as version
      FROM rhnPackageEVR PE, rhnVersionInfo RVI, rhnPackageName PN
     WHERE RVI.label = 'schema'
       AND RVI.name_id = PN.id
       AND RVI.evr_id = PE.id
  </query>
</mode>

<mode name="system_snapshots">
  <query params="sid">
SELECT SS.id,
       TO_CHAR(SS.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
       SS.reason,
       (SELECT COUNT(*) FROM rhnSnapshotTag WHERE snapshot_id = SS.id) AS TAG_COUNT
  FROM rhnSnapshot SS
 WHERE SS.server_id = :sid
ORDER BY created DESC
  </query>
</mode>

<mode name="tags_for_entitled_in_set">
  <query params="user_id">
select * from (
SELECT DISTINCT T.id AS ID,
       TN.name,
       TO_CHAR(T.created, 'YYYY-MM-DD HH24:MI:SS') AS DATE_TAG_CREATED,
       COUNT(DISTINCT SS.server_id) AS TAGGED_SYSTEMS
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag STag,
       rhnSnapshot SS,
       rhnClientCapabilityName CCN,
       rhnClientCapability CC,
       rhnSet ST,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND USP.server_id = ST.element
   AND rhn_server.system_service_level(USP.server_id, 'management') > 0
   AND USP.server_id = CC.server_id
   AND CC.capability_name_id = CCN.id
   AND CCN.name = 'packages.runTransaction'
   AND USP.server_id = SS.server_id
   AND SS.id = STag.snapshot_id
   AND STag.tag_id = T.id
   AND T.name_id = TN.id
GROUP BY T.id, TN.name, T.created
) S
ORDER BY UPPER(name)
  </query>
</mode>

</datasource_modes>


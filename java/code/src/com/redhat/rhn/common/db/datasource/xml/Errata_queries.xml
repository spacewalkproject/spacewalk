<datasource_modes>

<mode name="org_pkg_errata">
  <query params="org_id, pid">
SELECT DISTINCT E.advisory_name AS advisory,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                E.synopsis AS synopsis,
                E.advisory_type AS type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date
  FROM rhnErrata E,
       rhnAvailableChannels AC,
       rhnChannelErrata EC,
       rhnErrataPackage EP
 WHERE AC.org_id = :org_id
   AND EP.package_id = :pid
   AND EP.errata_id = EC.errata_id
   AND EC.channel_id = AC.channel_id
   AND EC.errata_id = E.id
ORDER BY E.advisory_name
  </query>
</mode>

<mode name="relevant_errata" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id">
SELECT E.id, E.update_date, E.synopsis AS ADVISORY_SYNOPSIS
  FROM rhnErrata E,
       (SELECT SNEC.errata_id
          FROM rhnServerNeededCache SNEC
         WHERE SNEC.server_id IN (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id)
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_errata_by_type" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, type">
SELECT E.id, E.update_date, E.synopsis as advisory_synopsis
  FROM rhnErrata E,
       (SELECT SNEC.errata_id, COUNT(SNEC.server_id) C
          FROM rhnServerNeededErrataCache SNEC
         WHERE SNEC.server_id IN (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id)
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
 AND E.advisory_type = :type
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_errata_by_type_with_cves" class="com.redhat.rhn.frontend.dto.SecurityErrataOverview">
  <query params="user_id, type">
SELECT E.id, E.update_date, E.synopsis as advisory_synopsis
  FROM rhnErrata E,
       (SELECT SNEC.errata_id, COUNT(SNEC.server_id) C
          FROM rhnServerNeededErrataCache SNEC
         WHERE SNEC.server_id IN (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id)
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
 AND E.advisory_type = :type
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_cves_elab" />
  <elaborator name="errata_overview" />
</mode>

<mode name="all_errata" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="org_id">
SELECT DISTINCT E.id, E.update_date, E.synopsis AS ADVISORY_SYNOPSIS
  FROM  rhnErrata E, rhnChannelErrata CE, rhnChannel C,
        rhnChannelFamilyMembers CFM,
        rhnOrgChannelFamilyPermissions OCF
 WHERE  CE.errata_id = E.id
   AND  CE.channel_id = C.id
   AND  C.id = CFM.channel_id
   AND  CFM.channel_family_id = OCF.channel_family_id
   AND  OCF.org_id = :org_id
 ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="all_errata_by_type" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="org_id, type">
SELECT DISTINCT E.id, E.update_date, E.synopsis AS ADVISORY_SYNOPSIS
  FROM  rhnErrata E, rhnChannelErrata CE, rhnChannel C,
        rhnChannelFamilyMembers CFM,
        rhnOrgChannelFamilyPermissions OCF
 WHERE  CE.errata_id = E.id
   AND  CE.channel_id = C.id
   AND  C.id = CFM.channel_id
   AND  CFM.channel_family_id = OCF.channel_family_id
   AND  OCF.org_id = :org_id
   AND  E.advisory_type = :type
 ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="all_errata_by_type_with_cves" class="com.redhat.rhn.frontend.dto.SecurityErrataOverview">
  <query params="org_id, type">
SELECT DISTINCT E.id, E.update_date, E.synopsis as advisory_synopsis
  FROM  rhnErrata E, rhnChannelErrata CE, rhnChannel C,
        rhnChannelFamilyMembers CFM,
        rhnOrgChannelFamilyPermissions OCF
 WHERE  CE.errata_id = E.id
   AND  CE.channel_id = C.id
   AND  C.id = CFM.channel_id
   AND  CFM.channel_family_id = OCF.channel_family_id
   AND  OCF.org_id = :org_id
   AND  E.advisory_type = :type
 ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_cves_elab" />
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_server_group" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="sgid">
SELECT DISTINCT E.id, E.advisory, E.advisory_name, E.advisory_type, E.synopsis AS ADVISORY_SYNOPSIS,
     E.update_date,
     (SELECT COUNT(Distinct SGM2.server_id)
       FROM rhnServerNeededErrataCache SNEC,
            rhnServerGroupMembers SGM2
       WHERE SNEC.errata_id = E.id
       AND SNEC.server_id = SGM2.server_id
       AND SGM2.server_group_id = :sgid) AS AFFECTED_SYSTEM_COUNT
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC,
       rhnServerGroupMembers SGM,
       rhnServerFeaturesView SFV
 WHERE SGM.server_id = SNEC.server_id
   AND SNEC.errata_id = E.id
   AND SFV.server_id = SGM.server_id
   AND SFV.label = 'ftr_system_grouping'
   AND SGM.server_group_id = :sgid
ORDER BY E.update_date DESC, E.id
  </query>
</mode>

<mode name="relevant_to_system" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date,
                        E.synopsis AS ADVISORY_SYNOPSIS,
            E.advisory_name AS ADVISORY_NAME,
            E.advisory_type AS ADVISORY_TYPE,
                        :sid as ASSOCIATED_SYSTEM
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id
                                 AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator name="relevant_elab" />
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_system_by_types" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date,
                        E.synopsis AS ADVISORY_SYNOPSIS,
            E.advisory_name AS ADVISORY_NAME,
            E.advisory_type AS ADVISORY_TYPE,
                        :sid as ASSOCIATED_SYSTEM
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id
                                 AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
   AND E.advisory_type in (%s)
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator name="relevant_elab" />
  <elaborator name="errata_overview" />
</mode>


  <query name="relevant_elab" params="sid" >
                SELECT DISTINCT AEU.errata_id AS id,
                        AST.name AS status,
                        SA.action_id
          FROM rhnActionErrataUpdate AEU,
               rhnServerAction SA,
               rhnActionStatus AST
         WHERE SA.server_id = :sid
           AND SA.action_id = AEU.action_id
           AND AEU.errata_id IN (%s)
           AND AST.id = SA.status
           AND NOT ( EXISTS ( SELECT 1 FROM rhnServerNeededErrataCache
                                      WHERE server_id = SA.server_id
                                        AND errata_id = AEU.errata_id
                             )
                        AND AST.name = 'Completed' -- filter out rolled back status
                    )
  </query>


<mode name="relevant_to_system_by_type" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, sid, type">
SELECT DISTINCT E.id, E.update_date,
                        E.synopsis AS ADVISORY_SYNOPSIS,
            E.advisory_name AS ADVISORY_NAME,
            E.advisory_type AS ADVISORY_TYPE,
                        :sid as ASSOCIATED_SYSTEM
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id
                                 AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
   AND E.advisory_type = :type
ORDER BY E.update_date DESC, E.id
  </query>
</mode>

<mode name="security_relevant_to_system_by_synopsis" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, sid, type, synopsis">
SELECT DISTINCT E.id, E.update_date,
                        E.synopsis AS ADVISORY_SYNOPSIS,
            E.advisory_name AS ADVISORY_NAME,
            E.advisory_type AS ADVISORY_TYPE,
                        :sid as ASSOCIATED_SYSTEM
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id
                                 AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
   AND E.advisory_type = :type
   AND substr(E.synopsis, 1, 1) = :synopsis
ORDER BY E.update_date DESC, E.id
  </query>
</mode>

<mode name="count_critical_errata_for_system">
  <query params="user_id, sid">
SELECT COUNT(DISTINCT E.ID) AS COUNT
  FROM rhnErrata E,
       rhnServerNeededCache SNEC,
       rhnUserServerPerms USP
 WHERE USP.server_id = :sid
   AND   USP.user_id = :user_id
   AND   SNEC.server_id = USP.server_id
   AND   SNEC.errata_id IS NOT NULL
   AND   E.id = SNEC.errata_id
   AND   E.advisory_type = 'Security Advisory'
  </query>
</mode>

<mode name="count_noncritical_errata_for_system">
  <query params="user_id, sid">
SELECT COUNT(DISTINCT E.ID) AS COUNT
  FROM rhnErrata E,
       rhnServerNeededCache SNEC,
       rhnUserServerPerms USP
 WHERE USP.server_id = :sid
   AND   USP.user_id = :user_id
   AND   SNEC.server_id = USP.server_id
   AND   SNEC.errata_id IS NOT NULL
   AND   E.id = SNEC.errata_id
   AND   E.advisory_type != 'Security Advisory'
  </query>
</mode>

<mode name="unscheduled_relevant_to_system" class="com.redhat.rhn.domain.errata.impl.PublishedErrata">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
   AND NOT EXISTS (SELECT SA.server_id
                     FROM rhnActionErrataUpdate AEU,
                          rhnServerAction SA,
                          rhnActionStatus AST
                    WHERE SA.server_id = :sid
                      AND SA.status = AST.id
                      AND AST.name IN('Queued', 'Picked Up')
                      AND AEU.action_id = SA.action_id
                      AND AEU.errata_id = E.id )
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="published_overview" params="">
    SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type, E.update_date, E.synopsis
    FROM  rhnErrata E
    WHERE  E.id IN (%s)
    ORDER BY  E.update_date DESC
  </elaborator>
</mode>

<mode name="count_unscheduled_relevant_to_system">
  <query params="user_id, sid">
 SELECT COUNT(DISTINCT E.id) AS COUNT
   FROM rhnErrata E,
        rhnServerNeededErrataCache SNPC
  WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = :sid)
    AND SNPC.server_id = :sid
    AND SNPC.errata_id = E.id
    AND NOT EXISTS (SELECT SA.server_id
                      FROM rhnActionErrataUpdate AEU,
                           rhnServerAction SA,
                           rhnActionStatus AST
                     WHERE SA.server_id = :sid
                       AND SA.status = AST.id
                       AND AST.name IN('Queued', 'Picked Up')
                       AND AEU.action_id = SA.action_id
                       AND AEU.errata_id = E.id )
  </query>
</mode>

<mode name="issued_between">
  <query params="start_date_str, end_date_str">
SELECT DISTINCT
                E.id, E.issue_date
  FROM rhnErrata E
 WHERE
   E.issue_date &gt;= TO_TIMESTAMP(:start_date_str, 'YYYY-MM-DD')
   AND E.issue_date &lt;= TO_TIMESTAMP(:end_date_str, 'YYYY-MM-DD')
ORDER BY E.issue_date DESC
  </query>
</mode>



<mode name="in_channel_between" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid, start_date, end_date">
SELECT DISTINCT E.id
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.issue_date &gt;= :start_date
   AND E.issue_date &lt;= :end_date
  </query>
    <elaborator name="errata_overview" />
</mode>

<mode name="in_channel_after" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid, start_date">
SELECT DISTINCT E.id
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.issue_date &gt;= :start_date
  </query>
      <elaborator name="errata_overview" />
</mode>

<mode name="in_channel" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid">
SELECT DISTINCT E.id,
                E.advisory AS advisory,
                E.advisory_name,
                E.update_date AS update_date,
                E.synopsis as advisory_synopsis,
                E.advisory_type as advisory_type
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="in_channel_between_last_modified" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid, start_date, end_date">
SELECT DISTINCT E.id
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.last_modified &gt;= :start_date
   AND E.last_modified &lt;= :end_date
  </query>
    <elaborator name="errata_overview" />
</mode>

<mode name="in_channel_after_last_modified" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid, start_date">
SELECT DISTINCT E.id
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.last_modified &gt;= :start_date
  </query>
      <elaborator name="errata_overview" />
</mode>

<query name="simple_errata_overview" class="com.redhat.rhn.frontend.dto.ErrataOverview">
select e.id, e.advisory, e.advisory_name, e.advisory_type, e.advisory_rel, e.synopsis as advisory_synopsis,
       e.description, e.issue_date, e.update_date, e.errata_from
  from rhnErrata e
 where e.id in (%s)
</query>

<query name="system_overview" params="">
  SELECT SERVER_ID AS ID, OUTDATED_PACKAGES, SERVER_NAME, security_errata, bug_errata, enhancement_errata,
          SERVER_ADMINS, GROUP_COUNT, MODIFIED, CHANNEL_LABELS, CHANNEL_ID, HISTORY_COUNT,
          unique_crash_count, total_crash_count, LAST_CHECKIN_DAYS_AGO, PENDING_UPDATES, OS, RELEASE,
          SERVER_ARCH_NAME, LAST_CHECKIN, LOCKED
  FROM  rhnServerOverview
  WHERE  server_id IN (%s)
ORDER BY  UPPER(COALESCE(SERVER_NAME, '(none)')), SERVER_ID
</query>

<query name="entitlements" params="" multiple="t">
  SELECT SEV.server_id AS ID,
         SEV.label AS ENTITLEMENT,
         SEV.server_group_type_id,
         SEV.permanent AS entitlement_permanent,
         SEV.is_base AS entitlement_is_base
    FROM rhnServerEntitlementView SEV
   WHERE SEV.server_id IN (%s)
ORDER BY CASE SEV.is_base WHEN 'Y' THEN 1 WHEN 'N' THEN 2 END, SEV.label
</query>

<query name="is_virtual_guest" params="">
SELECT vi.virtual_system_id as ID, 1 as virtual_guest FROM rhnVirtualInstance vi WHERE vi.virtual_system_id in (%s)
</query>

<query name="is_virtual_host" params="">
select distinct sgm.server_id as ID, 1 as virtual_host
    from rhnServerGroup sg
        INNER JOIN rhnServerGroupMembers sgm ON sg.id = sgm.server_group_id
            INNER JOIN rhnServerGroupType sgt ON sgt.id = sg.group_type
            where
                sgm.server_id in (%s) and
                    sgt.label='virtualization_host'
union
select VI.host_system_id as ID, 1 as virtual_host
    from rhnVirtualInstance VI
        where VI.host_system_id in (%s)
</query>

<mode name="simple_in_channel" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid">
SELECT CE.errata_id AS id
  FROM rhnChannelErrata CE
 WHERE CE.channel_id = :cid
  </query>
  <elaborator name="simple_errata_overview" />
</mode>

<mode name="relevant_to_channel_between_deprecated">
  <query params="cid, start_date_str, end_date_str">
SELECT DISTINCT E.id,
                                E.advisory_name AS advisory,
                                E.advisory_name AS advisory_name,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.synopsis as advisory_synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.issue_date &gt;= TO_TIMESTAMP(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
   AND E.issue_date &lt;= TO_TIMESTAMP(:end_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY issue_date DESC
  </query>
</mode>

<mode name="relevant_to_channel_after_deprecated">
  <query params="cid, start_date_str">
SELECT DISTINCT
                                E.advisory_name AS advisory,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.issue_date &gt;= TO_TIMESTAMP(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY issue_date DESC
  </query>
</mode>

<mode name="relevant_to_channel_deprecated">
  <query params="cid">
SELECT DISTINCT E.id as id,
                                E.advisory_name AS advisory_name,
                                E.advisory_name AS advisory,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.synopsis as advisory_synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
ORDER BY issue_date DESC
  </query>
</mode>

<mode name="relevant_to_channel_by_type">
  <query params="cid, type">
SELECT DISTINCT
                                E.advisory_name AS advisory,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.advisory_type = :type
ORDER BY issue_date DESC
  </query>
</mode>


<mode name="in_sources_for_target" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid, user_id">
SELECT DISTINCT E.id , E.advisory AS advisory,
                E.update_date AS UPDATE_DATE,
                E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE,
                E.advisory_name AS advisory_name
  FROM rhnErrata E inner join
       rhnChannelErrata CE on E.id = CE.errata_id left join
    ( select Cloned.original_id as clonedId from rhnChannelErrata CE2 inner join
            rhnErrataCloned Cloned on CE2.errata_id = cloned.id
        where CE2.channel_id = :custom_cid
    )  temp on E.id  = temp.clonedId left join
        (SELECT errata_id from rhnChannelErrata where channel_id = :custom_cid) errata_exists on errata_exists.errata_id = E.id,
       rhnSet S
 WHERE CE.channel_id  = S.element
 AND S.label =  'channels_for_errata'
         and temp.clonedId is null
         and errata_exists.errata_id is null
         and S.user_id = :user_id
  </query>
</mode>

<mode name="in_sources_for_target_package_assoc" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid, user_id">
SELECT DISTINCT E.id, E.advisory_name AS advisory_name,
                E.update_date AS UPDATE_DATE,
                E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE
   FROM rhnErrata E inner join
        rhnChannelErrata CE on CE.errata_id = E.id inner join
        rhnSet S on S.element = CE.channel_id inner join
        rhnErrataPackage EP on EP.errata_id = E.id inner join
        rhnPackage P on p.id = EP.package_id inner join
        rhnPackage P2 on P.name_id = P2.name_id inner join
        rhnChannelPackage CP on P2.id = CP.package_id
  WHERE
    CP.channel_id = :custom_cid
    and S.user_id = :user_id
    and S.label = 'channels_for_errata'
    and E.id not in (select errata_id from rhnChannelErrata where channel_id = :custom_cid)
    and E.id not in (select original_id from rhnChannelErrata CE, rhnErrataCloned EC where CE.errata_id = EC.id and CE.channel_id = :custom_cid)
  </query>
</mode>


<mode name="for_target" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid">
SELECT DISTINCT E.id , E.advisory_name AS advisory_name,
                E.update_date AS UPDATE_DATE,
                E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE,
                                E.advisory_name AS advisory
  FROM rhnErrata E inner join
       rhnChannelErrata CE on E.id = CE.errata_id left join
    ( select Cloned.original_id as clonedId from rhnChannelErrata CE2 inner join
            rhnErrataCloned Cloned on CE2.errata_id = cloned.id
        where CE2.channel_id = :custom_cid
    )  temp on temp.clonedId = E.id
 WHERE
   CE.channel_id != :custom_cid
   and E.org_id is null
   and temp.clonedId is null
  </query>
</mode>





<mode name="for_target_package_assoc" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid">
  Select  DISTINCT Errata1.id , Errata1.advisory_name AS advisory_name,
               Errata1.update_date AS UPDATE_DATE,
               Errata1.synopsis as ADVISORY_SYNOPSIS,
                Errata1.advisory_type as ADVISORY_TYPE,
                Errata1.advisory_name AS advisory
  from
  (  SELECT E.*
      FROM rhnErrata E inner join
    rhnErrataPackage EP on EP.errata_id = E.id inner join
    rhnPackage P on p.id = EP.package_id inner join
    rhnPackage P2 on P.name_id = P2.name_id inner join
    rhnChannelPackage CP on P2.id = CP.package_id
    where  CP.channel_id = :custom_cid
     )  Errata1 left join

   ( SELECT CE2.errata_id as Id, CE2.channel_id
    from rhnChannelErrata CE2
    where CE2.channel_id = :custom_cid )  Errata2  on Errata1.id = Errata2.id  left join
    ( select Cloned.original_id as clonedId from rhnChannelErrata CE2 inner join
            rhnErrataCloned Cloned on CE2.errata_id = cloned.id
        where CE2.channel_id = :custom_cid
    )  temp on temp.clonedId = Errata1.id
   where
       channel_id is null
       and temp.ClonedId is null
       and Errata1.org_id is null
  </query>
</mode>

<mode name="custom_for_target" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid, org_id">
SELECT DISTINCT E.id , E.advisory_name AS advisory_name,
                E.update_date AS UPDATE_DATE,
                E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE
  FROM rhnErrata E left join
       rhnErrataCloned EC on EC.id = E.id left join
    ( select EC3.original_id as id from rhnChannelErrata CE3 inner join
            rhnErrataCloned EC3 on CE3.errata_id = EC3.id
            where CE3.channel_id = :custom_cid
    ) temp2 on temp2.id = EC.original_id
 WHERE E.org_id = :org_id
   and E.id not in (SELECT CE.errata_id from rhnChannelErrata CE where CE.channel_id = :custom_cid)
   and E.id in (SELECT CE.errata_id from rhnChannelErrata CE where CE.channel_id != :custom_cid)
   and temp2.id is null
  </query>
</mode>


<mode name="custom_for_target_package_assoc" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid, org_id">
  Select  DISTINCT Errata1.id , Errata1.advisory_name AS advisory_name,
               Errata1.update_date AS UPDATE_DATE,
               Errata1.synopsis as ADVISORY_SYNOPSIS,
                Errata1.advisory_type as ADVISORY_TYPE
  from
  (  SELECT distinct E.id, E.synopsis, E.update_date, E.advisory_type, E.advisory_name, EC.original_id
      FROM rhnErrata E left join
           rhnErrataCloned EC on EC.id = E.id
    where E.org_id = :org_id
      and E.id not in (SELECT CE.errata_id from rhnChannelErrata CE where CE.channel_id = :custom_cid)
      and E.id in (SELECT CE.errata_id from rhnChannelErrata CE where CE.channel_id != :custom_cid)
      and E.id in (SELECT EP.errata_id from rhnErrataPackage EP inner join
                                            rhnPackage P on P.id = EP.package_id inner join
                                            rhnPackage P2 on P.name_id = P2.name_id inner join
                                            rhnChannelPackage CP on P2.id = CP.package_id and CP.channel_id = :custom_cid)
     )  Errata1 left join
    (   select EC3.original_id as id from rhnChannelErrata CE3 inner join
            rhnErrataCloned EC3 on CE3.errata_id = EC3.id
        where CE3.channel_id = :custom_cid
    ) temp2 on temp2.id = Errata1.original_id
   where
           temp2.id is null
  </query>
</mode>

<mode name="find_packages_for_errata_set_with_assoc" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="src_cid, uid, set, dest_cid">
        select distinct P.id, PN.name package_name, PA.label as package_arch,
                EVR.version
       || '-' || EVR.release || (CASE WHEN EVR.epoch IS NULL THEN '' ELSE ':' || EVR.epoch END)
         package_nvre,
         P.summary
    from
        rhnSet S inner join
        rhnErrata E on S.element = E.id inner join
        rhnErrataPackage EP on E.id = EP.errata_id inner join
        rhnPackage P on P.id = EP.package_id inner join
        rhnPackageArch PA on PA.id = P.package_arch_id inner join
        rhnPackageEvr EVR on Evr.id = P.evr_id inner join
        rhnChannelPackageArchCompat COMPAT on P.package_arch_id = COMPAT.package_arch_id inner join
        rhnChannel C on C.channel_arch_id = COMPAT.channel_arch_id inner join
        rhnChannelPackage CP on CP.package_id = P.id inner join
        rhnPackageName PN on  PN.id = P.name_id
    where S.label = :set
         and C.id = :dest_cid
                 and S.user_id = :uid
         and CP.channel_id = :src_cid
  </query>
</mode>

<mode name="find_packages_for_errata_set_no_chan" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="dest_cid, uid, set">
        select distinct P.id, PN.name package_name, PA.label as package_arch,
                EVR.version
       || '-' || EVR.release || (CASE WHEN EVR.epoch IS NULL THEN '' ELSE ':' || EVR.epoch END)
         package_nvre,
         P.summary
    from
        rhnSet S inner join
        rhnErrata E on S.element = E.id inner join
        rhnErrataPackage EP on E.id = EP.errata_id inner join
        rhnPackage P on P.id = EP.package_id inner join
        rhnPackageArch PA on PA.id = P.package_arch_id inner join
        rhnPackageEvr EVR on Evr.id = P.evr_id inner join
        rhnChannelPackageArchCompat COMPAT on P.package_arch_id = COMPAT.package_arch_id inner join
        rhnChannel C on C.channel_arch_id = COMPAT.channel_arch_id inner join
        rhnPackageName PN on  PN.id = P.name_id
    where S.label = :set
                 and S.user_id = :uid
         and C.id = :dest_cid
  </query>
</mode>

<mode name="find_bugs_for_erratum" class="com.redhat.rhn.frontend.dto.Bug">
  <query params="eid">
        select ebl.errata_id, ebl.bug_id, ebl.href, ebl.summary
      from rhnErrataBugList ebl
     where ebl.errata_id = :eid
     order by ebl.bug_id asc
  </query>
</mode>

<mode name="find_cves_for_erratum" class="com.redhat.rhn.frontend.dto.CVE">
  <query params="eid">
        select c.name
          from rhnCve c,
               rhnErrataCve ec
         where c.id = ec.cve_id
           and ec.errata_id = :eid
  </query>
</mode>

<mode name="find_keywords_for_erratum">
  <query params="eid">
        select ek.keyword
          from rhnErrataKeyword ek
         where ek.errata_id = :eid
  </query>
</mode>

<mode name="find_packages_for_errata_and_channel_simple" class="com.redhat.rhn.frontend.dto.PackageDto">
  <query params="cid, eid">
        select distinct p.id, pn.name, pa.label as arch_label, evr.version, evr.release,
           evr.epoch, c.checksum, ct.label as checksum_type, sr.name as source_rpm,
           p.path
      from rhnErrataPackage ep
           inner join rhnPackage p on ep.package_id = p.id
           inner join rhnPackageArch pa on p.package_arch_id = pa.id
           inner join rhnPackageEvr evr on evr.id = p.evr_id
           inner join rhnChannelPackage cp on cp.package_id = p.id
           inner join rhnPackageName pn on pn.id = p.name_id
           inner join rhnChecksum c on c.id = p.checksum_id
           inner join rhnChecksumType ct on ct.id = c.checksum_type_id
           left join rhnSourceRpm sr on p.source_rpm_id = sr.id
     where ep.errata_id = :eid
       and cp.channel_id = :cid
  </query>
</mode>

<mode name="find_packages_for_errata_and_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="custom_cid, eid, org_id">
        select distinct P.id, PN.name package_name, PA.label as package_arch,
                EVR.version
       || '-' || EVR.release || (CASE WHEN EVR.epoch IS NULL THEN '' ELSE ':' || EVR.epoch END)
         package_nvre
    from
        rhnErrata E inner join
        rhnErrataPackage EP on E.id = EP.errata_id inner join
        rhnPackage P on P.id = EP.package_id inner join
        rhnPackageArch PA on PA.id = P.package_arch_id inner join
        rhnPackageEvr EVR on Evr.id = P.evr_id inner join
    rhnPackage P2 on P2.name_id = P.name_id inner join
    rhnChannelPackage CP on CP.package_id = P2.id
    inner join rhnPackageName PN on  PN.id = P.name_id
    inner join rhnChannel CN on CP.channel_id = CN.id
    where E.id = :eid
         and CP.channel_id = :custom_cid
         and P2.Package_arch_id = P.package_arch_id
         and CN.org_id = :org_id and
         (E.org_id is NULL or E.org_id = :org_id)
  </query>
</mode>

<mode name="find_errata_channel_packages" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="custom_cid, eid, org_id">
        select distinct P.id, PN.name package_name, PA.label as package_arch,
                EVR.version
       || '-' || EVR.release || (CASE WHEN EVR.epoch IS NULL THEN '' ELSE ':' || EVR.epoch END)
         package_nvre
    from
        rhnErrata E inner join
        rhnErrataPackage EP on E.id = EP.errata_id inner join
        rhnPackage P on P.id = EP.package_id inner join
        rhnPackageArch PA on PA.id = P.package_arch_id inner join
        rhnPackageEvr EVR on Evr.id = P.evr_id inner join
        rhnChannelPackage CP on CP.package_id = P.id inner join
        rhnPackageName PN on  PN.id = P.name_id
    where E.id = :eid
         AND CP.channel_id = :custom_cid
         AND (E.org_id is NULL or E.org_id = :org_id)
  </query>
</mode>

<query name="in_set" params="user_id, set_label">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
</query>

<mode name="in_set" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query name="in_set" />
  <elaborator name="errata_overview" />
</mode>

<mode name="in_set_relevant_to_system_set" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query name="in_set" />
  <elaborator name="relevant_to_system_set_elab" />
</mode>

<mode name="in_set_details" class="com.redhat.rhn.frontend.dto.ErrataOverview">
        <query params="user_id, set_label">
        SELECT DISTINCT E.id,
                                E.update_date,
                                E.advisory,
                                E.advisory_type,
                                E.last_modified
          FROM rhnErrata E,
               rhnSet ST
         WHERE ST.user_id = :user_id
           AND ST.label = :set_label
           AND ST.element = E.id
        ORDER BY E.update_date, E.id
        </query>
  <elaborator name="errata_overview" />
</mode>


<mode name="unpublished_in_set" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="user_id, set_label">
SELECT DISTINCT E.id,
       E.update_date,
       E.advisory,
       E.advisory_type,
       E.advisory_name,
       E.synopsis AS ADVISORY_SYNOPSIS,
       E.update_date,
       E.created,
       E.locally_modified,
       0 AS PUBLISHED
  FROM rhnErrataTmp E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="published_in_set" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="user_id, set_label">
SELECT DISTINCT E.id,
       E.update_date,
       E.advisory,
       E.advisory_type,
       E.advisory_name,
       E.synopsis AS ADVISORY_SYNOPSIS,
       E.update_date,
       E.created,
       E.locally_modified,
       1 AS PUBLISHED
  FROM rhnErrata E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="published_owned_unmodified_cloned_errata" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="org_id">
  SELECT E.id,
         EC.original_id AS from_errata_id
    FROM rhnErrata E,
         rhnErrataCloned EC
   WHERE E.id = EC.id
     AND E.org_id = :org_id
     AND E.locally_modified is null
order by e.created
  </query>
</mode>

<mode name="published_owned_errata" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         E.update_date,
         E.created,
         E.locally_modified,
         1 AS PUBLISHED
    FROM rhnErrata E
   WHERE E.org_id = :org_id
ORDER BY  E.update_date DESC, E.id
  </query>
</mode>

<mode name="unpublished_owned_errata" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         E.update_date,
         E.created,
         E.locally_modified,
         0 AS PUBLISHED
    FROM rhnErrataTmp E
   WHERE E.org_id = :org_id
ORDER BY  E.update_date DESC, E.id
  </query>
</mode>

<mode name="relevant_to_one_channel_but_not_another" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="from_cid, to_cid">
SELECT E.id, E.advisory_type, E.advisory_name, E.synopsis as advisory_synopsis, e.update_date
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :from_cid
   AND CE.errata_id = E.id
   AND NOT EXISTS (SELECT 1
                     FROM rhnChannelErrata CE2,
                          rhnErrataCloned EC
                    WHERE CE2.channel_id = :to_cid
                      AND EC.original_id = CE.errata_id
                      AND EC.id = CE2.errata_id)
   AND NOT EXISTS  (select 1
                  from  rhnChannelErrata CE3
                 where CE3.channel_id = :to_cid
                       AND CE3.errata_id = E.id)
  </query>
</mode>

<mode name="clonable_errata_list_all" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="org_id">
  SELECT distinct E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
         COALESCE(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.org_id = :org_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id)
ORDER BY update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<mode name="clonable_errata_list_uncloned" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="org_id">
  SELECT distinct E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
         COALESCE(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.org_id = :org_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id
                    AND                            COALESCE(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) = 0)
ORDER BY update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<mode name="clonable_errata_for_channel_all" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="channel_id, org_id">
  SELECT distinct E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
         COALESCE(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE (E.org_id IS NULL OR E.org_id = :org_id)
     AND CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.id = :channel_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id)
ORDER BY update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<mode name="clonable_errata_for_channel_uncloned" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="channel_id, org_id">
  SELECT distinct E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
                  COALESCE(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE (E.org_id IS NULL OR E.org_id = :org_id)
     AND CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.id = :channel_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id
                    AND                            COALESCE(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) = 0)
ORDER BY update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<query name="related_channels_owned_by_org" multiple="t" params="org_id">
  SELECT CE.errata_id AS ID, C.id as channel_id, C.name AS channel_name
    FROM rhnChannelErrata CE,
         rhnChannel C,
         rhnChannelCloned CC
   WHERE CE.errata_id IN (%s)
     AND C.org_id = :org_id
     AND CC.id = C.id
     AND CC.original_id = CE.channel_id
ORDER BY CE.errata_id, C.name
</query>

<query name="errata_overview" params="user_id">
SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type, E.update_date, E.synopsis as advisory_synopsis,
    (SELECT  COUNT(DISTINCT S.id)
       FROM  rhnServerNeededErrataCache SNEC, rhnServer S, rhnUserServerPerms USP
      WHERE  USP.user_id = :user_id
        AND  USP.server_id = S.ID
        AND  S.id = SNEC.server_id
        AND  EXISTS (SELECT 1
                       FROM rhnServerFeaturesView SFV
                      WHERE SFV.server_id = SNEC.server_id
                        AND SFV.label = 'ftr_errata_updates')
        AND  SNEC.errata_id = E.id) AS AFFECTED_SYSTEM_COUNT
  FROM  rhnErrata E
 WHERE  E.id IN (%s)
ORDER BY  E.update_date DESC
</query>

<mode name="in_group_and_affected_by_errata" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="eid, user_id, sgid">
  SELECT S.ID, S.name,
         (SELECT 1
            FROM rhnServerFeaturesView SFV
           WHERE SFV.server_id = S.id
             AND SFV.label = 'ftr_system_grouping') AS selectable
    FROM rhnServer S, rhnServerGroupMembers SGM
   WHERE EXISTS (SELECT 1
                   FROM rhnServerNeededErrataCache SNEC, rhnUserServerPerms USP
                  WHERE SNEC.errata_id = :eid
                    AND USP.user_id = :user_id
                    AND SNEC.server_id = USP.server_id
                    AND USP.server_id = S.id)
    AND SGM.server_group_id = :sgid
    AND SGM.server_id = S.id
    AND EXISTS (SELECT 1 FROM rhnServerFeaturesView SFV
                 WHERE SFV.server_id = S.id
                   AND SFV.label = 'ftr_system_grouping')
ORDER BY UPPER(NVL(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements" />
  <elaborator name="is_virtual_guest" />
  <elaborator name="is_virtual_host" />
</mode>

<mode name="in_set_and_affected_by_errata" class="com.redhat.rhn.frontend.dto.SystemOverview">
  <query params="eid, user_id">
  SELECT S.ID, S.name,
      (SELECT count(errata_id)
         FROM rhnservererratatypeview
        WHERE server_id = S.id AND errata_type = 'Security Advisory') AS security_errata,
      (SELECT count(errata_id)
         FROM rhnservererratatypeview
        WHERE server_id = S.id AND errata_type = 'Product Enhancement Advisory') AS enhancement_errata,
      (SELECT count(errata_id)
         FROM rhnservererratatypeview
        WHERE server_id = S.id AND errata_type = 'Bug Fix Advisory') AS bug_errata,
      (SELECT  COUNT(pn.id) AS COUNT
        FROM  rhnPackageName PN,
        (SELECT  SOP.package_name_id AS name_id, MAX(PE.evr) evr
           FROM  rhnPackageEVR PE, rhnServerOutdatedPackages SOP
          WHERE  SOP.server_id = S.id
            AND  SOP.package_evr_id = PE.id
       GROUP BY  SOP.package_name_id) full_list
       WHERE  full_list.name_id = PN.id) AS pending_updates
    FROM rhnServer S, rhnSet ST
   WHERE EXISTS (SELECT 1
                   FROM rhnServerNeededErrataCache SNEC, rhnUserServerPerms USP
                  WHERE SNEC.errata_id = :eid
                    AND USP.user_id = :user_id
                    AND SNEC.server_id = USP.server_id
                    AND USP.server_id = S.id)
    AND ST.user_id = :user_id
    AND ST.label = 'system_list'
    AND ST.element = S.id
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>


<mode name="relevant_to_system_set" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id">
SELECT E.id, E.advisory, E.advisory_name, E.advisory_type, E.update_date, E.synopsis as advisory_synopsis
  FROM rhnErrata E,
       (SELECT SNEC.errata_id, COUNT(SNEC.server_id) C
          FROM rhnServerNeededErrataCache SNEC
         WHERE SNEC.server_id IN (SELECT element FROM rhnSet WHERE user_id = :user_id AND label = 'system_list')
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
   AND E.advisory_type in (%s)
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="relevant_to_system_set_elab" />
</mode>

<query name="relevant_to_system_set_elab" params="user_id">
SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type,
        E.synopsis AS advisory_synopsis,
        TO_CHAR(E.update_date, 'YYYY-MM-DD') AS advisory_last_updated,
        COUNT(DISTINCT S.id) AS affected_system_count
  FROM  rhnErrata E, rhnSet ST, rhnServerNeededErrataCache SNEC, rhnServer S, rhnUserServerPerms USP
 WHERE  USP.user_id = :user_id
   AND  USP.server_id = S.ID
   AND  S.id = SNEC.server_id
   AND  E.id IN (%s)
   AND  SNEC.errata_id = E.id
   AND  USP.user_id = ST.user_id
   AND  ST.label = 'system_list'
   AND  S.id = ST.element
GROUP BY  E.id, E.advisory_name, E.advisory, E.advisory_type, E.synopsis, E.update_date
ORDER BY  E.update_date DESC
</query>

<callable-mode name="remove_errata">
  <query params="eid">
     {call delete_errata(:eid)}
  </query>
</callable-mode>

<write-mode name="deleteErrataFileBulk">
  <query params="set, uid">
 delete from rhnErrataFile where errata_id in
        (select element from rhnSet S where S.label = :set and S.user_id = :uid)
  </query>
</write-mode>

<write-mode name="deleteErrataPackageBulk">
  <query params="set, uid">
 delete from rhnErrataPackage where errata_id in
        (select element from rhnSet S where S.label = :set and S.user_id = :uid)
  </query>
</write-mode>

<write-mode name="deleteErrataTmpBulk">
  <query params="set, uid">
 delete from rhnErrataTmp where id in
        (select element from rhnSet S where S.label = :set and S.user_id = :uid)
  </query>
</write-mode>

<write-mode name="deleteErrata">
  <query params="errata_id, org_id">
 delete from rhnErrata where id = :errata_id and org_id = :org_id
  </query>
</write-mode>

<write-mode name="deleteErrataBulk">
  <query params="org_id, set, uid">
 delete from rhnErrata where org_id = :org_id and id in
        (select element from rhnSet S where S.label = :set and S.user_id = :uid)
  </query>
</write-mode>

<write-mode name="deleteServerErrataPackageCacheBulk">
  <query params="org_id, set, uid">
delete from rhnServerNeededCache
  where server_id in (select id from rhnServer where org_id = :org_id)
  and errata_id in
        (select element from rhnSet S where S.label = :set and S.user_id = :uid)
  </query>
</write-mode>


<write-mode name="deleteChannelErrataPackagesBulk">
  <query params="set, uid">
   delete from rhnChannelPackage where (package_id, channel_id) in(
                select CP.package_id, CP. channel_id
                        from rhnChannelPackage CP inner join
                        rhnChannelErrata CE on CE.channel_id = CP.channel_id inner join
                        rhnErrataPackage EP on EP.package_id = CP.package_id
                    where
                          CE.errata_id = EP.errata_id and
                          CE.errata_id in
                          (select element from rhnSet S where S.label = :set and S.user_id = :uid))
  </query>
</write-mode>

<mode name="errata_channel_id_label" class="com.redhat.rhn.frontend.dto.ChannelOverview">
  <query params="uid, label">
        select distinct c.id, c.label
          from rhnChannel c inner join
                        rhnChannelErrata ec on ec.channel_id = c.id
          where ec.errata_id in (select element from rhnSet S where S.label = :label and S.user_id = :uid)
  </query>
</mode>

<!-- Errata Search Queries -->
<query name="default_errata_elaborator" params="">
SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type, E.synopsis AS ADVISORY_SYNOPSIS,
        TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED
  FROM  rhnErrata E
   WHERE  E.id IN (%s)
ORDER BY E.update_date DESC
</query>

<mode name="errata_search_by_advisory" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="org_id, search_string">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnChannelErrata CE,
       rhnAvailableChannels AC
 WHERE E.id = CE.errata_id
   AND CE.channel_id = AC.channel_id
   AND AC.org_id = :org_id
   AND (INSTR (UPPER(E.advisory), UPPER(:search_string)) > 0)
   ORDER BY E.update_date DESC
  </query>
  <elaborator name="default_errata_elaborator" />
</mode>

<mode name="errata_search_by_package_name" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="org_id, search_string">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnPackageName PN,
       rhnPackage P,
       rhnErrataPackage EP,
       rhnChannelErrata CE,
       rhnAvailableChannels AC
 WHERE EP.errata_id = CE.errata_id
   AND CE.channel_id = AC.channel_id
   AND AC.org_id = :org_id
   AND P.id = EP.package_id
   AND PN.id = P.name_id
   AND E.id = EP.errata_id
   AND (INSTR (UPPER(PN.name), UPPER(:search_string)) > 0)
   ORDER BY E.update_date DESC
  </query>
  <elaborator name="default_errata_elaborator" />
</mode>

<mode name="bugs_fixed_by_errata" class="com.redhat.rhn.frontend.dto.Bug">
  <query params="eid">
SELECT  EBL.bug_id, EBL.summary, EBL.href
  FROM  rhnErrataBugList EBL
 WHERE  EBL.errata_id = :eid
ORDER BY EBL.bug_id
  </query>
</mode>

<mode name="cves_for_errata" class="com.redhat.rhn.frontend.dto.CVE">
  <query params="eid">
SELECT  CVE.name
  FROM  rhnCVE CVE, rhnErrataCVE ECVE
 WHERE  ECVE.errata_id = :eid
   AND  ECVE.cve_id = CVE.id
ORDER BY UPPER(CVE.name)
  </query>
</mode>

<mode name="erratas_for_cve">
   <query params="cve">
SELECT E.id
FROM rhnErrata E, rhnCVE C, rhnErrataCVE ec
WHERE C.name = :cve
AND EC.cve_id = C.id
AND EC.errata_id = E.id
   </query>
</mode>

<mode name="keywords" class="com.redhat.rhn.frontend.dto.ErrataKeyword">
  <query params="eid">
SELECT  EK.keyword
  FROM  rhnErrataKeyword EK
 WHERE  EK.errata_id = :eid
ORDER BY UPPER(EK.keyword)
  </query>
</mode>

<mode name="available_to_org">
  <query params="eid, org_id">
SELECT  1
  FROM  rhnChannelErrata CE
 WHERE  CE.errata_id = :eid
   AND  CE.channel_id IN(SELECT channel_id
                           FROM rhnAvailableChannels
                          WHERE org_id = :org_id)
  </query>
</mode>

<mode name="channel_errata_for_list" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid">
 SELECT DISTINCT E.id,
                                E.advisory_name AS advisory,
                E.update_date AS update_date,
                E.synopsis as advisory_synopsis,
                E.advisory_type as advisory_type
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
  </query>
</mode>

<write-mode name="insert_errata_notification">
  <query params="eid, cid, datetime">
  insert into rhnErrataQueue (channel_id, errata_id, next_action) values (:cid, :eid, :datetime)
  </query>
</write-mode>

<write-mode name="clear_errata_notification">
  <query params="eid">
   delete from rhnErrataQueue where errata_id = :eid
  </query>
</write-mode>

<write-mode name="clear_errata_channel_notification">
  <query params="eid, cid">
   delete from rhnErrataQueue where errata_id = :eid and channel_id = :cid
  </query>
</write-mode>

<mode name="list_errata_notification">
  <query params="eid">
 SELECT errata_id, channel_id, next_action
        from rhnErrataQueue where errata_id = :eid
  </query>
</mode>

<mode name="errata_associated_with_action">
  <query params="aid">
SELECT E.id, E.advisory, E.synopsis
  FROM rhnErrata E,
       rhnActionErrataUpdate AEU
 WHERE E.id = AEU.errata_id
   AND AEU.action_id = :aid
  </query>
</mode>



<mode name="list_errata_needing_sync" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid, ocid">
SELECT
    DISTINCT e.id, e.advisory_name, e.advisory, e.advisory_type, e.synopsis as advisory_synopsis, e.update_date
FROM
(
    SELECT
        oep.package_id, ec.id AS clone_errata_id
    FROM rhnChannelPackage ocp
        JOIN rhnChannelErrata oce ON oce.channel_id = ocp.channel_id
        JOIN rhnErrataPackage oep ON oep.errata_id = oce.errata_id
            AND oep.package_id = ocp.package_id
        JOIN rhnErrataCloned ec ON ec.original_id = oep.errata_id
    WHERE   ocp.channel_id = :ocid
) O
LEFT JOIN (
    SELECT
        cep.package_id, cep.errata_id
    FROM rhnChannelPackage ccp
        JOIN rhnChannelErrata cce ON cce.channel_id = ccp.channel_id
        JOIN rhnErrataPackage cep ON cep.errata_id = cce.errata_id AND cep.package_id = ccp.package_id
WHERE ccp.channel_id = :cid
) C ON C.errata_id = O.clone_errata_id AND C.package_id = O.package_id
JOIN rhnErrata e ON e.id = O.clone_errata_id
-- following line ensures the errata clone is already published in the cloned channel
JOIN rhnChannelErrata ce ON ce.errata_id = e.id AND ce.channel_id = :cid
WHERE C.package_id IS NULL
  </query>
</mode>

<mode name="list_packages_needing_sync" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="ocid, cid">
SELECT p.id, pn.name AS package_name,
       pn.name || '-' || evr_t_as_vre_simple(pevr.evr) || '.' || pa.label AS nvrea,
       p.summary
FROM
(
    SELECT
        oep.package_id, ec.id AS clone_errata_id
    FROM rhnChannelPackage ocp
        JOIN rhnChannelErrata oce ON oce.channel_id = ocp.channel_id
        JOIN rhnErrataPackage oep ON oep.errata_id = oce.errata_id
            AND oep.package_id = ocp.package_id
        JOIN rhnErrataCloned ec ON ec.original_id = oep.errata_id
WHERE ocp.channel_id = :ocid
) O
LEFT JOIN (
    SELECT
        cep.package_id, cep.errata_id
    FROM rhnChannelPackage ccp
        JOIN rhnChannelErrata cce ON cce.channel_id = ccp.channel_id
        JOIN rhnErrataPackage cep ON cep.errata_id = cce.errata_id
            AND cep.package_id = ccp.package_id
WHERE ccp.channel_id = :cid
) C ON C.errata_id = O.clone_errata_id AND C.package_id = O.package_id
JOIN rhnErrata e ON e.id = O.clone_errata_id
-- following line ensures the errata clone is already published in the cloned channel
JOIN rhnChannelErrata ce ON ce.errata_id = e.id AND ce.channel_id = :cid
JOIN rhnPackage p ON p.id = O.package_id
JOIN rhnPackageName pn ON pn.id = p.name_id
JOIN rhnPackageEVR pevr ON pevr.id = p.evr_id
JOIN rhnPackageArch pa ON pa.id = p.package_arch_id
WHERE C.package_id IS NULL
  </query>
</mode>

<mode name="list_packages_needing_sync_from_set" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="set_label, ocid, cid">
SELECT p.id, pn.name AS package_name,
       pn.name || '-' || evr_t_as_vre_simple(pevr.evr) || '.' || pa.label AS nvrea,
       p.summary
FROM
(
    SELECT
        oep.package_id, ec.id AS clone_errata_id
    FROM rhnChannelPackage ocp
        JOIN rhnChannelErrata oce ON oce.channel_id = ocp.channel_id
        JOIN rhnErrataPackage oep ON oep.errata_id = oce.errata_id
            AND oep.package_id = ocp.package_id
        JOIN rhnErrataCloned ec ON ec.original_id = oep.errata_id
WHERE ocp.channel_id = :ocid
) O
LEFT JOIN (
    SELECT
        cep.package_id, cep.errata_id
    FROM rhnChannelPackage ccp
        JOIN rhnChannelErrata cce ON cce.channel_id = ccp.channel_id
        JOIN rhnErrataPackage cep ON cep.errata_id = cce.errata_id
            AND cep.package_id = ccp.package_id
WHERE ccp.channel_id = :cid
) C ON C.errata_id = O.clone_errata_id AND C.package_id = O.package_id
JOIN rhnPackage p ON p.id = O.package_id
JOIN rhnPackageName pn ON pn.id = p.name_id
JOIN rhnPackageEVR pevr ON pevr.id = p.evr_id
JOIN rhnPackageArch pa ON pa.id = p.package_arch_id
WHERE C.package_id IS NULL
AND O.clone_errata_id IN (
        SELECT element
        FROM rhnSet S
        WHERE S.label = :set_label)
  </query>
</mode>

<query name="errata_cves_elab">
SELECT E.id, C.name AS CVE
FROM   rhnErrata E, rhnCve C, rhnErrataCVE EC
WHERE  E.id IN (%s)
AND    E.id = EC.errata_id
AND    EC.cve_id = C.id
</query>

<mode name="advisories_ending_with">
  <query params="ending">
SELECT  E.advisory
  FROM  rhnErrata E
 WHERE  E.advisory like :ending
UNION
SELECT  ET.advisory
  FROM  rhnErrataTmp ET
 WHERE  ET.advisory like :ending
  </query>
</mode>

<mode name="advisory_names_ending_with">
  <query params="ending">
SELECT  E.advisory_name
  FROM  rhnErrata E
 WHERE  E.advisory_name like :ending
UNION
SELECT  ET.advisory_name
  FROM  rhnErrataTmp ET
 WHERE  ET.advisory_name like :ending
  </query>
</mode>

<query name="cloned_errata_elaborator" class="com.redhat.rhn.frontend.dto.ErrataOverview">
SELECT e.id, ec.original_id AS from_errata_id, 'cloned_from' as RELATIONSHIP
  FROM rhnErrata e
  LEFT JOIN rhnErrataCloned ec ON e.id = ec.id
 WHERE e.id in (%s)
</query>

<mode name="overview_by_id" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="eid">
SELECT e.id
  FROM rhnErrata e
 WHERE e.id = :eid
  </query>
  <elaborator name="simple_errata_overview" />
  <elaborator name="cloned_errata_elaborator" />
</mode>

<mode name="overview_by_advisory" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="advisory">
SELECT id
  FROM rhnErrata
 WHERE advisory = :advisory
  </query>
  <elaborator name="simple_errata_overview" />
</mode>

<write-mode name="clone_erratum">
  <query params="eid, advisory, name, org_id">
INSERT INTO rhnErrata
(id, advisory, advisory_type, advisory_name, advisory_rel, product, description, synopsis,
topic, solution, issue_date, update_date, refers_to, notes, org_id, locally_modified, errata_from,
severity_id, last_modified)
(SELECT sequence_nextval('rhn_errata_id_seq'), :advisory, e.advisory_type, :name,
        e.advisory_rel, e.product, e.description, e.synopsis, e.topic, e.solution,
        e.issue_date, e.update_date, e.refers_to, e.notes, :org_id, e.locally_modified,
        e.errata_from, e.severity_id, e.last_modified
   FROM rhnErrata e
  WHERE e.id = :eid)
  </query>
</write-mode>

<write-mode name="set_original">
  <query params="original_id, clone_id">
INSERT INTO rhnErrataCloned (id, original_id)
VALUES (:clone_id, :original_id)
  </query>
</write-mode>

<write-mode name="clone_bugs">
  <query params="original_id, clone_id">
INSERT INTO rhnErrataBugList
(errata_id, bug_id, summary, href)
(SELECT :clone_id,
        ebl.bug_id,
        ebl.summary,
        ebl.href
   FROM rhnErrataBugList ebl
  WHERE ebl.errata_id = :original_id)
  </query>
</write-mode>

<write-mode name="clone_keywords">
  <query params="original_id, clone_id">
INSERT INTO rhnErrataKeyword
(errata_id, keyword)
(SELECT :clone_id,
        ek.keyword
   FROM rhnErrataKeyword ek
  WHERE ek.errata_id = :original_id)
  </query>
</write-mode>

<write-mode name="clone_packages">
  <query params="original_id, clone_id">
INSERT INTO rhnErrataPackage
(errata_id, package_id)
(SELECT :clone_id,
        ep.package_id
   FROM rhnErrataPackage ep
  WHERE ep.errata_id = :original_id)
  </query>
</write-mode>

<write-mode name="clone_cves">
  <query params="original_id, clone_id">
INSERT INTO rhnErrataCve
(errata_id, cve_id)
(SELECT :clone_id,
        ec.cve_id
   FROM rhnErrataCVE ec
  WHERE ec.errata_id = :original_id)
  </query>
</write-mode>

<write-mode name="clone_files">
  <query params="original_id, clone_id">
INSERT INTO rhnErrataFile
(id, errata_id, type, checksum_id, filename)
(SELECT sequence_nextval('rhn_erratafile_id_seq'), :clone_id, EF.type, EF.checksum_id, EF.filename
   FROM rhnErrataFile EF
  WHERE EF.errata_id = :original_id)
  </query>
</write-mode>

</datasource_modes>


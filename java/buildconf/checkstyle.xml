<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
<!--    <module name="PackageHtml"/> -->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <module name="TreeWalker">

        <property name="cacheFile" value="${checkstyle.cache.file}"/>

        <module name="FileContentsHolder" />

        <!-- ************************************************************** -->
        <!-- Checks that are different from the sun coding conventions ones -->
        <!-- ************************************************************** -->
        <property name="tabWidth" value="4"/>
        <module name="LeftCurly" />
        <module name="RightCurly">
          <property name="option" value="alone"/>
        </module>
        <module name="LineLength">
          <property name="ignorePattern" value="import"/>
          <property name="max" value="92"/>
        </module>

        <!-- ************************************************************** -->
        <!-- Default Sun coding conventions checks                          -->
        <!-- ************************************************************** -->

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="scope" value="${javadoc.method.scope}" />
            <property name="allowUndeclaredRTE" value="true" />
            <property name="allowThrowsTagsForSubclasses" value="${javadoc.lazy}" />
            <property name="allowMissingParamTags" value="${javadoc.lazy}" />
            <property name="allowMissingThrowsTags" value="${javadoc.lazy}" />
            <property name="allowMissingReturnTag" value="${javadoc.lazy}" />
        </module>
        <module name="JavadocType">
          <property name="scope" value="${javadoc.type.scope}" />
        </module>
        <module name="JavadocVariable">
          <property name="scope" value="${javadoc.var.scope}" />
          <property name="severity" value="ignore"/>
        </module>

<!--        JavadocStyle not supported by some versions.         -->
<!--        <module name="JavadocStyle"/>                        -->


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MethodName"/>
        <module name="PackageName">
          <property name="format" value="^[a-z]+(\.[A-Za-z][A-Za-z0-9]*)*$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="MethodLength">
           <property name="tokens" value="METHOD_DEF"/>
           <property name="max" value="180"/>
           <property name="countEmpty" value="false"/>
        </module>
        <module name="ParameterNumber">
                <property name="max" value="12"/>
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="NoWhitespaceAfter">
          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore">
          <property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
        </module>
        <module name="OperatorWrap">
            <property name="option" value="eol" />
        </module>
        <module name="ParenPad"/>
        <module name="WhitespaceAfter">
          <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN,
COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>
        <module name="MethodParamPad">
            <property name="allowLineBreaks" value="true"/>
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
          <property name="option" value="text"/>
        </module>

        <module name="NeedBraces"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- <module name="AvoidInlineConditionals"/> -->
<!--        <module name="CovariantEquals"/>                 -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField"/>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <!--        <module name="MagicNumber" /> -->
        <module name="MissingSwitchDefault"/>
<!--        <module name="RedundantThrows"/> -->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
<!--        <module name="IllegalCatch"/>                    -->
<!--        <module name="PackageDeclaration"/>              -->

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
<!--        <module name="DesignForExtension"/>-->
<!--        <module name="FinalClass"/> -->
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true" />
        </module>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
<!--        <module name="FinalParameters"/> -->
<!--
        <module name="GenericIllegalRegexp">
            <property name="format" value="System\.out\.println"/>
        </module>
-->
        <module name="UpperEll"/>

        <!-- Optional Checks                                    -->
        <!-- (gack, not available until version 3 of checkstyle -->
<!--
        <module name="usage.OneMethodPrivateField"/>
        <module name="usage.UnusedLocalVariable"/>
        <module name="usage.UnusedParameter"/>
        <module name="usage.UnusedPrivateField"/>
-->
        <module name="MissingDeprecated"/>
    </module>

    <!-- Checks for Headers                              -->
    <!-- See http://checkstyle.sourceforge.net/config_header.html#RegexpHeader -->
    <!-- Following interprets the header file as regular expressions. -->
    <module name="RegexpHeader">
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project.                   -->
        <property name="headerFile" value="${checkstyle.header.file}"/>
    </module>

    <module name="FileTabCharacter"/>

    <module name="RegexpSingleline">
        <!-- \s matches whitespace character, $ matches end of line. -->
        <property name="format" value="\s+$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="SuppressionCommentFilter" />

</module>

#!/usr/bin/env python
"""Fetch pull requests from GitHub and prepare them for rebase process

Usage:

  * PROG     -- With no arguments it just lists actual pull requests
  * PROG <n> -- Fetches the pull request #n, creates separate branch
        for it, rebases it on top of requested branch (usually master)
        and deletes remote.
  * PROG <n> [--ignore-dirty | -i] -- fetch PR without checking local
        repository
"""

import git
import os
import re
import simplejson
import sys
import urllib

USER = None
REPO = None
OAUTH_FILE = os.environ['HOME'] + "/.github-fetch-pullrequest-token"
OAUTH = ""


class Progress(git.RemoteProgress):
    """Shows state on command line"""
    def __init__(self, desc):
        super(Progress, self).__init__()
        self.desc = desc

    def update(self, op_code, cur_count, max_count=None, message=''):
        print "\r%s: %s/%s %s" % (self.desc, cur_count, max_count, message),
        sys.stdout.flush()


def setup_token():
    global OAUTH
    try:
        OAUTH = open(OAUTH_FILE).readline().strip()
    except Exception:
        pass


def list_requests():
    """Prints open pull requests with some additional info"""
    url = "https://api.github.com/repos/%s/%s/pulls" % (USER, REPO)
    if OAUTH:
        url += "?access_token=%s" % OAUTH
    pull_requests = simplejson.load(urllib.urlopen(url))
    for request in pull_requests:
        print request.get('number'), request.get('title')


def get_pull_request(req_num):
    """Get data about one request"""
    url = "https://api.github.com/repos/%s/%s/pulls/%d" % (USER, REPO, req_num)
    if OAUTH:
        url += "?access_token=%s" % OAUTH
    result = simplejson.load(urllib.urlopen(url))
    return result


def guess_USER_REPO():
    """Uses convention that upstream remote is named either
    'upstream' or 'origin'"""
    a = dict((r.name, re.match('.*[:/](.*)/(.*)\.git', r.url).groups())
        for r in repo.remotes)
    return a.get('upstream') or a.get('origin')


def prepare_repo(repo, req_num, master, ignore_dirty):
    """Main functionality"""
    if not ignore_dirty:
        if repo.is_dirty() or repo.untracked_files:
            print "Repo is dirty (uncommited changes/untracked files)."
            sys.exit(1)

    pull_request = get_pull_request(req_num)

    message = pull_request.get("message")
    if message:
        print message
        sys.exit(2)

    remote_url = pull_request.get("head").get("repo").get("clone_url")
    from_who = pull_request.get("user").get("login")
    remote_branch = pull_request.get("head").get("ref")
    local_branch = pull_request.get("base").get("ref")

    print (remote_url, remote_branch)

    remote_name = "pull-request-%s-%s" % (from_who, remote_branch)

    remote = repo.create_remote(remote_name, remote_url)
    try:
        remote.fetch(progress=Progress("fetch"))
    except AssertionError:  # :-(  Some git assertion fails here
        pass
    repo.git.checkout('%s/%s' % (remote_name, remote_branch), b=remote_name)
    repo.delete_remote(remote)
    try:
        repo.git.rebase(local_branch)
    except git.exc.GitCommandError:
        print ("Rebase failed. You can either resolve it and run "
               "`git rebase --continue` or ask author to do the rebase.")

    if master:
        repo.git.checkout("master")
        repo.git.merge(remote_name, "--ff-only")
        repo.git.branch("-d", remote_name)

    print ("\nIn branch '%s'." % ("master" if master else remote_name))

if __name__ == "__main__":
    repo = git.Repo(search_parent_directories=True)
    USER, REPO = guess_USER_REPO()
    master = False
    req_num = None
    ignore_dirty = False

    for arg in sys.argv:
        if arg in ("--master", "-m"):
            master = True
        elif arg in ("--ignore-dirty", "-i"):
            ignore_dirty = True
        else:
            try:
                req_num = int(arg)
            except ValueError:
                pass

    setup_token()
    if not req_num:
        list_requests()
        sys.exit(0)

    prepare_repo(repo, req_num, master, ignore_dirty)

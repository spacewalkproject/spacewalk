<datasource_modes>

<mode name="tags_for_snapshot">
  <query params="ss_id">
SELECT T.id AS ID,
       TN.name,
       TO_CHAR(ST.created, 'YYYY-MM-DD HH24:MI:SS') AS DATE_TAG_APPLIED
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag ST,
       rhnSnapshot SS
 WHERE SS.id = :ss_id
   AND SS.id = ST.snapshot_id
   AND ST.tag_id = T.id
   AND T.name_id = TN.id
ORDER BY UPPER(TN.name)
  </query>
</mode>

<mode name="tags_for_provisioning_entitled_in_set">
  <query params="user_id">
select * from (
SELECT DISTINCT T.id AS ID,
       TN.name,
       TO_CHAR(T.created, 'YYYY-MM-DD HH24:MI:SS') AS DATE_TAG_CREATED,
       COUNT(DISTINCT SS.server_id) AS TAGGED_SYSTEMS
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag STag,
       rhnSnapshot SS,
       rhnClientCapabilityName CCN,
       rhnClientCapability CC,
       rhnSet ST,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND USP.server_id = ST.element
   AND rhn_server.system_service_level(USP.server_id, 'provisioning') > 0
   AND USP.server_id = CC.server_id
   AND CC.capability_name_id = CCN.id
   AND CCN.name = 'packages.runTransaction'
   AND USP.server_id = SS.server_id
   AND SS.id = STag.snapshot_id
   AND STag.tag_id = T.id
   AND T.name_id = TN.id
GROUP BY T.id, TN.name, T.created
) S
ORDER BY UPPER(name)
  </query>
</mode>

<mode name="snapshot_tags_in_set">
  <query params="sid, user_id, set_label">
SELECT ST.tag_id AS ID,
       TN.name,
       SS.id AS SNAPSHOT_ID,
       TO_CHAR(ST.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag ST,
       rhnSnapshot SS,
       rhnSet S
 WHERE SS.server_id = :sid
   AND SS.id = ST.snapshot_id
   AND ST.tag_id = T.id
   AND T.name_id = TN.id
   AND T.id = S.element
   AND S.user_id = :user_id
   AND S.label = :set_label
ORDER BY UPPER(TN.name)
  </query>
</mode>

<mode name="tags_for_system">
  <query params="sid">
SELECT ST.tag_id AS ID,
       TN.name,
       SS.id AS SNAPSHOT_ID,
       TO_CHAR(ST.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED
  FROM rhnTagName TN,
       rhnTag T,
       rhnSnapshotTag ST,
       rhnSnapshot SS
 WHERE SS.server_id = :sid
   AND SS.id = ST.snapshot_id
   AND ST.tag_id = T.id
   AND T.name_id = TN.id
ORDER BY UPPER(TN.name)
  </query>
</mode>

<mode name="package_files">
  <query params="pid">
SELECT C.name,
       F.file_size,
       Cs.checksum,
       Cs.checksum_type,
       F.file_mode,
       F.linkto,
       TO_CHAR(F.mtime, 'YYYY-MM-DD HH24:MI:SS') AS MTIME
  FROM rhnPackageCapability C, rhnPackageFile F
  LEFT OUTER JOIN rhnChecksumView Cs ON CS.id = F.checksum_id
 WHERE F.package_id = :pid
   AND F.capability_id = C.id
ORDER BY UPPER(C.name)
  </query>
</mode>

<mode name="system_notes">
  <query params="sid">
  SELECT  SN.id AS ID, SN.subject, SN.note, SN.modified
    FROM  rhnServerNotes SN
   WHERE  SN.server_id = :sid
ORDER BY  SN.modified DESC
  </query>
</mode>

<mode name="activation_keys">
  <query params="org_id">
  SELECT DISTINCT RT.id,
                  RT.disabled,
                  RT.note,
                  AK.token,
                  RT.usage_limit,
                  (
          SELECT count(STR.server_id)
	    FROM rhnServerTokenRegs STR
	   WHERE STR.token_id = RT.id
                  ) system_count,
         NVL((SELECT 'Yes' FROM rhnRegTokenOrgDefault RTOD WHERE RTOD.reg_token_id = RT.id), 'No') org_default
    FROM rhnActivationKey AK,
         rhnRegToken RT
   WHERE RT.org_id = :org_id
     AND RT.server_id IS NULL
     AND AK.ks_session_id IS NULL
     AND RT.id = AK.reg_token_id
ORDER BY RT.note, RT.id
  </query>
</mode>

<mode name="template_strings">
  <query params="">
 SELECT TS.id, TC.label as CATEGORY_LABEL, TS.label, TS.value
   FROM rhnTemplateString TS, rhnTemplateCategory TC
  WHERE TC.id = TS.category_id
ORDER BY TC.label, TS.label
  </query>
</mode>

<mode name="kickstarts_for_org">
  <query params="org_id">
  SELECT KS.id, KS.org_id, KS.is_org_default, KS.label,
         KS.comments, KS.active, KS.pre, KS.post, KSD.kstree_id,
         KSD.server_profile_id,
         TO_CHAR(KS.modified, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIED
    FROM rhnKickstartDefaults KSD, rhnKSData KS
   WHERE KS.org_id = :org_id
     AND KSD.kickstart_id = KS.id
ORDER BY KS.label, KS.id
  </query>
</mode>

<mode name="regtokens_for_kickstart_session">
  <query params="kssid">
SELECT RT.id,
       RT.org_id,
       RT.user_id,
       RT.note,
       RT.usage_limit,
       RT.deploy_configs
  FROM rhnRegToken RT, rhnActivationKey AK
 WHERE AK.ks_session_id = :kssid
   AND RT.id =AK.reg_token_id
   AND RT.disabled = 0
  </query>
</mode>

<mode name="kickstart_packages">
  <query params="ksid">
SELECT KSP.package_name_id AS ID, PN.name
  FROM rhnPackageName PN, rhnKickstartPackage KSP
 WHERE KSP.kickstart_id = :ksid
   AND PN.id = KSP.package_name_id
ORDER BY UPPER(PN.name)
  </query>
</mode>

<mode name="org_ks_ip_ranges">
  <query params="org_id">
SELECT KSIPR.kickstart_id, KS.label AS KICKSTART_NAME, KSIPR.min,
       KSIPR.max, KSIPR.org_id
  FROM rhnKickstartIPRange KSIPR, rhnKSData KS
 WHERE KSIPR.org_id = :org_id
   AND KS.id = KSIPR.kickstart_id
ORDER BY KSIPR.min
  </query>
</mode>

<mode name="kstrees_for_user">
  <query params="user_id">
SELECT KT.id, KT.base_path, KT.channel_id, KT.label, KT.org_id,
       UAC.channel_name, UAC.channel_label,
       KTT.label AS KSTREE_TYPE_LABEL, KTT.name AS KSTREE_TYPE_NAME,
       C.channel_arch_id, CA.label AS CHANNEL_ARCH_LABEL, CA.name AS CHANNEL_ARCH_NAME
  FROM rhnChannel C, rhnChannelArch CA, rhnKSTreeType KTT, rhnKickstartableTree KT, rhnUserAvailableChannels UAC
 WHERE UAC.user_id = :user_id
   AND KT.channel_id = UAC.channel_id
   AND KTT.id = KT.kstree_type
   AND (KT.org_id IS NULL OR KT.org_id = uac.org_id)
   AND C.id = KT.channel_id
   AND CA.id = C.channel_arch_id
ORDER BY KTT.id, KT.label
  </query>
</mode>

<mode name="kickstart_session_history">
  <query params="kssid">
  SELECT KSH.id,
         KSH.state_id,
         KSH.time AS timestamp,
         TO_CHAR(KSH.time, 'YYYY-MM-DD HH24:MI:SS') AS char_time,
         KSH.kickstart_session_id AS session_id,
         KSH.action_id,
	 KSH.message,
         KSS.name AS state_name,
         KSS.description AS STATE_DESCRIPTION,
         KS.old_server_id,
         KS.new_server_id
    FROM rhnKickstartSessionState KSS,
         rhnKickstartSessionHistory KSH,
         rhnKickstartSession KS
   WHERE KS.id = :kssid
     AND KSH.kickstart_session_id = KS.id
     AND KSS.id = KSH.state_id
ORDER BY KSH.time
  </query>
  <elaborator params="">
SELECT KSH.id, A.name AS action_name, AT.name AS action_type
  FROM rhnActionType AT, rhnAction A, rhnKickstartSessionHistory KSH
 WHERE KSH.id in (%s)
   AND A.id = KSH.action_id
   AND AT.id = A.action_type
  </elaborator>
</mode>

<mode name="packages_in_token">
  <query params="tid">
SELECT RTP.name_id, PN.name
  FROM rhnPackageName PN,
       rhnRegTokenPackages RTP
 WHERE RTP.token_id = :tid
   AND PN.id = RTP.name_id
ORDER BY PN.name
  </query>
</mode>

<mode name="crypto_keys_for_org">
  <query params="org_id">
SELECT CK.ID, CK.ORG_ID, CKT.LABEL, CK.DESCRIPTION, CK.KEY
  FROM rhnCryptoKeyType CKT,
       rhnCryptoKey CK
 WHERE CK.org_id = :org_id
   AND CK.crypto_key_type_id = CKT.id
ORDER BY CK.DESCRIPTION, CK.id
  </query>
</mode>

<mode name="crypto_keys_for_ks_profile">
  <query params="ksid">
SELECT CK.ID, CK.ORG_ID, CKT.LABEL, CK.DESCRIPTION, CK.KEY
  FROM rhnCryptoKeyType CKT,
       rhnCryptoKey CK,
       rhnCryptoKeyKickstart CKK
 WHERE CKK.ksdata_id = :ksid 
   AND CKK.crypto_key_id = CK.id
   AND CK.crypto_key_type_id = CKT.id
ORDER BY CK.DESCRIPTION, CK.id
  </query>
</mode>

<mode name="preservations_for_org">
  <query params="org_id">
  SELECT FL.id, FL.org_id, FL.label, FL.created, FL.modified
    FROM rhnFileList FL
   WHERE FL.org_id = :org_id
  ORDER BY FL.label desc
  </query>
</mode>

<mode name="valid_system_entitlements">
  <query>
  SELECT SGT.id, SGT.label, SGT.name, SGT.is_base, SGT.permanent
    FROM rhnServerGroupType SGT
ORDER BY SGT.label
  </query>
</mode>

<mode name="valid_system_entitlements_for_org">
  <query params="oid">
  SELECT SGT.id, SGT.label, SGT.name, SGT.is_base, SGT.permanent
    FROM rhnServerGroupType SGT, rhnServerGroup SG
   WHERE SG.org_id = :oid
     AND SGT.id = SG.group_type
     AND SG.max_members > 0
ORDER BY SGT.label
  </query>
</mode>

<mode name="system_entitlements">
  <query params="sid">
  SELECT SGT.id, SEV.label, SEV.server_group_type_id, SEV.permanent, SEV.is_base
    FROM rhnServerEntitlementView SEV, rhnServerGroupType SGT
   WHERE SEV.server_id = :sid
     AND SGT.label = SEV.label
ORDER BY SEV.label
  </query>
</mode>

<mode name="valid_system_features">
  <query>
  SELECT F.id, F.label, F.name
    FROM rhnFeature F
ORDER BY F.label
  </query>
</mode>

<mode name="system_features">
  <query params="sid">
  SELECT DISTINCT F.id, F.label, F.name
    FROM rhnFeature F,
         rhnServerFeaturesView SFV
   WHERE SFV.server_id = :sid
     AND F.label = SFV.label
ORDER BY F.label
  </query>
</mode>

<mode name="system_has_feature">
  <query params="sid, feature">
  SELECT 1
    FROM rhnServerFeaturesView SFV
   WHERE SFV.server_id = :sid
     AND SFV.label = :feature
  </query>
</mode>

<mode name="token_entitlements">
  <query params="tid">
  SELECT SGT.id, SGT.label, SGT.permanent, SGT.is_base
    FROM rhnServerGroupType SGT, rhnRegTokenEntitlement RTE
   WHERE RTE.reg_token_id = :tid
     AND SGT.id = RTE.server_group_type_id
ORDER BY SGT.label
  </query>
</mode>

<mode name="entitlement_feature_map">
  <query params="">
  SELECT SGT.label AS ENTITLEMENT,
         F.label AS FEATURE
    FROM rhnServerGroupType SGT, 
         rhnServerGroupTypeFeature SGTF, 
         rhnFeature F
   WHERE SGT.id = SGTF.server_group_type_id
     AND F.id = SGTF.feature_id
ORDER BY SGT.label
  </query>
</mode>

<mode name="sat_clusters_for_system">
  <query params="sid">
  SELECT DISTINCT CP.sat_cluster_id
    FROM rhn_check_probe CP
   WHERE CP.host_id = :sid
  </query>
</mode>

</datasource_modes>

